Ext.define("Ext.ux.utils.Utils",{alternateClassName:"Ext.ux.Utils",statics:{formatBoolean:function(a){return !!(a&&(a==true||a.toUpperCase()=="true".toUpperCase()||a.toUpperCase()=="yes".toUpperCase()||a.toUpperCase()=="y".toUpperCase()));
},toDate:function(a){if(a){if(Ext.isString(a)){return Ext.Date.parse(a,messages.global.time.format.dateFormat());
}else{return a;
}}else{return"";
}},formatDate:function(a){if(a){if(Ext.isDate(a)){return Ext.Date.format(a,messages.global.time.format.dateFormat());
}else{return a;
}}else{return"";
}},formatDateTime:function(a){if(a){if(Ext.isDate(a)){return Ext.Date.format(a,messages.global.time.format.datetimeFormat());
}else{return a;
}}else{return"";
}},onDragDropViewRender:function(a){var b=this;
if(b.enableDrag){b.dragZone=Ext.create("Ext.ux.dd.DragZone",{view:a,ddGroup:b.dragGroup||b.ddGroup,dragText:b.dragText});
}if(b.enableDrop){b.dropZone=Ext.create("Ext.grid.ViewDropZone",{view:a,ddGroup:b.dropGroup||b.ddGroup});
}},cronExpressionValidator:function(a){},checkSecondsField:function(a){return Ext.ux.Utils.checkField(a,0,59);
},checkField:function(c,b,h){if(c.indexOf("-")>-1){var g=c.substring(0,c.indexOf("-"));
var a=c.substring(c.indexOf("-")+1);
if(!(Ext.ux.Utils.checkIntValue(g,b,h,true)&&Ext.ux.Utils.checkIntValue(a,b,h,true))){return false;
}try{var f=parseInt(g,10);
var d=parseInt(a,10);
return d>f;
}catch(i){return false;
}}else{if(c.indexOf(",")>-1){return Ext.ux.Utils.checkListField(c,b,h);
}else{if(c.indexOf("/")>-1){return Ext.ux.Utils.checkIncrementField(c,b,h);
}else{if(c.indexOf("*")!=-1){return true;
}else{return Ext.ux.Utils.checkIntValue(c,b,h);
}}}}},checkIntValue:function(d,a,b,c){try{var g=parseInt(d,10);
if(d==g){if(g<a||g>b){return false;
}return true;
}return false;
}catch(f){return false;
}},checkMinutesField:function(a){return Ext.ux.Utils.checkField(a,0,59);
},checkHoursField:function(a){return Ext.ux.Utils.checkField(a,0,23);
},checkDayOfMonthField:function(a){if(a=="?"){return true;
}if(a.indexOf("L")>=0){return Ext.ux.Utils.checkFieldWithLetter(a,"L",1,7,-1,-1);
}else{if(a.indexOf("W")>=0){return Ext.ux.Utils.checkFieldWithLetter(a,"W",1,31,-1,-1);
}else{if(a.indexOf("C")>=0){return Ext.ux.Utils.checkFieldWithLetter(a,"C",1,31,-1,-1);
}else{return Ext.ux.Utils.checkField(a,1,31);
}}}},checkMonthsField:function(a){a.replace("JAN","1");
a.replace("FEB","2");
a.replace("MAR","3");
a.replace("APR","4");
a.replace("MAY","5");
a.replace("JUN","6");
a.replace("JUL","7");
a.replace("AUG","8");
a.replace("SEP","9");
a.replace("OCT","10");
a.replace("NOV","11");
a.replace("DEC","12");
return Ext.ux.Utils.checkField(a,1,31);
},checkDayOfWeekField:function(a){a.replace("SUN","1");
a.replace("MON","2");
a.replace("TUE","3");
a.replace("WED","4");
a.replace("THU","5");
a.replace("FRI","6");
a.replace("SAT","7");
if(a=="?"){return true;
}if(a.indexOf("L")>=0){return Ext.ux.Utils.checkFieldWithLetter(a,"L",1,7,-1,-1);
}else{if(a.indexOf("C")>=0){return Ext.ux.Utils.checkFieldWithLetter(a,"C",1,7,-1,-1);
}else{if(a.indexOf("#")>=0){return Ext.ux.Utils.checkFieldWithLetter(a,"#",1,7,1,5);
}else{return Ext.ux.Utils.checkField(a,1,7);
}}}},checkYearField:function(a){return Ext.ux.Utils.checkField(a,1970,2099);
},checkFieldWithLetter:function(i,c,j,b,f,m){var d=false;
var g=false;
var e=false;
var a=false;
var l=false;
if(c=="L"){d=true;
g=true;
e=false;
a=false;
l=false;
}if(c=="W"||c=="C"){d=false;
g=true;
e=false;
a=true;
l=false;
}if(c=="#"){d=false;
g=true;
e=true;
a=true;
l=true;
}var h="";
var k="";
if(i.indexOf(c)>=0){h=i.substring(0,i.indexOf(c));
}if(!i.endsWith(c)){k=i.substring(i.indexOf(c)+1);
}if(i.indexOf(c)>=0){if(c==i){return d;
}if(g){if(a&&h.length==0){return false;
}if(!Ext.ux.Utils.checkIntValue(h,j,b,true)){return false;
}}else{if(h.length>0){return false;
}}if(e){if(l&&k.length==0){return false;
}if(!Ext.ux.Utils.checkIntValue(k,f,m,true)){return false;
}}else{if(k.length>0){return false;
}}}return true;
},checkIncrementField:function(d,b,c){var e=d.substring(0,d.indexOf("/"));
var a=d.substring(d.indexOf("/")+1);
if(!("*"==e)){return Ext.ux.Utils.checkIntValue(e,b,c,true)&&Ext.ux.Utils.checkIntValue(a,b,c,false);
}else{return Ext.ux.Utils.checkIntValue(a,b,c,true);
}},checkListField:function(k,h,c){var n=k.split(",");
var m=new Array(n.length);
for(var d=0;
d<n.length;
d++){m[d]=n[d];
}var b=-1;
for(var f=0;
f<m.length;
f++){var l=m[f];
if(!Ext.ux.Utils.checkIntValue(l,h,c,true)){return false;
}try{var a=parseInt(l,10);
if(a<=b){return false;
}else{b=a;
}}catch(g){}}return true;
}}});
Ext.define("Ext.ux.statusbar.StatusBar",{extend:"Ext.toolbar.Toolbar",alternateClassName:"Ext.ux.StatusBar",alias:"widget.statusbar",requires:["Ext.toolbar.TextItem"],cls:"x-statusbar",busyIconCls:"x-status-busy",busyText:"Loading...",autoClear:5000,emptyText:"&#160;",activeThreadId:0,initComponent:function(){var a=this.statusAlign==="right";
this.callParent(arguments);
this.currIconCls=this.iconCls||this.defaultIconCls;
this.statusEl=Ext.create("Ext.toolbar.TextItem",{cls:"x-status-text "+(this.currIconCls||""),text:this.text||this.defaultText||""});
if(a){this.cls+=" x-status-right";
this.add("->");
this.add(this.statusEl);
}else{this.insert(0,this.statusEl);
this.insert(1,"->");
}},setStatus:function(e){var a=this;
e=e||{};
Ext.suspendLayouts();
if(Ext.isString(e)){e={text:e};
}if(e.text!==undefined){a.setText(e.text);
}if(e.iconCls!==undefined){a.setIcon(e.iconCls);
}if(e.clear){var f=e.clear,d=a.autoClear,b={useDefaults:true,anim:true};
if(Ext.isObject(f)){f=Ext.applyIf(f,b);
if(f.wait){d=f.wait;
}}else{if(Ext.isNumber(f)){d=f;
f=b;
}else{if(Ext.isBoolean(f)){f=b;
}}}f.threadId=this.activeThreadId;
Ext.defer(a.clearStatus,d,a,[f]);
}Ext.resumeLayouts(true);
return a;
},clearStatus:function(e){e=e||{};
var c=this,b=c.statusEl;
if(e.threadId&&e.threadId!==c.activeThreadId){return c;
}var d=e.useDefaults?c.defaultText:c.emptyText,a=e.useDefaults?(c.defaultIconCls?c.defaultIconCls:""):"";
if(e.anim){b.el.puff({remove:false,useDisplay:true,callback:function(){b.el.show();
c.setStatus({text:d,iconCls:a});
}});
}else{c.setStatus({text:d,iconCls:a});
}return c;
},setText:function(b){var a=this;
a.activeThreadId++;
a.text=b||"";
if(a.rendered){a.statusEl.setText(a.text);
}return a;
},getText:function(){return this.text;
},setIcon:function(a){var b=this;
b.activeThreadId++;
a=a||"";
if(b.rendered){if(b.currIconCls){b.statusEl.removeCls(b.currIconCls);
b.currIconCls=null;
}if(a.length>0){b.statusEl.addCls(a);
b.currIconCls=a;
}}else{b.currIconCls=a;
}return b;
},showBusy:function(a){if(Ext.isString(a)){a={text:a};
}a=Ext.applyIf(a||{},{text:this.busyText,iconCls:this.busyIconCls});
return this.setStatus(a);
}});
Ext.define("Ext.ux.statusbar.ValidationStatus",{extend:"Ext.Component",requires:["Ext.util.MixedCollection"],errorIconCls:"x-status-error",errorListCls:"x-status-error-list",validIconCls:"x-status-valid",showText:"The form has errors (click for details...)",hideText:"Click again to hide the error list",submitText:"Saving...",init:function(a){a.on("render",function(){this.statusBar=a;
this.monitor=true;
this.errors=Ext.create("Ext.util.MixedCollection");
this.listAlign=(a.statusAlign==="right"?"br-tr?":"bl-tl?");
if(this.form){this.formPanel=Ext.getCmp(this.form);
this.basicForm=this.formPanel.getForm();
this.startMonitoring();
this.basicForm.on("beforeaction",function(d,c){if(c.type==="submit"){this.monitor=false;
}},this);
var b=function(){this.monitor=true;
};
this.basicForm.on("actioncomplete",b,this);
this.basicForm.on("actionfailed",b,this);
}},this,{single:true});
a.on({scope:this,afterlayout:{single:true,fn:function(){a.statusEl.getEl().on("click",this.onStatusClick,this,{buffer:200});
}},beforedestroy:{single:true,fn:this.onDestroy}});
},startMonitoring:function(){this.basicForm.getFields().each(function(a){a.on("validitychange",this.onFieldValidation,this);
},this);
},stopMonitoring:function(){this.basicForm.getFields().each(function(a){a.un("validitychange",this.onFieldValidation,this);
},this);
},onDestroy:function(){this.stopMonitoring();
this.statusBar.statusEl.un("click",this.onStatusClick,this);
this.callParent(arguments);
},onFieldValidation:function(a,b){if(!this.monitor){return false;
}var c=a.getErrors()[0];
if(c){this.errors.add(a.id,{field:a,msg:c});
}else{this.errors.removeAtKey(a.id);
}this.updateErrorList();
if(this.errors.getCount()>0){if(this.statusBar.getText()!==this.showText){this.statusBar.setStatus({text:this.showText,iconCls:this.errorIconCls});
}}else{this.statusBar.clearStatus().setIcon(this.validIconCls);
}},updateErrorList:function(){if(this.errors.getCount()>0){var a="<ul>";
this.errors.each(function(b){a+=('<li id="x-err-'+b.field.id+'"><a href="#">'+b.msg+"</a></li>");
},this);
this.getMsgEl().update(a+"</ul>");
}else{this.getMsgEl().update("");
}this.getMsgEl().setSize("auto","auto");
},getMsgEl:function(){if(!this.msgEl){this.msgEl=Ext.DomHelper.append(Ext.getBody(),{cls:this.errorListCls},true);
this.msgEl.hide();
this.msgEl.on("click",function(b){var a=b.getTarget("li",10,true);
if(a){Ext.getCmp(a.id.split("x-err-")[1]).focus();
this.hideErrors();
}},this,{stopEvent:true});
}return this.msgEl;
},showErrors:function(){this.updateErrorList();
this.getMsgEl().alignTo(this.statusBar.getEl(),this.listAlign).slideIn("b",{duration:300,easing:"easeOut"});
this.statusBar.setText(this.hideText);
this.formPanel.el.on("click",this.hideErrors,this,{single:true});
},hideErrors:function(){var a=this.getMsgEl();
if(a.isVisible()){a.slideOut("b",{duration:300,easing:"easeIn"});
this.statusBar.setText(this.showText);
}this.formPanel.el.un("click",this.hideErrors,this);
},onStatusClick:function(){if(this.getMsgEl().isVisible()){this.hideErrors();
}else{if(this.errors.getCount()>0){this.showErrors();
}}}});
Ext.define("Ext.ux.data.AvailableStore",{extend:"Ext.data.Store",remove:function(b,a){if(!Ext.isArray(b)){b=[b];
}this.callParent(arguments);
if(b.length>0){this.fireEvent("batchRemove",this,b);
}}});
Ext.define("Ext.ux.data.PagingMemoryProxy",{extend:"Ext.data.proxy.Memory",alias:"proxy.pagingmemory",alternateClassName:"Ext.data.PagingMemoryProxy",read:function(c,h,i){var d=this.data;
if(!c.initLoad){d=this.__data;
}else{this.__data=this.data;
}var e=this.getReader(),j=e.read(d),g,a,f,b;
i=i||this;
a=c.filters;
if(a.length>0){b=[];
Ext.each(j.records,function(k){var p=true,q=a.length,l;
for(l=0;
l<q;
l++){var o=a[l],n=o.filterFn,m=o.scope;
p=p&&n.call(m,k);
}if(p){b.push(k);
}},this);
j.records=b;
j.totalRecords=j.total=b.length;
}g=c.sorters;
if(g.length>0){f=function(m,l){var k=g[0].sort(m,l),o=g.length,n;
for(n=1;
n<o;
n++){k=k||g[n].sort.call(this,m,l);
}return k;
};
j.records.sort(f);
}if(c.start!==undefined&&c.limit!==undefined){j.records=j.records.slice(c.start,c.start+c.limit);
j.count=j.records.length;
}Ext.apply(c,{resultSet:j});
c.setCompleted();
c.setSuccessful();
Ext.Function.defer(function(){Ext.callback(h,i,[c]);
},10);
}});
Ext.define("Ext.ux.dd.DragZone",{extend:"Ext.dd.DragZone",containerScroll:false,dragText:"{0} selected row{1}",constructor:function(a){var b=this;
Ext.apply(b,a);
b.callParent([b.view.el.dom.parentNode]);
b.ddel=Ext.get(document.createElement("div"));
b.ddel.addCls(Ext.baseCSSPrefix+"grid-dd-wrap");
b.ddel.addCls("drag-text-width");
},init:function(c,a,b){this.initTarget(c,a,b);
this.view.mon(this.view,{itemmousedown:this.onItemMouseDown,scope:this});
},onItemMouseDown:function(b,a,d,c,f){if(!this.isPreventDrag(f,a,d,c)){this.handleMouseDown(f);
if(b.getSelectionModel().selectionMode=="MULTI"&&!f.ctrlKey&&b.getSelectionModel().isSelected(a)){return false;
}}},isPreventDrag:function(a){return false;
},getDragData:function(g){var c=this.view,f=g.getTarget(c.getItemSelector()),b,a,d;
if(f){b=c.getRecord(f);
a=c.getSelectionModel();
d=a.getSelection();
return{copy:this.view.copy||(this.view.allowCopy&&g.ctrlKey),event:new Ext.EventObjectImpl(g),view:c,ddel:this.ddel,item:f,records:d,fromPosition:Ext.fly(f).getXY()};
}},onInitDrag:function(b,i){var f=this,g=f.dragData,d=g.view,a=d.getSelectionModel(),c=d.getRecord(g.item),h=g.event;
if(!a.isSelected(c)||h.hasModifier()){a.selectWithEvent(c,h,true);
}g.records=a.getSelection();
f.ddel.update(f.getDragText());
f.proxy.update(f.ddel.dom);
f.onStartDrag(b,i);
return true;
},getDragText:function(){var a=this.dragData.records.length;
return Ext.String.format(this.dragText,a,a==1?"":"s");
},getRepairXY:function(b,a){return a?a.fromPosition:false;
}});
Ext.define("Ext.ux.dd.DropZone",{extend:"Ext.dd.DropZone",getTargetFromEvent:function(a){return a.getTarget(".x-grid-row");
},onNodeEnter:function(d,a,c,b){Ext.fly(d).addCls("drop-target-hover");
},onNodeOut:function(d,a,c,b){Ext.fly(d).removeCls("drop-target-hover");
}});
Ext.define("Ext.ux.form.SearchField",{extend:"Ext.form.field.Trigger",alias:"widget.searchfield",trigger1Cls:Ext.baseCSSPrefix+"form-clear-trigger",trigger2Cls:Ext.baseCSSPrefix+"form-search-trigger",hasSearch:false,paramName:"query",initComponent:function(){var a=this;
a.callParent(arguments);
a.on("specialkey",function(b,c){if(c.getKey()==c.ENTER){a.onTrigger2Click();
}});
a.store.remoteFilter=true;
if(!a.store.proxy.hasOwnProperty("filterParam")){a.store.proxy.filterParam=a.paramName;
}a.store.proxy.encodeFilters=function(b){return b[0].value;
};
},afterRender:function(){this.callParent();
this.triggerCell.item(0).setDisplayed(false);
},onTrigger1Click:function(){var a=this;
if(a.hasSearch){a.setValue("");
a.store.clearFilter();
a.hasSearch=false;
a.triggerCell.item(0).setDisplayed(false);
a.updateLayout();
}},onTrigger2Click:function(){var a=this,b=a.getValue();
if(b.length>0){a.store.filter({id:a.paramName,property:a.paramName,value:b});
a.hasSearch=true;
a.triggerCell.item(0).setDisplayed(true);
a.updateLayout();
}}});
Ext.define("Ext.ux.form.field.DateTimePicker",{extend:"Ext.picker.Date",alias:"widget.dateptimepicker",okText:"确定",okTip:"确定",renderTpl:['<div id="{id}-innerEl" role="grid">','<div role="presentation" class="{baseCls}-header">','<a id="{id}-prevEl" class="{baseCls}-prev {baseCls}-arrow" href="#" role="button" title="{prevText}" hidefocus="on" ></a>','<div class="{baseCls}-month" id="{id}-middleBtnEl">{%this.renderMonthBtn(values, out)%}</div>','<a id="{id}-nextEl" class="{baseCls}-next {baseCls}-arrow" href="#" role="button" title="{nextText}" hidefocus="on" ></a>',"</div>",'<table id="{id}-eventEl" class="{baseCls}-inner" cellspacing="0" role="presentation">','<thead role="presentation"><tr role="presentation">','<tpl for="dayNames">','<th role="columnheader" class="{parent.baseCls}-column-header" title="{.}">','<div class="{parent.baseCls}-column-header-inner">{.:this.firstInitial}</div>',"</th>","</tpl>","</tr></thead>",'<tbody role="presentation"><tr role="presentation">','<tpl for="days">',"{#:this.isEndOfWeek}",'<td role="gridcell" id="{[Ext.id()]}">','<a role="presentation" hidefocus="on" class="{parent.baseCls}-date" href="#"></a>',"</td>","</tpl>","</tr></tbody>","</table>",'<table id="{id}-timeEl" style="table-layout:auto;width:auto;margin:0 3px;" class="x-datepicker-inner" cellspacing="0">',"<tbody><tr>","<td>{%this.renderHourBtn(values,out)%}</td>","<td>{%this.renderMinuteBtn(values,out)%}</td>","<td>{%this.renderSecondBtn(values,out)%}</td>","</tr></tbody>","</table>",'<tpl if="showToday">','<div id="{id}-footerEl" role="presentation" class="{baseCls}-footer">{%this.renderOkBtn(values, out)%}{%this.renderTodayBtn(values, out)%}</div>',"</tpl>","</div>",{firstInitial:function(a){return Ext.picker.Date.prototype.getDayInitial(a);
},isEndOfWeek:function(b){b--;
var a=b%7===0&&b!==0;
return a?'</tr><tr role="row">':"";
},renderTodayBtn:function(a,b){Ext.DomHelper.generateMarkup(a.$comp.todayBtn.getRenderTree(),b);
},renderMonthBtn:function(a,b){Ext.DomHelper.generateMarkup(a.$comp.monthBtn.getRenderTree(),b);
},renderHourBtn:function(a,b){Ext.DomHelper.generateMarkup(a.$comp.hourBtn.getRenderTree(),b);
},renderMinuteBtn:function(a,b){Ext.DomHelper.generateMarkup(a.$comp.minuteBtn.getRenderTree(),b);
},renderSecondBtn:function(a,b){Ext.DomHelper.generateMarkup(a.$comp.secondBtn.getRenderTree(),b);
},renderOkBtn:function(a,b){Ext.DomHelper.generateMarkup(a.$comp.okBtn.getRenderTree(),b);
}}],beforeRender:function(){var b=this,a=Ext.form.field.Number;
b.hourBtn=new a({minValue:0,maxValue:23,step:1,width:55});
b.minuteBtn=new a({minValue:0,maxValue:59,step:1,width:70,labelWidth:10,fieldLabel:"&nbsp;"});
b.secondBtn=new a({minValue:0,maxValue:59,step:1,width:70,labelWidth:10,fieldLabel:"&nbsp;"});
b.okBtn=new Ext.button.Button({ownerCt:b,ownerLayout:b.getComponentLayout(),text:b.okText,tooltip:b.okTip,tooltipType:"title",handler:b.okHandler,scope:b});
b.callParent();
},finishRenderChildren:function(){var a=this;
a.hourBtn.finishRender();
a.minuteBtn.finishRender();
a.secondBtn.finishRender();
a.okBtn.finishRender();
a.callParent();
},okHandler:function(){var b=this,a=b.okBtn;
if(a&&!a.disabled){b.setValue(this.getValue());
b.fireEvent("select",b,b.value);
b.onSelect();
}return b;
},selectedUpdate:function(a){this.callParent([Ext.Date.clearTime(a,true)]);
},update:function(a,c){var b=this;
b.hourBtn.setValue(a.getHours());
b.minuteBtn.setValue(a.getMinutes());
b.secondBtn.setValue(a.getSeconds());
return this.callParent(arguments);
},setValue:function(b,a){var c=this;
if(a!==true){b.setHours(c.hourBtn.getValue());
b.setMinutes(c.minuteBtn.getValue());
b.setSeconds(c.secondBtn.getValue());
}c.value=b;
c.update(c.value);
return c;
},beforeDestroy:function(){var a=this;
if(a.rendered){Ext.destroy(a.hourBtn,a.minuteBtn,a.secondBtn,a.okBtn);
}a.callParent();
}},function(){var b=this.prototype,a=Ext.Date;
b.monthNames=a.monthNames;
b.dayNames=a.dayNames;
b.format=a.defaultFormat;
});
Ext.define("Ext.ux.form.field.DateTimeField",{extend:"Ext.form.field.Date",alias:"widget.datetimefield",requires:["Ext.ux.form.field.DateTimePicker"],format:"Y-m-d H:i:s",altFormats:"Y-m-d H:i:s",createPicker:function(){var a=this,b=Ext.String.format;
return new Ext.ux.form.field.DateTimePicker({pickerField:a,ownerCt:a.ownerCt,renderTo:document.body,floating:true,hidden:true,focusOnShow:true,minDate:a.minValue,maxDate:a.maxValue,disabledDatesRE:a.disabledDatesRE,disabledDatesText:a.disabledDatesText,disabledDays:a.disabledDays,disabledDaysText:a.disabledDaysText,format:a.format,showToday:a.showToday,startDay:a.startDay,minText:b(a.minText,a.formatDate(a.minValue)),maxText:b(a.maxText,a.formatDate(a.maxValue)),listeners:{scope:a,select:a.onSelect},keyNavConfig:{esc:function(){a.collapse();
}}});
},onExpand:function(){var a=this.getValue();
this.picker.setValue(Ext.isDate(a)?a:new Date(),true);
}});
Ext.define("Ext.ux.form.field.PropertyGrid",{mixins:{field:"Ext.form.field.Field"},initField:function(){var a=this;
a.addEvents("change","validitychange","dirtychange");
a.initValue();
a.store.addListener("add",a.checkDirty,a);
a.store.addListener("update",a.checkDirty,a);
a.store.addListener("remove",a.checkDirty,a);
},isDirty:function(){var a=this;
return !a.disabled&&!a.isEqual(Ext.encode(a.getValue()),Ext.encode(a.originalValue));
},setValue:function(b){var a=this;
if(b===null||b===undefined){b=[];
}a.store.loadData(b);
a.value=b;
a.checkChange();
return a;
},getSubmitData:function(){var a=this,b=null;
if(!a.disabled&&a.submitValue&&!a.isFileUpload()){b={};
b[a.getName()]=""+Ext.encode(a.getValue());
}return b;
},getValue:function(){var a=this;
return a.getData();
},getData:function(){var d=this,e=[],b,c,a;
for(b=0;
b<d.store.data.items.length;
b++){c=d.store.data.items[b].data;
e[b]={};
for(a in c){e[b][a]=c[a];
}}return e;
},reset:function(){var a=this;
a.store.removeAll();
a.setValue(a.originalValue);
a.clearInvalid();
delete a.wasValid;
}});
Ext.define("Ext.ux.form.MultiSelect",{extend:"Ext.form.field.Base",alternateClassName:"Ext.ux.Multiselect",alias:["widget.multiselect","widget.multiselectfield"],requires:["Ext.panel.Panel","Ext.grid.Panel","Ext.data.Store","Ext.data.StoreManager","Ext.form.FieldSet","Ext.ux.data.PagingMemoryProxy","Ext.ux.data.AvailableStore","Ext.ux.dd.DragZone","Ext.ux.utils.Utils","Ext.ux.statusbar.StatusBar"],gridCfg:{},availableCfg:null,selectedCfg:null,selectedViewCfg:null,availableViewCfg:null,availableIdProperty:null,selectedIdProperty:null,availableTitle:"Available",selectedTitle:"Selected",columns:[],availableColumns:null,selectedColumns:null,maxSelected:null,selectedSorters:null,pageSize:10,filterMode:"remote",selectedStore:undefined,priorityFiled:undefined,height:200,initComponent:function(){var a=this;
if(a.availableCfg==null){a.availableCfg=a.gridCfg;
}if(a.selectedCfg==null){a.selectedCfg=a.gridCfg;
}if(a.availableColumns==null&&a.columns!=null){a.availableColumns=a.columns;
}if(a.selectedColumns==null&&a.availableColumns!=null){a.selectedColumns=a.availableColumns;
}a.callParent();
},bindStore:function(a,b){var c=this,d=c.store;
if(d&&!b&&d!==a&&d.autoDestroy){d.destroyStore();
}c.store=a?Ext.data.StoreManager.lookup(a):null;
},onRender:function(l,j){var p=this,o={sorters:p.store?(p.store.sorters?p.store.sorters.items:null):null,model:p.store.model},m=Ext.create("Ext.ux.data.AvailableStore",Ext.applyIf(o,this.filterMode=="local"?{pageSize:this.pageSize,reader:p.store.reader,filterLocalBy:function(u){var t=this,q=t.decodeFilters(u),r=0,s=q.length;
t.filters.clear();
for(;
r<s;
r++){t.filters.replace(q[r]);
}t.loadPage(1);
},clearLocalFilter:function(){this.filters.clear();
this.loadPage(1);
},listeners:{remove:function(q,r){},batchRemove:function(z,s){var q,x=z.proxy.reader.getIdProperty();
for(var t=0;
t<s.length;
t++){var w=s[t],y=w.data;
for(var v=0;
v<z.proxy.__data.length;
v++){var u=z.proxy.__data[v];
if(y[x]==u[x]){q=u;
Ext.Array.remove(z.proxy.__data,u);
break;
}}}if(q){Ext.Array.remove(z.proxy.__data,q);
if(z.proxy.__data&&z.proxy.__data.length<=(z.currentPage-1)*z.pageSize){z.loadPage(z.currentPage>0?z.currentPage-1:1);
}else{z.load();
}}},add:function(z,s){var x=z.proxy.reader.getIdProperty();
for(var t=0;
t<s.length;
t++){var w=s[t];
var y=w.data,q=true;
for(var v=0;
v<z.proxy.__data.length;
v++){var u=z.proxy.__data[v];
if(y[x]==u[x]){q=false;
break;
}}if(q){z.proxy.__data.push(y);
}}if(z.currentPage<1){z.loadPage(1);
}else{z.load();
}}}}:null)),i=Ext.applyIf({forceFit:true,plugins:Ext.applyIf({ptype:"gridviewdragdrop",enableDrag:!p.readOnly,enableDrop:!p.readOnly,onViewRender:Ext.ux.utils.Utils.onDragDropViewRender},p.enableSort?{ddGroup:"availableGridDDGroup-"+p.id}:{ddGroup:"availableGridDDGroup-"+p.id,dropGroup:"selectedGridDDGroup-"+p.id})},p.availableViewCfg),e=Ext.applyIf({forceFit:true,plugins:Ext.applyIf({ptype:"gridviewdragdrop",enableDrag:!p.readOnly,enableDrop:!p.readOnly,onViewRender:Ext.ux.utils.Utils.onDragDropViewRender},p.enableSort?{ddGroup:"availableGridDDGroup-"+p.id}:{dragGroup:"selectedGridDDGroup-"+p.id,dropGroup:"availableGridDDGroup-"+p.id}),listeners:{beforedrop:function(r,s){if(p.maxSelected){if(s&&s.records&&s.view.id!=this.id){var q=this.store.getCount()+s.records.length;
if(q>p.maxSelected){return false;
}}}},drop:function(t,u,q,w){if(p.priorityFiled){var r=this.store.getRange();
for(var s=0;
s<r.length;
s++){var v=r[s];
v.set(p.priorityFiled,s+1);
}}p.fireEvent("updatedPriorityFiled");
this.store.sort(p.selectedSorters?p.selectedSorters:m.sorters);
}}},p.selectedViewCfg),k={multiSelect:true,stripeRows:true,autoDestroy:true,flex:1},f=Ext.apply({title:p.availableTitle,height:p.ownerCt?p.ownerCt.getHeight()-45:"100%",itemId:p.itemId,viewConfig:i,store:m,margins:"0 5 0 0",autoScroll:true,forceFit:true,columns:p.availableColumns,bbar:Ext.create("Ext.toolbar.Paging",{store:m,displayMsg:"{0} - {1} of {2}",displayInfo:true})},p.availableCfg,k,{flex:p.availableCfg&&p.availableCfg.flex?p.availableCfg.flex:1});
if(!m.proxy.__data){m.proxy.__data=[];
}if(p.selectedViewCfg&&p.selectedViewCfg.listeners&&p.selectedViewCfg.listeners!=null){for(var b in p.selectedViewCfg.listeners){if(b&&p.selectedViewCfg.listeners[b]){e.listeners[b]=p.selectedViewCfg.listeners[b];
}}}if(!p.selectedStore){p.selectedStore=Ext.create("Ext.data.Store",{model:p.store.model,sorters:p.selectedSorters?p.selectedSorters:p.store.sorters,listeners:{add:function(q){p.updateSelectedGridStatusBar(q.getCount());
try{p.up("form").getForm().checkDirty();
}catch(r){}},remove:function(q){p.updateSelectedGridStatusBar(q.getCount());
try{p.up("form").getForm().checkDirty();
}catch(r){}}}});
}var a=Ext.apply({title:p.selectedTitle,height:p.ownerCt?p.ownerCt.getHeight()-45:"100%",itemId:p.selectedItemId,viewConfig:e,store:p.selectedStore,margins:"0 0 0 5",autoScroll:true,forceFit:true,columns:p.selectedColumns,bbar:p.maxSelected?Ext.create("Ext.ux.StatusBar",{id:"selectedGrid-statusBar",text:""}):null,listeners:{afterrender:function(){p.updateSelectedGridStatusBar(p.selectedStore.getCount());
}}},p.selectedCfg,k,{flex:p.selectedCfg&&p.selectedCfg.flex?p.selectedCfg.flex:1}),g=Ext.widget("grid",f),h=Ext.widget("grid",a),d,n=[];
p.callParent(arguments);
if(!Ext.isIE){p.el.mask("rendering...");
}p.availableGrid=g;
p.selectedGrid=h;
if(!p.readOnly){p.mon(p.availableGrid,"itemdblclick",this.onAvailableDblClick,this);
p.mon(p.selectedGrid,"itemdblclick",this.onSelectedDblClick,this);
}var c=p.up("form");
p.mon(c,"resize",this.onFormResizeHandler,this);
},updateSelectedGridStatusBar:function(c){var b=this;
if(b.maxSelected){var e=Ext.getCmp("selectedGrid-statusBar");
var a="Current/Maximum: {0}/{1}";
var d=b.maxSelected?b.maxSelected:"&infin;";
e.setStatus(Ext.String.format(a,c,d));
}},onFormResizeHandler:function(){var b=this;
var a=b.ownerCt?b.ownerCt.getHeight()-45:"100%";
if(Ext.isNumber(a)){b.availableGrid.setHeight(a);
b.selectedGrid.setHeight(a);
}},getSubTplMarkup:function(){return"";
},afterRender:function(){this.callParent();
var e=this,b=e.availableGrid,d=e.selectedGrid,a=b.getStore(),g=d.getStore(),f;
if(d){d.getStore().removeAll();
a.removeAll();
f=[];
if(this.filterMode=="local"){e.store.each(function(h){f.push(h.data);
});
var c=a.getProxy();
a.setProxy(new Ext.ux.data.PagingMemoryProxy({data:f,store:a}));
a.load({params:{start:0,limit:e.pageSize},initLoad:true});
delete c;
}else{e.store.each(function(h){f.push(h.copy(h.getId()));
});
a.add(f);
}}Ext.Function.defer(function(){var h=e.ownerCt.getHeight()-20;
var i=e.innerCt=Ext.create("Ext.panel.Panel",{renderTo:e.bodyEl,frame:true,height:h||e.height,style:"border:none;",layout:{type:"hbox",pack:"start",align:"stretch"},items:[b,{xtype:"container",width:30,height:"100%",layout:{type:"vbox",padding:"0",pack:"center",align:"center"},defaults:{margins:"0 0 5 0"},items:[{xtype:"button",iconCls:"arrow_right",tooltip:globalRes.tooltip.moveToRight,disabled:e.readOnly,handler:function(){var k=b.getSelectionModel();
if(k.hasSelection()){var j=k.getSelection();
if(e.maxSelected&&j){var l=e.selectedStore.getCount()+j.length;
if(l>e.maxSelected){return false;
}}g.add(j);
a.remove(j);
if(!e.etlFileLayoutMode){a.sort(a.sorters);
}e.updatePriorityFiled();
}}},{xtype:"button",iconCls:"arrow_right_double",tooltip:globalRes.tooltip.moveAllToRight,disabled:e.readOnly,handler:function(){var j;
if(e.maxSelected){var k=e.maxSelected-e.selectedStore.getCount()-1;
if(k>=0){j=a.getRange(0,k);
}}else{j=a.getRange();
}if(j){g.add(j);
a.remove(j);
if(!e.etlFileLayoutMode){a.sort(a.sorters);
}e.updatePriorityFiled();
}}},{xtype:"button",iconCls:"arrow_left_double",tooltip:globalRes.tooltip.moveAllToLeft,disabled:e.readOnly,handler:function(){var j=g.getRange();
a.add(j);
g.remove(j);
e.updatePriorityFiled();
}},{xtype:"button",iconCls:"arrow_left",tooltip:globalRes.tooltip.moveToLeft,disabled:e.readOnly,handler:function(){var k=d.getSelectionModel();
if(k.hasSelection()){var j=k.getSelection();
a.add(j);
g.remove(j);
e.updatePriorityFiled();
}}}]},d]});
i.ownerCt=e;
e.ownerCt.doLayout();
if(!Ext.isIE){e.el.unmask();
}},100);
},updatePriorityFiled:function(){var a=this;
new Ext.util.DelayedTask(function(){if(a.priorityFiled){var b=a.selectedStore.getRange();
for(var c=0;
c<b.length;
c++){var f=b[c];
f.set(a.priorityFiled,c+1);
}try{a.selectedGrid.getView().refresh();
}catch(d){}}a.fireEvent("updatedPriorityFiled");
}).delay(500);
},setRawValue:function(j){var i=this,b=Ext.Array,f,g,e=this.filterMode=="local";
j=b.from(j);
i.rawValue=j;
if(i.rendered&&i.selectedGrid){f=i.selectedGrid.getStore();
g=i.availableGrid.getStore();
g.add(f.getRange());
f.removeAll();
var k,a=[],c;
if(e){k=this.store;
c=k.data.clone();
}else{k=g;
}Ext.Array.forEach(j,function(n){var o=(n.getId&&Ext.isFunction(n.getId))?n.getId():n.id||n;
if(i.availableIdProperty){o=n.isModel?n.data[i.availableIdProperty]:n[i.availableIdProperty];
}var m=k.getById(o);
if(m){a.push(m);
if(c){var l=c.indexOf(m);
if(l!==-1){c.removeAt(l);
}}}});
f.add(a);
i.updateSelectedGridStatusBar(a.length);
if(e){var d=[];
c.each(function(l){d.push(l.data);
});
var h=g.getProxy();
if(h.$className=="Ext.ux.data.PagingMemoryProxy"){h.data=d;
}else{g.setProxy(new Ext.ux.data.PagingMemoryProxy({data:d}));
delete h;
}g.load({params:{start:0,limit:10},initLoad:true});
}else{g.remove(a);
}}return j;
},getRawValue:function(){var b=this,a=b.selectedGrid,c=b.rawValue;
if(a){c=Ext.Array.map(a.getStore().getRange(),function(d){return d.data;
});
}b.rawValue=c;
return c;
},getCompleteValue:function(){var c=this,b=c.selectedGrid,d=c.rawValue;
if(b){var a=b.getStore();
if(a.isFiltered()){if(a.clearLocalFilter){a.clearLocalFilter();
}else{a.clearFilter();
}}d=Ext.Array.map(a.getRange(),function(e){return e.data;
});
}c.rawValue=d;
return d;
},getSubmitValue:function(){return this.processRawValue(this.getCompleteValue());
},getModelData:function(){var a=this,b=null;
if(!a.disabled&&!a.isFileUpload()){b={};
b[a.getName()]=a.processRawValue(a.getCompleteValue());
}return b;
},valueToRaw:function(a){var b=[];
if(a){if(Ext.isArray(a)){Ext.Array.forEach(a,function(c){b.push(c);
});
}if(Ext.isObject(a)){a.each(function(c){b.push(c);
});
}}return b;
},onDisable:function(){this.callParent();
this.disabled=true;
this.updateReadOnly();
},onEnable:function(){this.callParent();
this.disabled=false;
this.updateReadOnly();
},setReadOnly:function(a){this.readOnly=a;
this.updateReadOnly();
},updateReadOnly:function(){var a=this,b=a.readOnly||a.disabled;
if(a.rendered){if(a.selectedGrid){a.selectedGrid.setDisabled(b);
}if(a.availableGrid){a.availableGrid.setDisabled(b);
}}},onAvailableDblClick:function(a,c){var e=this;
var f=this.selectedGrid.getStore(),b=this.availableGrid.getStore();
if(e.maxSelected){var d=e.selectedStore.getCount()+1;
if(d>e.maxSelected){return false;
}}b.remove(c);
f.add(c);
this.selectedGrid.getSelectionModel().select(c);
e.updatePriorityFiled();
},onSelectedDblClick:function(a,c){var d=this;
var e=this.selectedGrid.getStore(),b=this.availableGrid.getStore();
b.add(c);
e.remove(c);
this.availableGrid.getSelectionModel().select(c);
d.updatePriorityFiled();
},onDestroy:function(){var a=this.up("form");
if(!this.readOnly){this.mun(this.availableGrid,"itemdblclick",this.onAvailableDblClick,this);
this.mun(this.selectedGrid,"itemdblclick",this.onSelectedDblClick,this);
}if(a){this.mon(a,"resize",this.onFormResizeHandler,this);
}Ext.destroy(this.selectedGrid,this.availableGrid);
Ext.destroyMembers(this,"innerCt");
this.callParent();
}});
Ext.define("Ext.ux.form.FormDataCustomFiled",{extend:"Ext.form.field.Trigger",alias:["widget.formDataCustomFiled","widget.formDataCustomFiled"],uses:["Ext.button.Button","Ext.layout.component.field.Field"],buttonText:"Browse...",buttonOnly:false,buttonMargin:3,fieldBodyCls:Ext.baseCSSPrefix+"form-file-wrap",readOnly:true,componentLayout:"triggerfield",childEls:["customBtnEL","buttonEl","buttonEl-btnEl","browseButtonWrap"],onRender:function(){var a=this,b;
a.callParent(arguments);
b=a.inputEl;
b.dom.name="";
a.customBtnEL.dom.name=a.getName();
a.customBtnEL.on({scope:a,click:a.onClick});
if(a.buttonOnly){a.inputCell.setDisplayed(false);
}a.browseButtonWrap.dom.style.width=(a.browseButtonWrap.dom.lastChild.offsetWidth+a.buttonEl.getMargin("lr"))+"px";
if(Ext.isIE){a.buttonEl.repaint();
}},getTriggerMarkup:function(){var d=this,a,c=Ext.widget("button",Ext.apply({id:d.id+"-buttonEl",ui:d.ui,disabled:d.disabled,text:d.buttonText,cls:Ext.baseCSSPrefix+"form-file-btn",preventDefault:false,style:d.buttonOnly?"":"margin-left:"+d.buttonMargin+"px"},d.buttonConfig)),b=c.getRenderTree(),e={id:d.id+"-customBtnEL",cls:Ext.baseCSSPrefix+"form-file-input",tag:"input",size:1,value:"11111"};
if(d.disabled){e.disabled=true;
}b.cn=e;
a='<td id="'+d.id+'-browseButtonWrap">'+Ext.DomHelper.markup(b)+"</td>";
return a;
},createFileInput:function(){var a=this;
a.customBtnEL=a.buttonEl.createChild({name:a.getName(),id:a.id+"-customBtnEL",cls:Ext.baseCSSPrefix+"form-file-input",tag:"input",size:1});
a.customBtnEL.on({scope:a,click:a.onClick});
},onClick:function(){},setValue:function(a){Ext.ux.form.FormDataCustomFiled.superclass.setValue.call(this,a);
},reset:function(){var a=this;
if(a.rendered){a.customBtnEL.remove();
a.createFileInput();
a.inputEl.dom.value="";
}a.callParent();
},onDisable:function(){this.callParent();
this.disableItems();
},disableItems:function(){var a=this.customBtnEL;
if(a){a.dom.disabled=true;
}this["buttonEl-btnEl"].dom.disabled=true;
},onEnable:function(){var a=this;
a.callParent();
a.customBtnEL.dom.disabled=false;
this["buttonEl-btnEl"].dom.disabled=true;
},onDestroy:function(){Ext.destroyMembers(this,"customBtnEL","buttonEl");
this.callParent();
}});
Ext.define("Ext.ux.form.ItemSelector",{extend:"Ext.ux.form.MultiSelect",alias:["widget.itemselectorfield","widget.itemselector"],alternateClassName:["Ext.ux.ItemSelector"],requires:["Ext.button.Button","Ext.ux.form.MultiSelect"],hideNavIcons:false,buttons:["top","up","add","remove","down","bottom"],buttonsText:{top:"Move to Top",up:"Move Up",add:"Add to Selected",remove:"Remove from Selected",down:"Move Down",bottom:"Move to Bottom"},layout:{type:"hbox",align:"stretch"},initComponent:function(){var a=this;
a.ddGroup=a.id+"-dd";
a.callParent();
a.bindStore(a.store);
},createList:function(b){var a=this;
return Ext.create("Ext.ux.form.MultiSelect",{submitValue:false,getSubmitData:function(){return null;
},getModelData:function(){return null;
},flex:1,dragGroup:a.ddGroup,dropGroup:a.ddGroup,title:b,store:{model:a.store.model,data:[]},displayField:a.displayField,valueField:a.valueField,disabled:a.disabled,listeners:{boundList:{scope:a,itemdblclick:a.onItemDblClick,drop:a.syncValue}}});
},setupItems:function(){var a=this;
a.fromField=a.createList(a.fromTitle);
a.toField=a.createList(a.toTitle);
return[a.fromField,{xtype:"container",margins:"0 4",layout:{type:"vbox",pack:"center"},items:a.createButtons()},a.toField];
},createButtons:function(){var b=this,a=[];
if(!b.hideNavIcons){Ext.Array.forEach(b.buttons,function(c){a.push({xtype:"button",tooltip:b.buttonsText[c],handler:b["on"+Ext.String.capitalize(c)+"BtnClick"],cls:Ext.baseCSSPrefix+"form-itemselector-btn",iconCls:Ext.baseCSSPrefix+"form-itemselector-"+c,navBtn:true,scope:b,margin:"4 0 0 0"});
});
}return a;
},getSelections:function(b){var a=b.getStore();
return Ext.Array.sort(b.getSelectionModel().getSelection(),function(d,c){d=a.indexOf(d);
c=a.indexOf(c);
if(d<c){return -1;
}else{if(d>c){return 1;
}}return 0;
});
},onTopBtnClick:function(){var c=this.toField.boundList,a=c.getStore(),b=this.getSelections(c);
a.suspendEvents();
a.remove(b,true);
a.insert(0,b);
a.resumeEvents();
c.refresh();
this.syncValue();
c.getSelectionModel().select(b);
},onBottomBtnClick:function(){var c=this.toField.boundList,a=c.getStore(),b=this.getSelections(c);
a.suspendEvents();
a.remove(b,true);
a.add(b);
a.resumeEvents();
c.refresh();
this.syncValue();
c.getSelectionModel().select(b);
},onUpBtnClick:function(){var f=this.toField.boundList,b=f.getStore(),e=this.getSelections(f),g,d=0,a=e.length,c=0;
b.suspendEvents();
for(;
d<a;
++d,c++){g=e[d];
c=Math.max(c,b.indexOf(g)-1);
b.remove(g,true);
b.insert(c,g);
}b.resumeEvents();
f.refresh();
this.syncValue();
f.getSelectionModel().select(e);
},onDownBtnClick:function(){var e=this.toField.boundList,a=e.getStore(),d=this.getSelections(e),f,c=d.length-1,b=a.getCount()-1;
a.suspendEvents();
for(;
c>-1;
--c,b--){f=d[c];
b=Math.min(b,a.indexOf(f)+1);
a.remove(f,true);
a.insert(b,f);
}a.resumeEvents();
e.refresh();
this.syncValue();
e.getSelectionModel().select(d);
},onAddBtnClick:function(){var b=this,a=b.getSelections(b.fromField.boundList);
b.moveRec(true,a);
b.toField.boundList.getSelectionModel().select(a);
},onRemoveBtnClick:function(){var b=this,a=b.getSelections(b.toField.boundList);
b.moveRec(false,a);
b.fromField.boundList.getSelectionModel().select(a);
},moveRec:function(f,e){var c=this,g=c.fromField,a=c.toField,b=f?g.store:a.store,d=f?a.store:g.store;
b.suspendEvents();
d.suspendEvents();
b.remove(e);
d.add(e);
b.resumeEvents();
d.resumeEvents();
g.boundList.refresh();
a.boundList.refresh();
c.syncValue();
},syncValue:function(){var a=this;
a.mixins.field.setValue.call(a,a.setupValue(a.toField.store.getRange()));
},onItemDblClick:function(a,b){this.moveRec(a===this.fromField.boundList,b);
},setValue:function(f){var d=this,g=d.fromField,a=d.toField,b=g.store,e=a.store,c;
if(!d.fromStorePopulated){d.fromField.store.on({load:Ext.Function.bind(d.setValue,d,[f]),single:true});
return;
}f=d.setupValue(f);
d.mixins.field.setValue.call(d,f);
c=d.getRecordsForValue(f);
b.suspendEvents();
e.suspendEvents();
b.removeAll();
e.removeAll();
d.populateFromStore(d.store);
Ext.Array.forEach(c,function(h){if(b.indexOf(h)>-1){b.remove(h);
}e.add(h);
});
b.resumeEvents();
e.resumeEvents();
Ext.suspendLayouts();
g.boundList.refresh();
a.boundList.refresh();
Ext.resumeLayouts(true);
},onBindStore:function(a,b){var c=this;
if(c.fromField){c.fromField.store.removeAll();
c.toField.store.removeAll();
if(a.getCount()){c.populateFromStore(a);
}else{c.store.on("load",c.populateFromStore,c);
}}},populateFromStore:function(a){var b=this.fromField.store;
this.fromStorePopulated=true;
b.add(a.getRange());
b.fireEvent("load",b);
},onEnable:function(){var a=this;
a.callParent();
a.fromField.enable();
a.toField.enable();
Ext.Array.forEach(a.query("[navBtn]"),function(b){b.enable();
});
},onDisable:function(){var a=this;
a.callParent();
a.fromField.disable();
a.toField.disable();
Ext.Array.forEach(a.query("[navBtn]"),function(b){b.disable();
});
},onDestroy:function(){this.bindStore(null);
this.callParent();
}});
Ext.define("Ext.ux.form.TagInput",{requires:["Ext.data.ArrayStore"],extend:"Ext.form.field.Text",alias:"widget.taginput",valueField:"value",tagDelimiter:",",allowSpaces:false,xtype:"taginput",fieldCls:"x-form-taginput",typeCls:"x-form-taginput",editableCls:"x-form-taginput",width:"100%",height:"auto",fieldSubTpl:['<div class="x-form-taginput-div"><ul class="x-taginput-tag-widget {fieldCls}"> ','   <li class="x-taginput-tag-item-input">','       <input type="text" id="{id}" value="" />',"   </li>","</ul></div>",{disableFormats:true}],tagNodeTpl:['<li style="" class="x-taginput-tag-item x-taginput-tag-choice">','    <span class="x-taginput-tag-label">{tagvalue}</span>','    <a class="x-taginput-tag-close x-tab-default tag-close">','         <span class="x-tab-close-btn"></span>',"    </a>","</li>"],initComponent:function(){var a=this;
this.store=this.store||Ext.create("Ext.data.ArrayStore",{autoDestroy:true,data:[],idIndex:0,fields:[{name:"id",type:"float"},{name:"value",type:"string"}]});
this.store.on("datachanged",function(){a._syncWithStore();
});
a.keyCodeList=keyCodeList=[13,9,27];
if(a.allowSpaces==false){keyCodeList.push(32);
}this.callParent();
},getSubTplData:function(){var a=this,b=a.callParent();
return Ext.apply(b,{});
},getTagFieldEl:function(){return Ext.select("#"+this.getId()+" ul.x-taginput-tag-widget").item(0);
},getRawValue:function(){var a=[],b=this;
b.store.getRange();
Ext.each(b.store.getRange(),function(e,c,d){a.push(e.get(b.valueField));
});
return a.join(this.tagDelimiter);
},setRawValue:function(c){var a=this,b=c.split(this.tagDelimiter);
Ext.each(b,function(d){a._createTagValueItem(d);
});
},listeners:{afterrender:function(){this._populateList();
this._registerHandler();
this._registerTagFieldHandler();
}},_populateList:function(){var a=this;
Ext.each(a.store.getRange(),function(d,b,c){var e=d.get("value");
a._createTagValueItem(e);
});
},_registerHandler:function(){var a=this;
this.inputEl.on({keydown:function(i,j,l){if(i.getKey()==8){var d=Ext.select("#"+a.getId()+" .x-taginput-tag-item:last");
if(d.elements.length>0){var f=a.inputEl.getValue();
if(""===f){var g=Ext.select("#"+a.getId()+" .x-taginput-tag-item:last .x-taginput-tag-label");
var h=g.item(0).dom.innerHTML;
var b=Ext.String.htmlDecode(h);
a._removeTagValue(b);
d.remove();
}}}else{var k=i.getKey(),c=a.inputEl;
Ext.each(a.keyCodeList,function(e){if(e==k){i.preventDefault();
i.stopPropagation();
a._createTagValueItem(c.getValue());
c.dom.value="";
return false;
}});
}},keyup:function(h,g,b){var f=h.getKey(),c=a.inputEl,d=c.getValue();
if((d.charAt(d.length-1))==a.tagDelimiter){h.preventDefault();
h.stopPropagation();
var i=d.substr(0,(d.length-1));
a._createTagValueItem(i);
c.dom.value="";
}}});
},_registerTagFieldHandler:function(){var a=this;
a.getTagFieldEl().on({click:function(d,c,b){a.inputEl.focus();
}});
a.getTagFieldEl().on("click",function(g,f,b){var c=null,d={callback:function(k,j,m){var h=Ext.get(k.target.id),l=h.down("span.x-taginput-tag-label").dom.innerHTML,i=Ext.String.htmlDecode(l);
a._removeTagValue(i);
h.remove();
a.inputEl.click();
}};
c=Ext.get(f).up("li.x-taginput-tag-item").fadeOut(d);
},null,{delegate:"a.x-taginput-tag-close"});
},_createTagValueItem:function(b){var b=Ext.util.Format.trim(b);
if(b!=""){if(this._findSelectedElement(b).elements.length==0){var f=this.getId(),e=Ext.select("#"+f+" .x-taginput-tag-item-input").first(),c=this.tagNodeTpl,a=Ext.core.DomHelper.createTemplate(c),d=Ext.String.htmlEncode(b);
a.insertBefore(e,{tagvalue:d});
this._addTagValue(b);
this._addTagValue(b);
}else{this._highlightByTagValue(b);
}}},_syncWithStore:function(){var a=this;
Ext.select("#"+a.getId()+" .x-taginput-tag-item").remove();
a._populateList();
},_addTagValue:function(b){var b=Ext.util.Format.trim(b);
if(!this._tagExists(b)){var a=this.store.model.create();
a.set(this.valueField,b);
this.store.add(a);
}},_removeTagValue:function(b){var c=this;
if(this._tagExists(b)){var a=this.store.find(this.valueField,b);
this.store.removeAt(a);
}},_tagExists:function(b){var a=this.store.find(this.valueField,b);
if(a>-1){return true;
}else{return false;
}},_highlightByTagValue:function(a){var a=Ext.util.Format.trim(a),b=this._findSelectedElement(a);
b.each(function(c){Ext.get(c).up("li").highlight();
});
},_findSelectedElement:function(a){var a=Ext.util.Format.trim(a),b=this.getId();
return Ext.select("#"+b+" li.x-taginput-tag-item span.x-taginput-tag-label:nodeValue("+a+")");
}});
Ext.define("Ext.ux.window.Notification",{extend:"Ext.window.Window",alias:"widget.uxNotification",cls:"ux-notification-window",autoClose:true,autoHeight:true,plain:false,draggable:false,shadow:false,focus:Ext.emptyFn,manager:null,useXAxis:false,position:"br",spacing:6,paddingX:30,paddingY:10,slideInAnimation:"easeIn",slideBackAnimation:"bounceOut",slideInDuration:1500,slideBackDuration:1000,hideDuration:500,autoCloseDelay:7000,stickOnClick:true,stickWhileHover:true,isHiding:false,readyToHide:false,destroyAfterHide:false,closeOnMouseOut:false,xPos:0,yPos:0,statics:{defaultManager:{el:null}},initComponent:function(){var a=this;
if(Ext.isDefined(a.corner)){a.position=a.corner;
}if(Ext.isDefined(a.slideDownAnimation)){a.slideBackAnimation=a.slideDownAnimation;
}if(Ext.isDefined(a.autoDestroyDelay)){a.autoCloseDelay=a.autoDestroyDelay;
}if(Ext.isDefined(a.autoHideDelay)){a.autoCloseDelay=a.autoHideDelay;
}if(Ext.isDefined(a.autoHide)){a.autoClose=a.autoHide;
}if(Ext.isDefined(a.slideInDelay)){a.slideInDuration=a.slideInDelay;
}if(Ext.isDefined(a.slideDownDelay)){a.slideBackDuration=a.slideDownDelay;
}if(Ext.isDefined(a.fadeDelay)){a.hideDuration=a.fadeDelay;
}a.position=a.position.replace(/c/,"");
a.updateAlignment(a.position);
a.setManager(a.manager);
a.callParent(arguments);
},onRender:function(){var a=this;
a.el.hover(function(){a.mouseIsOver=true;
},function(){a.mouseIsOver=false;
if(a.closeOnMouseOut){a.closeOnMouseOut=false;
a.close();
}},a);
this.callParent(arguments);
},updateAlignment:function(a){var b=this;
switch(a){case"br":b.paddingFactorX=-1;
b.paddingFactorY=-1;
b.siblingAlignment="br-br";
if(b.useXAxis){b.managerAlignment="bl-br";
}else{b.managerAlignment="tr-br";
}break;
case"bl":b.paddingFactorX=1;
b.paddingFactorY=-1;
b.siblingAlignment="bl-bl";
if(b.useXAxis){b.managerAlignment="br-bl";
}else{b.managerAlignment="tl-bl";
}break;
case"tr":b.paddingFactorX=-1;
b.paddingFactorY=1;
b.siblingAlignment="tr-tr";
if(b.useXAxis){b.managerAlignment="tl-tr";
}else{b.managerAlignment="br-tr";
}break;
case"tl":b.paddingFactorX=1;
b.paddingFactorY=1;
b.siblingAlignment="tl-tl";
if(b.useXAxis){b.managerAlignment="tr-tl";
}else{b.managerAlignment="bl-tl";
}break;
case"b":b.paddingFactorX=0;
b.paddingFactorY=-1;
b.siblingAlignment="b-b";
b.useXAxis=0;
b.managerAlignment="t-b";
break;
case"t":b.paddingFactorX=0;
b.paddingFactorY=1;
b.siblingAlignment="t-t";
b.useXAxis=0;
b.managerAlignment="b-t";
break;
case"l":b.paddingFactorX=1;
b.paddingFactorY=0;
b.siblingAlignment="l-l";
b.useXAxis=1;
b.managerAlignment="r-l";
break;
case"r":b.paddingFactorX=-1;
b.paddingFactorY=0;
b.siblingAlignment="r-r";
b.useXAxis=1;
b.managerAlignment="l-r";
break;
}},getXposAlignedToManager:function(){var a=this;
var b=0;
if(a.manager&&a.manager.el&&a.manager.el.dom){if(!a.useXAxis){return a.el.getLeft();
}else{if(a.position=="br"||a.position=="tr"||a.position=="r"){b+=a.manager.el.getAnchorXY("r")[0];
b-=(a.el.getWidth()+a.paddingX);
}else{b+=a.manager.el.getAnchorXY("l")[0];
b+=a.paddingX;
}}}return b;
},getYposAlignedToManager:function(){var b=this;
var a=0;
if(b.manager&&b.manager.el&&b.manager.el.dom){if(b.useXAxis){return b.el.getTop();
}else{if(b.position=="br"||b.position=="bl"||b.position=="b"){a+=b.manager.el.getAnchorXY("b")[1];
a-=(b.el.getHeight()+b.paddingY);
}else{a+=b.manager.el.getAnchorXY("t")[1];
a+=b.paddingY;
}}}return a;
},getXposAlignedToSibling:function(a){var b=this;
if(b.useXAxis){if(b.position=="tl"||b.position=="bl"||b.position=="l"){return(a.xPos+a.el.getWidth()+a.spacing);
}else{return(a.xPos-b.el.getWidth()-b.spacing);
}}else{return b.el.getLeft();
}},getYposAlignedToSibling:function(a){var b=this;
if(b.useXAxis){return b.el.getTop();
}else{if(b.position=="tr"||b.position=="tl"||b.position=="t"){return(a.yPos+a.el.getHeight()+a.spacing);
}else{return(a.yPos-b.el.getHeight()-a.spacing);
}}},getNotifications:function(b){var a=this;
if(!a.manager.notifications[b]){a.manager.notifications[b]=[];
}return a.manager.notifications[b];
},setManager:function(a){var b=this;
b.manager=a;
if(typeof b.manager=="string"){b.manager=Ext.getCmp(b.manager);
}if(!b.manager){b.manager=b.statics().defaultManager;
if(!b.manager.el){b.manager.el=Ext.getBody();
}}if(typeof b.manager.notifications=="undefined"){b.manager.notifications={};
}},beforeShow:function(){var a=this;
if(a.stickOnClick){if(a.body&&a.body.dom){Ext.fly(a.body.dom).on("click",function(){a.cancelAutoClose();
a.addCls("notification-fixed");
},a);
}}if(a.autoClose){a.task=new Ext.util.DelayedTask(a.doAutoClose,a);
a.task.delay(a.autoCloseDelay);
}a.el.setX(-10000);
a.el.setOpacity(1);
},afterShow:function(){var b=this;
var a=b.getNotifications(b.managerAlignment);
if(a.length){b.el.alignTo(a[a.length-1].el,b.siblingAlignment,[0,0]);
b.xPos=b.getXposAlignedToSibling(a[a.length-1]);
b.yPos=b.getYposAlignedToSibling(a[a.length-1]);
}else{b.el.alignTo(b.manager.el,b.managerAlignment,[(b.paddingX*b.paddingFactorX),(b.paddingY*b.paddingFactorY)],false);
b.xPos=b.getXposAlignedToManager();
b.yPos=b.getYposAlignedToManager();
}Ext.Array.include(a,b);
b.el.animate({to:{x:b.xPos,y:b.yPos,opacity:1},easing:b.slideInAnimation,duration:b.slideInDuration,dynamic:true});
this.callParent(arguments);
},slideBack:function(){var c=this;
var b=c.getNotifications(c.managerAlignment);
var a=Ext.Array.indexOf(b,c);
if(!c.isHiding&&c.el&&c.manager&&c.manager.el&&c.manager.el.dom&&c.manager.el.isVisible()){if(a){c.xPos=c.getXposAlignedToSibling(b[a-1]);
c.yPos=c.getYposAlignedToSibling(b[a-1]);
}else{c.xPos=c.getXposAlignedToManager();
c.yPos=c.getYposAlignedToManager();
}c.stopAnimation();
c.el.animate({to:{x:c.xPos,y:c.yPos},easing:c.slideBackAnimation,duration:c.slideBackDuration,dynamic:true});
}},cancelAutoClose:function(){var a=this;
if(a.autoClose){a.task.cancel();
}},doAutoClose:function(){var a=this;
if(!(a.stickWhileHover&&a.mouseIsOver)){a.close();
}else{a.closeOnMouseOut=true;
}},removeFromManager:function(){var c=this;
if(c.manager){var b=c.getNotifications(c.managerAlignment);
var a=Ext.Array.indexOf(b,c);
if(a!=-1){Ext.Array.erase(b,a,1);
for(;
a<b.length;
a++){b[a].slideBack();
}}}},hide:function(){var a=this;
if(!a.isHiding&&a.el){a.isHiding=true;
a.cancelAutoClose();
a.stopAnimation();
a.el.animate({to:{opacity:0},easing:"easeIn",duration:a.hideDuration,dynamic:false,listeners:{afteranimate:function(){a.removeFromManager();
a.readyToHide=true;
a.hide(a.animateTarget,a.doClose,a);
}}});
}if(a.readyToHide){a.isHiding=false;
a.readyToHide=false;
a.removeCls("notification-fixed");
a.callParent(arguments);
if(a.destroyAfterHide){a.destroy();
}}},destroy:function(){var a=this;
if(!a.hidden){a.destroyAfterHide=true;
a.hide(a.animateTarget,a.doClose,a);
}else{a.callParent(arguments);
}}});
Ext.define("Ext.ux.desktop.Module",{mixins:{observable:"Ext.util.Observable"},constructor:function(a){this.mixins.observable.constructor.call(this,a);
this.init();
},init:Ext.emptyFn});
Ext.define("Ext.ux.desktop.ShortcutModel",{extend:"Ext.data.Model",fields:[{name:"name"},{name:"iconCls"},{name:"module"}]});
Ext.define("Ext.ux.desktop.StartMenu",{extend:"Ext.panel.Panel",requires:["Ext.menu.Menu","Ext.toolbar.Toolbar"],ariaRole:"menu",cls:"x-menu ux-start-menu",defaultAlign:"bl-tl",iconCls:"user",floating:true,shadow:true,width:300,initComponent:function(){var a=this,b=a.menu;
a.menu=new Ext.menu.Menu({cls:"ux-start-menu-body",border:false,floating:false,items:b});
a.menu.layout.align="stretch";
a.items=[a.menu];
a.layout="fit";
Ext.menu.Manager.register(a);
a.callParent();
a.toolbar=new Ext.toolbar.Toolbar(Ext.apply({dock:"right",cls:"ux-start-menu-toolbar",vertical:true,width:100,listeners:{add:function(d,e){e.on({click:function(){a.hide();
}});
}}},a.toolConfig));
a.toolbar.layout.align="stretch";
a.addDocked(a.toolbar);
delete a.toolItems;
},addMenuItem:function(){var a=this.menu;
a.add.apply(a,arguments);
},addToolItem:function(){var a=this.toolbar;
a.add.apply(a,arguments);
}});
Ext.define("Ext.ux.desktop.TaskBar",{extend:"Ext.toolbar.Toolbar",requires:["Ext.button.Button","Ext.resizer.Splitter","Ext.menu.Menu","Ext.ux.desktop.StartMenu"],alias:"widget.taskbar",cls:"ux-taskbar",startBtnText:"Start",initComponent:function(){var a=this;
a.startMenu=new Ext.ux.desktop.StartMenu(a.startConfig);
a.quickStart=new Ext.toolbar.Toolbar(a.getQuickStart());
a.windowBar=new Ext.toolbar.Toolbar(a.getWindowBarConfig());
a.tray=new Ext.toolbar.Toolbar(a.getTrayConfig());
a.items=[{xtype:"button",cls:"ux-start-button",iconCls:"ux-start-button-icon",menu:a.startMenu,menuAlign:"bl-tl",text:a.startBtnText},a.quickStart,{xtype:"splitter",html:"&#160;",height:14,width:2,cls:"x-toolbar-separator x-toolbar-separator-horizontal"},a.windowBar,"-",a.tray];
a.callParent();
},afterLayout:function(){var a=this;
a.callParent();
a.windowBar.el.on("contextmenu",a.onButtonContextMenu,a);
},getQuickStart:function(){var b=this,a={minWidth:20,width:Ext.themeName==="neptune"?70:60,items:[],enableOverflow:true};
Ext.each(this.quickStart,function(c){a.items.push({tooltip:{text:c.name,align:"bl-tl"},overflowText:c.name,iconCls:c.iconCls,module:c.module,handler:b.onQuickStartClick,scope:b});
});
return a;
},getTrayConfig:function(){var a={items:this.trayItems};
delete this.trayItems;
return a;
},getWindowBarConfig:function(){return{flex:1,cls:"ux-desktop-windowbar",items:["&#160;"],layout:{overflowHandler:"Scroller"}};
},getWindowBtnFromEl:function(a){var b=this.windowBar.getChildByElement(a);
return b||null;
},onQuickStartClick:function(b){var a=this.app.getModule(b.module),c;
if(a){c=a.createWindow();
c.show();
}},onButtonContextMenu:function(d){var c=this,b=d.getTarget(),a=c.getWindowBtnFromEl(b);
if(a){d.stopEvent();
c.windowMenu.theWin=a.win;
c.windowMenu.showBy(b);
}},onWindowBtnClick:function(a){var b=a.win;
if(b.minimized||b.hidden){a.disable();
b.show(null,function(){a.enable();
});
}else{if(b.active){a.disable();
b.on("hide",function(){a.enable();
},null,{single:true});
b.minimize();
}else{b.toFront();
}}},addTaskButton:function(c){var a={iconCls:c.iconCls,enableToggle:true,toggleGroup:"all",width:140,margins:"0 2 0 3",text:Ext.util.Format.ellipsis(c.title,20),listeners:{click:this.onWindowBtnClick,scope:this},win:c};
var b=this.windowBar.add(a);
b.toggle(true);
return b;
},removeTaskButton:function(a){var c,b=this;
b.windowBar.items.each(function(d){if(d===a){c=d;
}return !c;
});
if(c){b.windowBar.remove(c);
}return c;
},setActiveButton:function(a){if(a){a.toggle(true);
}else{this.windowBar.items.each(function(b){if(b.isButton){b.toggle(false);
}});
}}});
Ext.define("Ext.ux.desktop.TrayClock",{extend:"Ext.toolbar.TextItem",alias:"widget.trayclock",cls:"ux-desktop-trayclock",html:"&#160;",timeFormat:"g:i A",tpl:"{time}",initComponent:function(){var a=this;
a.callParent();
if(typeof(a.tpl)=="string"){a.tpl=new Ext.XTemplate(a.tpl);
}},afterRender:function(){var a=this;
Ext.Function.defer(a.updateTime,100,a);
a.callParent();
},onDestroy:function(){var a=this;
if(a.timer){window.clearTimeout(a.timer);
a.timer=null;
}a.callParent();
},updateTime:function(){var a=this,b=Ext.Date.format(new Date(),a.timeFormat),c=a.tpl.apply({time:b});
if(a.lastText!=c){a.setText(c);
a.lastText=c;
}a.timer=Ext.Function.defer(a.updateTime,10000,a);
}});
Ext.define("Ext.ux.desktop.Video",{extend:"Ext.panel.Panel",alias:"widget.video",layout:"fit",autoplay:false,controls:true,bodyStyle:"background-color:#000;color:#fff",html:"",tpl:['<video id="{id}-video" autoPlay="{autoplay}" controls="{controls}" poster="{poster}" start="{start}" loopstart="{loopstart}" loopend="{loopend}" autobuffer="{autobuffer}" loop="{loop}" style="width:100%;height:100%">','<tpl for="src">','<source src="{src}" type="{type}"/>',"</tpl>","{html}","</video>"],initComponent:function(){var e=this,f,c,b,d;
if(e.fallbackHTML){f=e.fallbackHTML;
}else{f="Your browser does not support HTML5 Video. ";
if(Ext.isChrome){f+="Upgrade Chrome.";
}else{if(Ext.isGecko){f+="Upgrade to Firefox 3.5 or newer.";
}else{var a='<a href="http://www.google.com/chrome">Chrome</a>';
f+='Please try <a href="http://www.mozilla.com">Firefox</a>';
if(Ext.isIE){f+=", "+a+' or <a href="http://www.apple.com/safari/">Safari</a>.';
}else{f+=" or "+a+".";
}}}}e.fallbackHTML=f;
b=e.data=Ext.copyTo({tag:"video",html:f},e,"id,poster,start,loopstart,loopend,playcount,autobuffer,loop");
if(e.autoplay){b.autoplay=1;
}if(e.controls){b.controls=1;
}if(Ext.isArray(e.src)){b.src=e.src;
}else{b.src=[{src:e.src}];
}e.callParent();
},afterRender:function(){var a=this;
a.callParent();
a.video=a.body.getById(a.id+"-video");
el=a.video.dom;
a.supported=(el&&el.tagName.toLowerCase()=="video");
if(a.supported){a.video.on("error",a.onVideoError,a);
}},getFallback:function(){return'<h1 style="background-color:#ff4f4f;padding: 10px;">'+this.fallbackHTML+"</h1>";
},onVideoError:function(){var a=this;
a.video.remove();
a.supported=false;
a.body.createChild(a.getFallback());
},onDestroy:function(){var c=this;
var b=c.video;
if(c.supported&&b){var a=b.dom;
if(a&&a.pause){a.pause();
}b.remove();
c.video=null;
}c.callParent();
}});
Ext.define("Ext.ux.desktop.Wallpaper",{extend:"Ext.Component",alias:"widget.wallpaper",cls:"ux-wallpaper",html:'<img src="'+Ext.BLANK_IMAGE_URL+'">',stretch:false,wallpaper:null,stateful:true,stateId:"desk-wallpaper",afterRender:function(){var a=this;
a.callParent();
a.setWallpaper(a.wallpaper,a.stretch);
},applyState:function(){var b=this,a=b.wallpaper;
b.callParent(arguments);
if(a!=b.wallpaper){b.setWallpaper(b.wallpaper);
}},getState:function(){return this.wallpaper&&{wallpaper:this.wallpaper};
},setWallpaper:function(b,a){var c=this,e,d;
c.stretch=(a!==false);
c.wallpaper=b;
Ext.util.Cookies.set("FlexCenter_wallpaper",b);
if(c.rendered){e=c.el.dom.firstChild;
if(!b||b==Ext.BLANK_IMAGE_URL){Ext.fly(e).hide();
}else{if(c.stretch){e.src=b;
c.el.removeCls("ux-wallpaper-tiled");
Ext.fly(e).setStyle({width:"100%",height:"100%"}).show();
}else{Ext.fly(e).hide();
d="url("+b+")";
c.el.addCls("ux-wallpaper-tiled");
}}c.el.setStyle({backgroundImage:d||""});
if(c.stateful){c.saveState();
}}return c;
}});
Ext.define("Ext.ux.desktop.Desktop",{extend:"Ext.panel.Panel",alias:"widget.desktop",uses:["Ext.util.MixedCollection","Ext.menu.Menu","Ext.view.View","Ext.window.Window","Ext.ux.desktop.TaskBar","Ext.ux.desktop.Wallpaper"],activeWindowCls:"ux-desktop-active-win",inactiveWindowCls:"ux-desktop-inactive-win",lastActiveWindow:null,border:false,html:"&#160;",layout:"fit",xTickSize:1,yTickSize:1,app:null,shortcuts:null,shortcutItemSelector:"div.ux-desktop-shortcut",shortcutTpl:['<tpl for=".">','<div class="ux-desktop-shortcut" id="{name}-shortcut">','<div class="ux-desktop-shortcut-icon {iconCls}">','<img src="',Ext.BLANK_IMAGE_URL,'" title="{name}">',"</div>",'<span class="ux-desktop-shortcut-text">{name}</span>',"</div>","</tpl>",'<div class="x-clear"></div>'],taskbarConfig:null,windowMenu:null,initComponent:function(){var b=this;
b.windowMenu=new Ext.menu.Menu(b.createWindowMenu());
b.bbar=b.taskbar=new Ext.ux.desktop.TaskBar(b.taskbarConfig);
b.taskbar.windowMenu=b.windowMenu;
b.windows=new Ext.util.MixedCollection();
b.contextMenu=new Ext.menu.Menu(b.createDesktopMenu());
b.items=[{xtype:"wallpaper",id:b.id+"_wallpaper"},b.createDataView()];
b.callParent();
b.shortcutsView=b.items.getAt(1);
b.shortcutsView.on("itemclick",b.onShortcutItemClick,b);
var a=b.wallpaper;
b.wallpaper=b.items.getAt(0);
if(a){b.setWallpaper(a,b.wallpaperStretch);
}},afterRender:function(){var a=this;
a.callParent();
a.el.on("contextmenu",a.onDesktopMenu,a);
},createDataView:function(){var a=this;
return{xtype:"dataview",overItemCls:"x-view-over",trackOver:true,itemSelector:a.shortcutItemSelector,store:a.shortcuts,style:{position:"absolute"},x:0,y:0,tpl:new Ext.XTemplate(a.shortcutTpl)};
},createDesktopMenu:function(){var b=this,a={items:b.contextMenuItems||[]};
if(a.items.length){a.items.push("-");
}a.items.push({text:"Tile",handler:b.tileWindows,scope:b,minWindows:1},{text:"Cascade",handler:b.cascadeWindows,scope:b,minWindows:1});
return a;
},createWindowMenu:function(){var a=this;
return{defaultAlign:"br-tr",items:[{text:"Restore",handler:a.onWindowMenuRestore,scope:a},{text:"Minimize",handler:a.onWindowMenuMinimize,scope:a},{text:"Maximize",handler:a.onWindowMenuMaximize,scope:a},"-",{text:"Close",handler:a.onWindowMenuClose,scope:a}],listeners:{beforeshow:a.onWindowMenuBeforeShow,hide:a.onWindowMenuHide,scope:a}};
},onDesktopMenu:function(b){var a=this,c=a.contextMenu;
b.stopEvent();
if(!c.rendered){c.on("beforeshow",a.onDesktopMenuBeforeShow,a);
}c.showAt(b.getXY());
c.doConstrain();
},onDesktopMenuBeforeShow:function(c){var b=this,a=b.windows.getCount();
c.items.each(function(e){var d=e.minWindows||0;
e.setDisabled(a<d);
});
},onShortcutItemClick:function(e,a){var c=this,b=c.app.getModule(a.data.module),d=b&&b.createWindow();
if(d){c.restoreWindow(d);
}},onWindowClose:function(b){var a=this;
a.windows.remove(b);
a.taskbar.removeTaskButton(b.taskButton);
a.updateActiveWindow();
},onWindowMenuBeforeShow:function(c){var a=c.items.items,b=c.theWin;
a[0].setDisabled(b.maximized!==true&&b.hidden!==true);
a[1].setDisabled(b.minimized===true);
a[2].setDisabled(b.maximized===true||b.hidden===true);
},onWindowMenuClose:function(){var a=this,b=a.windowMenu.theWin;
b.close();
},onWindowMenuHide:function(a){Ext.defer(function(){a.theWin=null;
},1);
},onWindowMenuMaximize:function(){var a=this,b=a.windowMenu.theWin;
b.maximize();
b.toFront();
},onWindowMenuMinimize:function(){var a=this,b=a.windowMenu.theWin;
b.minimize();
},onWindowMenuRestore:function(){var a=this,b=a.windowMenu.theWin;
a.restoreWindow(b);
},getWallpaper:function(){return this.wallpaper.wallpaper;
},setTickSize:function(b,c){var e=this,a=e.xTickSize=b,d=e.yTickSize=(arguments.length>1)?c:a;
e.windows.each(function(g){var f=g.dd,h=g.resizer;
f.xTickSize=a;
f.yTickSize=d;
h.widthIncrement=a;
h.heightIncrement=d;
});
},setWallpaper:function(b,a){this.wallpaper.setWallpaper(b,a);
return this;
},cascadeWindows:function(){var a=0,c=0,b=this.getDesktopZIndexManager();
b.eachBottomUp(function(d){if(d.isWindow&&d.isVisible()&&!d.maximized){d.setPosition(a,c);
a+=20;
c+=20;
}});
},createWindow:function(c,b){var d=this,e,a=Ext.applyIf(c||{},{stateful:false,isWindow:true,constrainHeader:true,minimizable:true,maximizable:true});
b=b||Ext.window.Window;
e=d.add(new b(a));
d.windows.add(e);
e.taskButton=d.taskbar.addTaskButton(e);
e.animateTarget=e.taskButton.el;
e.on({activate:d.updateActiveWindow,beforeshow:d.updateActiveWindow,deactivate:d.updateActiveWindow,minimize:d.minimizeWindow,destroy:d.onWindowClose,scope:d});
e.on({boxready:function(){e.dd.xTickSize=d.xTickSize;
e.dd.yTickSize=d.yTickSize;
if(e.resizer){e.resizer.widthIncrement=d.xTickSize;
e.resizer.heightIncrement=d.yTickSize;
}},single:true});
e.doClose=function(){e.doClose=Ext.emptyFn;
e.el.disableShadow();
e.el.fadeOut({listeners:{afteranimate:function(){e.destroy();
}}});
};
return e;
},getActiveWindow:function(){var b=null,a=this.getDesktopZIndexManager();
if(a){a.eachTopDown(function(c){if(c.isWindow&&!c.hidden){b=c;
return false;
}return true;
});
}return b;
},getDesktopZIndexManager:function(){var a=this.windows;
return(a.getCount()&&a.getAt(0).zIndexManager)||null;
},getWindow:function(a){return this.windows.get(a);
},minimizeWindow:function(a){a.minimized=true;
a.hide();
},restoreWindow:function(a){if(a.isVisible()){a.restore();
a.toFront();
}else{a.show();
}return a;
},tileWindows:function(){var b=this,e=b.body.getWidth(true);
var a=b.xTickSize,d=b.yTickSize,c=d;
b.windows.each(function(g){if(g.isVisible()&&!g.maximized){var f=g.el.getWidth();
if(a>b.xTickSize&&a+f>e){a=b.xTickSize;
d=c;
}g.setPosition(a,d);
a+=f+b.xTickSize;
c=Math.max(c,d+g.el.getHeight()+b.yTickSize);
}});
},updateActiveWindow:function(){var b=this,c=b.getActiveWindow(),a=b.lastActiveWindow;
if(c===a){return;
}if(a){if(a.el.dom){a.addCls(b.inactiveWindowCls);
a.removeCls(b.activeWindowCls);
}a.active=false;
}b.lastActiveWindow=c;
if(c){c.addCls(b.activeWindowCls);
c.removeCls(b.inactiveWindowCls);
c.minimized=false;
c.active=true;
}b.taskbar.setActiveButton(c&&c.taskButton);
}});
Ext.define("Ext.ux.desktop.App",{mixins:{observable:"Ext.util.Observable"},requires:["Ext.container.Viewport","Ext.ux.desktop.Desktop"],isReady:false,modules:null,useQuickTips:true,constructor:function(a){var b=this;
b.addEvents("ready","beforeunload");
b.mixins.observable.constructor.call(this,a);
if(Ext.isReady){Ext.Function.defer(b.init,10,b);
}else{Ext.onReady(b.init,b);
}},init:function(){var b=this,a;
if(b.useQuickTips){Ext.QuickTips.init();
}b.modules=b.getModules();
if(b.modules){b.initModules(b.modules);
}a=b.getDesktopConfig();
b.desktop=new Ext.ux.desktop.Desktop(a);
b.viewport=new Ext.container.Viewport({layout:"fit",items:[b.desktop]});
Ext.EventManager.on(window,"beforeunload",b.onUnload,b);
b.isReady=true;
b.fireEvent("ready",b);
},getDesktopConfig:function(){var b=this,a={app:b,taskbarConfig:b.getTaskbarConfig()};
Ext.apply(a,b.desktopConfig);
return a;
},getModules:Ext.emptyFn,getStartConfig:function(){var b=this,a={app:b,menu:[]},c;
Ext.apply(a,b.startConfig);
Ext.each(b.modules,function(d){c=d.launcher;
if(c){c.handler=c.handler||Ext.bind(b.createWindow,b,[d]);
a.menu.push(d.launcher);
}});
return a;
},createWindow:function(a){var b=a.createWindow();
b.show();
},getTaskbarConfig:function(){var b=this,a={app:b,startConfig:b.getStartConfig()};
Ext.apply(a,b.taskbarConfig);
return a;
},initModules:function(a){var b=this;
Ext.each(a,function(c){c.app=b;
});
},getModule:function(d){var c=this.modules;
for(var e=0,b=c.length;
e<b;
e++){var a=c[e];
if(a.id==d||a.appType==d){return a;
}}return null;
},onReady:function(b,a){if(this.isReady){b.call(a,this);
}else{this.on({ready:b,scope:a,single:true});
}},getDesktop:function(){return this.desktop;
},onUnload:function(a){if(this.fireEvent("beforeunload",this)===false){a.stopEvent();
}}});
Ext.define("Oz.access.RoleAccess",{extend:"Ext.util.Observable",alternateClassName:"Oz.ux.RoleAccess",alias:"plugin.roleaccess",requires:["Ext.Function","Ext.util.Observable"],init:function(g){Ext.applyIf(this,{featureName:"",byPass:false,allowDD:false,allowDbClick:false,disableAll:false,readOnly:true,mode:"disable"});
function c(l){if(l.isXType("field")||l.isXType("textarea")){if(this.readOnly&&(l.isXType("textfield")&&(!l.isXType("combo")))||(l.isXType("textarea"))){var i={readOnly:e||l.disabled,disabled:l.disabled,enable:Ext.Function.createInterceptor(g.enable,function(m){return(!e);
}),setDisabled:Ext.Function.createInterceptor(l.setDisabled,function(m){return(!e);
})};
Ext.apply(l,i);
}else{var i={disabled:e||l.disabled,enable:Ext.Function.createInterceptor(g.enable,function(m){return(!e);
}),setDisabled:Ext.Function.createInterceptor(l.setDisabled,function(m){return(!e);
})};
Ext.apply(l,i);
}}}function b(l){if(l=="#allowAll#"){return true;
}var n=l.split("|");
for(var m=0;
m<n.length;
m++){if(accessRes[n[m]]==true){return true;
}}return false;
}if(!this.byPass){var e=true;
var h=true;
if(accessRes){if(this.featureName){e=(!(b(this.featureName)))||this.disableAll;
h=((this.mode=="hide")&&e);
}}if((g.isXType("button"))||(g.isXType("buttongroup"))||(g.isXType(Ext.button.Button))||(g.isXType(Ext.container.ButtonGroup))){var j={disabled:e||g.disabled,hidden:h||g.hidden,enable:Ext.Function.createInterceptor(g.enable,function(i){return(!e);
}),setDisabled:Ext.Function.createInterceptor(g.setDisabled,function(i){return(!e);
})};
Ext.apply(g,j);
}else{if((g.isXType("menuitem"))||(g.isXType(Ext.menu.Item))){var j={disabled:e||g.disabled,enable:Ext.Function.createInterceptor(g.enable,function(i){return(!e);
}),setDisabled:Ext.Function.createInterceptor(g.setDisabled,function(i){return(!e);
})};
Ext.apply(g,j);
}else{if((g.isXType("grid"))||(g.isXType(Ext.grid.Panel))){if(!this.allowDD){var d=g.plugins,k=d.length;
for(var f;
f<k;
f++){if(d[f].ptype==="gridviewdragdrop"){d[f].enableDrop=(!e)&&d[f].enableDrop;
d[f].enableDrag=(!e)&&d[f].enableDrag;
}}}if(!this.allowDbClick){Ext.util.Observable.capture(g,function(i){if((i=="itemdblclick")||(i=="itemclick")){return(!e);
}return true;
});
var d=g.plugins,k=d.length;
for(var f;
f<k;
f++){if((d[f].ptype==="editing")||(d[f].ptype==="cellediting")||(d[f].ptype==="rowediting")){d[f].beforeEdit=function(){return false;
};
}}}var a=g.columns,k=a.length;
for(var f;
f<k;
f++){if(a[f].isXType("actioncolumn")){a[f].setVisible(e);
}}}else{if(g.ownerCt&&(g.ownerCt.isXType("tabpanel")||g.ownerCt.isXType(Ext.tab.Panel))){var j={disabled:e||g.disabled,hidden:e||g.hidden,enable:Ext.Function.createInterceptor(g.enable,function(i){return(!e);
}),setDisabled:Ext.Function.createInterceptor(g.setDisabled,function(i){return(!e);
})};
Ext.apply(g,j);
}else{if(g.isXType("treepanel")||g.isXType(Ext.tree.Panel)||(g.root&&g.loader)){if(!this.allowDD){var j={draggable:(!e)&&g.draggable,enableDrag:(!e)&&g.enableDrag,enableDrop:(!e)&&g.enableDrop,enableDD:(!e)&&g.enableDD};
Ext.apply(g,j);
}if(!this.allowDbClick){Ext.util.Observable.capture(g,function(i){if(i=="dblclick"){return(!e);
}return true;
});
}}else{if(g.cascade){g.cascade(function(i){c(i);
});
}else{c(g);
}}}}}}}}});
Ext.define("Oz.app.TabMenu",{extend:"Ext.menu.Menu",plain:true,componentCls:"tab-menu",initComponent:function(){this.addEvents("tabItemClick","closeAllTabs");
this.items=[{text:"关闭其他",iconCls:"menu-close",cls:"close-all",tabUrl:this.tabUrl,handler:this.onCloseAllTabs,scope:this}];
this.callParent();
},onCloseAllTabs:function(a){this.fireEvent("closeAllTabs",a);
},addTab:function(b,a){this.insert(this.items.length-1,{text:b.text,iconCls:b.iconCls,origIcon:b.iconCls,href:b.href,cls:a,handler:this.onTabItemClick,scope:this});
},onTabItemClick:function(a){this.fireEvent("tabItemClick",a);
},addTabCls:function(b,a){this.items.each(function(c){if(c.href===b.href){c.addCls(a);
}});
}});
Ext.define("Oz.app.Tabs",{extend:"Ext.container.Container",requires:["Oz.app.TabMenu"],id:"apptabs",alias:"widget.apptabs",componentCls:"doctabs",minTabWidth:80,maxTabWidth:160,animDuration:150,tabs:[],tabsInBar:[],tabCache:{},staticTabs:[],centerPanel:"",initComponent:function(){this.addEvents("tabActivate","tabClose","addTab");
this.tpl=Ext.create("Ext.XTemplate",'<tpl for=".">','<div class="doctab overview {cls} {display}">','<div class="l"></div>','<div class="m">','<tpl if="text">','<a class="tabUrl ov-tab-text" href="{href}">{text}</a>',"<tpl else>",'<a class="tabUrl ov-tab" href="{href}">&nbsp;</a>',"</tpl>","</div>",'<div class="r"></div>',"</div>","</tpl>",'<div style="float: left; width: 8px">&nbsp;</div>','<div class="tab-overflow"></div>');
this.closeTpl=Ext.create("Ext.XTemplate",'<tpl for=".">','<div class="doctab overview {cls}">','<div class="l"></div>','<div class="m">','<tpl if="text">','<a class="tabUrl ov-tab-text" href="{href}">{text}</a>',"<tpl else>",'<a class="tabUrl ov-tab" href="{href}">&nbsp;</a>',"</tpl>","</div>",'<div class="r"></div>',"</div>","</tpl>",'<div style="float: left; width: 8px">&nbsp;</div>','<div class="tab-overflow"></div>');
this.html=this.tpl.applyTemplate(this.staticTabs);
this.tabTpl=Ext.create("Ext.XTemplate",'<div class="doctab','{[values.active ? (" active") : ""]}','" style="','{[values.width ? ("width: " + values.width + "px;") : ""]}','{[values.visible ? "" : "visibility: hidden;"]}">','<div class="l"></div>','<div class="m">','<span class="icn {iconCls}">&nbsp;</span>','<a class="tabUrl main-tab" href="{href}">{text}</a>',"</div>",'<div class="r"><a class="close" href="{parentUrl}"></a></div>',"</div>");
this.on("afterrender",this.initListeners,this);
this.on("resize",this.refresh,this);
this.mon(this,"tabActivate",this.tabActivate);
this.mon(this,"addTab",this.addTab);
this.callParent();
},initListeners:function(){this.refresh();
this.initActive();
this.el.on("mouseover",function(b,a){Ext.get(a).addCls("ovr");
},this,{delegate:".close"});
this.el.on("mouseout",function(b,a){Ext.get(a).removeCls("ovr");
},this,{delegate:".close"});
this.el.on("click",function(d,c){var b=Ext.get(c).up(".doctab").down(".tabUrl").getAttribute("href");
var a=Ext.get(c).up(".doctab").down(".close").getAttribute("href");
this.removeTab(b,a);
this.fireEvent("tabClose",b,a);
},this,{delegate:".close",preventDefault:true});
this.el.on("click",function(c,b){if(Ext.fly(c.getTarget()).hasCls("close")){return;
}var a=Ext.get(b).down(".tabUrl").getAttribute("href");
this.fireEvent("tabActivate",a);
},this,{delegate:".doctab"});
this.el.on("contextmenu",function(c,b){if(!Ext.get(b).hasCls("overview")){var a=Ext.get(b).down(".tabUrl").getAttribute("href");
this.createMenu(a).showBy(b);
}},this,{delegate:".doctab",preventDefault:true});
this.el.on("click",Ext.emptyFn,this,{delegate:".tabUrl",preventDefault:true});
this.el.on("mouseleave",function(){if(this.shouldResize){this.resizeTabs({animate:true});
}},this);
},tabActivate:function(f,e){var g=this.staticTabs;
var c=function(h){for(var j=0;
j<g.length;
j++){var k=g[j];
if(k.href==h){return h;
}}};
var a=Ext.ComponentQuery.query("#"+this.centerPanel)[0];
var d=Ext.ComponentQuery.query("#"+this.cardPanel)[0];
var b=Ext.ComponentQuery.query(f)[0];
if(f==c(f)){if(!b){b=Ext.widget(f.substr(1),e);
}this.loadIndex(b);
}else{if(b){this.activateTab("#"+b.itemId);
a.setActiveTab(b);
d.getLayout().setActiveItem(a);
}}},loadIndex:function(a){this.activateTab("#"+a.itemId);
this.setActiveTab(a);
},setStaticTabs:function(a){this.staticTabs=a;
this.refresh();
},getStaticTabs:function(a){return this.staticTabs;
},addTab:function(g,i,b,f){var h=this;
var j=Ext.ComponentQuery.query("#"+this.cardPanel)[0];
var d=Ext.ComponentQuery.query("#"+this.centerPanel)[0];
j.getLayout().setActiveItem(d);
var c=Ext.ComponentQuery.query("#"+i)[0];
if(!c){if(f){f.itemId=i;
}c=Ext.widget(g,f);
d.add(c);
c.on("close",function(){h.closeUrlTab(("#"+i),b);
});
}d.setActiveTab(c);
var e={parentUrl:b,href:"#"+i,text:c.text,tooltip:c.text,iconCls:c.iconCls};
var a={animate:true,activate:true};
this.tabCache[e.href]=e;
if(!this.hasTab(e.href)){this.tabs.push(e.href);
if(this.roomForNewTab()){this.addTabToBar(e,a);
}this.addTabToMenu(this.overflowButton.menu,e);
}if(a.activate){this.activateTab(e.href);
}},setActiveTab:function(b){var a=Ext.ComponentQuery.query("#"+this.cardPanel)[0];
if(a){a.layout.setActiveItem(b);
}},closeUrlTab:function(d,c){if(!this.hasTab(d)){return;
}this.removeFromArray(this.tabs,d);
var b=this.removeFromArray(this.tabsInBar,d);
var e=this.tabs[this.tabsInBar.length];
if(e){this.tabsInBar.push(e);
}if(this.activeTab===d){if(this.tabs.length===0){var a=Ext.ComponentQuery.query(c)[0];
if(a){this.loadIndex(a);
}}else{if(b===this.tabs.length){b-=1;
}this.fireEvent("tabActivate",this.tabs[b]);
}}if(this.tabs.length>=this.maxTabsInBar()){this.refresh();
}else{this.removeTabFromBar(d);
}},removeTab:function(c,b){if(!this.hasTab(c)){return;
}var a=Ext.ComponentQuery.query(c)[0];
if(a){a.close();
}},removeFromArray:function(c,b){var a=Ext.Array.indexOf(c,b);
if(a!==-1){Ext.Array.erase(c,a,1);
}return a;
},activateTab:function(b){this.activeTab=b;
if(!this.inTabs(b)){this.swapLastTabWith(b);
}Ext.Array.each(Ext.query(".doctab a.tabUrl"),function(e){Ext.get(e).up(".doctab").removeCls(["active","highlight"]);
});
var a=Ext.query('.doctab a[href="'+b+'"]')[0];
if(a){var c=Ext.get(a).up(".doctab");
c.addCls("active");
}this.highlightOverviewTab(b);
},refresh:function(f){var d;
if(f){d=this.closeTpl.applyTemplate(this.staticTabs);
}else{d=this.tpl.applyTemplate(this.staticTabs);
}var b=this.maxTabsInBar()<this.tabs.length?this.maxTabsInBar():this.tabs.length;
this.tabsInBar=this.tabs.slice(0,b);
for(var c=0;
c<b;
c++){var e=this.tabCache[this.tabs[c]];
var a=Ext.apply(e,{visible:true,active:this.activeTab===e.href,width:this.tabWidth()});
d+=this.tabTpl.applyTemplate(a);
}this.el.dom.innerHTML=d;
if(this.activeTab&&this.activeTab!==this.tabs[b-1]){this.fireEvent("tabActivate",this.activeTab);
}this.highlightOverviewTab(this.activeTab);
this.createOverflowButton();
this.addToolTips();
},initActive:function(){var a=this;
Ext.Array.each(this.staticTabs,function(b){var c=b.display;
if("active"==c){a.fireEvent("tabActivate",b.href);
}});
},closeAllTabs:function(f){this.activeTab=f.tabUrl;
var e=this.tabs;
for(var d=0;
d<e.length;
d++){if(e[d]!=this.activeTab){var b=Ext.ComponentQuery.query(e[d])[0];
if(b){b.close();
}}}if(this.inTabBar(this.activeTab)){this.tabs=this.tabsInBar=[this.activeTab];
}else{this.tabs=this.tabsInBar=[];
}var a=Ext.ComponentQuery.query("#"+this.centerPanel)[0];
var c=Ext.ComponentQuery.query("#"+this.cardPanel)[0];
var b=Ext.ComponentQuery.query(this.activeTab.substr(1))[0];
a.setActiveTab(b);
c.getLayout().setActiveItem(a);
this.refresh(true);
},roomForNewTab:function(){return this.tabsInBar.length<this.maxTabsInBar();
},hasTab:function(a){return Ext.Array.contains(this.tabs,a);
},addTabToBar:function(a,b){this.tabsInBar.push(a.href);
var c=Ext.get(this.tabTpl.append(this.el.dom,a));
this.addMainTabTooltip(c,a);
if(b.animate&&!Ext.isIE){c.setStyle("width","10px");
c.setStyle({visibility:"visible"});
c.animate({to:{width:this.tabWidth()}});
}else{c.setStyle({visibility:"visible"});
}this.resizeTabs(b);
},inTabBar:function(a){return Ext.Array.contains(this.tabsInBar,a);
},inTabs:function(a){var b=Ext.Array.pluck(this.staticTabs,"href").concat(this.tabsInBar);
return Ext.Array.contains(b,a);
},removeTabFromBar:function(a){var b=this.getTabEl(a);
b.dom.removed=true;
if(Ext.isIE){b.remove();
this.createOverflowButton(a);
}else{b.animate({to:{top:30},duration:this.animDuration}).animate({to:{width:10},duration:this.animDuration,listeners:{afteranimate:function(){b.remove();
this.shouldResize=true;
this.createOverflowButton(a);
},scope:this}});
}},swapLastTabWith:function(b){var a=this.getTabEl(this.tabsInBar[this.tabsInBar.length-1]);
if(a){var c=this.tabTpl.append(document.body,this.tabCache[b]);
a.dom.parentNode.replaceChild(c,a.dom);
this.tabsInBar[this.tabsInBar.length-1]=b;
Ext.get(c).setStyle({visibility:"visible",width:String(this.tabWidth())+"px"});
this.addMainTabTooltip(c,this.tabCache[b]);
}},highlightOverviewTab:function(a){if(a){var b=Ext.query(".doctab."+a.substr(1));
if(b&&b[0]){Ext.get(b[0]).addCls("highlight");
}}},maxTabsInBar:function(){return Math.floor(this.tabBarWidth()/this.minTabWidth);
},tabWidth:function(){var a=Math.floor(this.tabBarWidth()/this.tabsInBar.length)+6;
if(a>this.maxTabWidth){return this.maxTabWidth;
}else{if(a<this.minTabWidth){return this.minTabWidth;
}else{return a;
}}},tabBarWidth:function(){return this.getWidth()-(this.staticTabs.length*50)-15;
},resizeTabs:function(a){this.shouldResize=false;
Ext.Array.each(Ext.query(".doctab"),function(b){var c=Ext.get(b);
if(!c.dom.removed&&!c.hasCls("overview")){if(a&&a.animate&&!Ext.isIE){c.animate({to:{width:this.tabWidth()}});
}else{c.setWidth(this.tabWidth());
}}},this);
},getTabEl:function(b){var a=Ext.query('.doctab a[href="'+b+'"]');
if(a&&a[0]){return Ext.get(a[0]).up(".doctab");
}},createOverflowButton:function(a){if(this.overflowButton){this.overflowButton.destroy();
}this.overflowButton=Ext.create("Ext.button.Button",{baseCls:"",renderTo:this.getEl().down(".tab-overflow"),menu:this.createMenu(a)});
},createMenu:function(a){var b=new Oz.app.TabMenu({tabUrl:a,listeners:{closeAllTabs:this.closeAllTabs,tabItemClick:function(c){this.fireEvent("tabActivate",c.href,{navigate:true});
},scope:this}});
Ext.Array.each(this.tabs,function(c){this.addTabToMenu(b,this.tabCache[c]);
},this);
return b;
},addTabToMenu:function(d,c){var a=Ext.Array.indexOf(this.tabs,c.href);
if(this.tabs.length>this.tabsInBar.length&&a===this.maxTabsInBar()){d.addTabCls(c,"overflow");
}var b=this.inTabBar(c.href);
d.addTab(c,b?"":"overflow");
},addToolTips:function(){Ext.Array.each(this.staticTabs,function(a){var b=Ext.query(".doctab."+a.cls);
Ext.Array.each(b,function(c){var d=Ext.get(c);
if(d){Ext.create("Ext.tip.ToolTip",{target:d,html:a.tooltip});
}});
});
Ext.Array.each(this.tabsInBar,function(a){var c=Ext.get(Ext.query('a.main-tab[href="'+a+'"]')[0]);
var b=this.tabCache[a];
if(c){this.addMainTabTooltip(c.up(".doctab"),b);
}},this);
},addMainTabTooltip:function(b,a){if(a.tooltip){Ext.create("Ext.tip.ToolTip",{target:b,html:a.tooltip});
}}});
Ext.override(Ext.dom.Element,{getAttribute:(Ext.isIE6||Ext.isIE7||Ext.isIE8)?function(a,c){var e=this.dom,b;
if(c){b=typeof e[c+":"+a];
if(b!="undefined"&&b!="unknown"){return e[c+":"+a]||null;
}return null;
}if(a==="for"){a="htmlFor";
}return e[a]||null;
}:function(a,b){var c=this.dom;
if(b){return c.getAttributeNS(b,a)||c.getAttribute(b+":"+a);
}return c.getAttribute(a)||c[a]||null;
}});
Ext.define("Oz.app.ThumbList",{extend:"Ext.view.View",alias:"widget.thumblist",requires:[],cls:"thumb-list",itemSelector:"dl",urlField:"url",widgetField:"widget",commentsField:"comments",commentType:"",itemTpl:[],groupData:true,initComponent:function(){this.addEvents("urlclick");
Ext.Array.forEach(this.data,function(e,d){e.id="sample-"+d;
});
this.store=Ext.create("Ext.data.JsonStore",{fields:["id","title","parentUrl","items"]});
var b=this.flattenSubgroups(this.data);
this.store.loadData(b);
var a=["<div>",'<tpl for=".">','<div><a name="{id}"></a><h2><div>{title}</div></h2>',"<dl>",'<tpl for="items">',this.itemTpl,"</tpl>",'<div style="clear:left"></div><div class="x-hide-display">{parentUrl}</div></dl></div>',"</tpl>","</div>"];
if(!this.groupData){a=["<div>",'<tpl for=".">',"<div>","<dl>",'<tpl for="items">',this.itemTpl,"</tpl>",'<div style="clear:left"></div><div class="x-hide-display">{parentUrl}</div></dl></div>',"</tpl>","</div>"];
}this.tpl=new Ext.XTemplate(Ext.Array.flatten(a));
this.itemTpl=undefined;
this.data=undefined;
this.on("viewready",function(){this.initHover();
this.initComments();
},this);
this.callParent(arguments);
},initHover:function(){this.getEl().on("mouseover",function(b,a){Ext.get(a).addCls("over");
},this,{delegate:"dd"});
this.getEl().on("mouseout",function(b,a){Ext.get(a).removeCls("over");
},this,{delegate:"dd"});
},initComments:function(){this.getEl().select("dd").each(function(a){var b=a.getAttributeNS("ext",this.commentsField);
if(b){Ext.DomHelper.append(a.down("p"),this.counterHtml(b));
}},this);
},updateCommentCounts:function(){if(!this.getEl()){return;
}this.getEl().select(".comment-counter-small").remove();
this.initComments();
},flattenSubgroups:function(b){function a(c){if(c.items){return Ext.Array.map(c.items,a);
}else{return c;
}}return Ext.Array.map(b,function(c){return{id:c.id,title:c.title,parentUrl:c.parentUrl,items:Ext.Array.map(c.items,function(e){if(e.items){var d=Ext.apply({},a(e)[0]);
d.title=e.title;
return d;
}else{return e;
}})};
});
},counterHtml:function(a){return'<span class="comment-counter-small">'+a+"</span>";
},onContainerClick:function(b){var a=b.getTarget("h2",3,true);
if(a){a.up("div").toggleCls("collapsed");
}},onItemClick:function(a,f,c,h){var d=h.getTarget("dd",5,true);
if(d&&!h.getTarget("a",2)){var b=d.getAttributeNS("ext",this.urlField);
var g=d.getAttributeNS("ext",this.widgetField);
this.fireEvent("urlclick",g,b,a.data.parentUrl);
}return this.callParent(arguments);
}});
Ext.define("Oz.data.DwrProxy",{extend:"Ext.data.proxy.Server",alternateClassName:["Oz.data.proxy.Dwr","Oz.proxy.DwrProxy"],alias:"proxy.dwr",params:undefined,statics:{isBatching:false,addBatchCall:function(c,b,a){if(!this.isBatching){this.isBatching=true;
delete this.batchCalls;
this.batchCalls=[];
setTimeout("Oz.data.DwrProxy.executeBatchCall()",2000);
}this.batchCalls.push({obj:c,fn:b,args:a});
},executeBatchCall:function(){var b=this.batchCalls;
this.isBatching=false;
dwr.engine.beginBatch();
for(var a=0;
a<b.length;
a++){var c=b[a];
c.fn.apply(c.obj,c.args);
}dwr.engine.endBatch(true);
}},constructor:function(a){var b=this;
Ext.apply(b,a);
b.callParent(arguments);
},doRequest:function(c,h,i){var f=this,a=f.getWriter(),d=f.buildRequest(c,h,i),g=f.api[d.action],e=[],b=d.params;
if(!g){Ext.Error.raise("No dwr function specified for this proxy");
}if(c.allowWrite()){d=a.write(d);
e.push(Ext.pluck(c.records,"data")||[]);
}if(Ext.isDefined(this.params)){b=Ext.apply(b,this.params);
}e.push(b);
e.push(f.createRequestCallback(d,c,h,i));
if(c.useBatching||this.useBatching){Oz.data.DwrProxy.addBatchCall(window,g,e);
}else{g.apply(window,e);
}},createRequestCallback:function(d,a,e,b){var c=this;
return function(f){c.processResponse(f.success,a,d,f,e,b);
};
},extractResponseData:function(a){return Ext.isDefined(a.result)?a.result:a;
},setException:function(b,a){b.setException(a.message);
},setParams:function(a){this.params=Ext.apply(a,this.params||{});
},setExtraParam:function(a,b){this.extraParams=this.extraParams||{};
this.extraParams[a]=b;
this.applyEncoding(this.extraParams);
},buildUrl:function(){return"";
}});
Ext.define("Oz.desktop.Module",{extend:"Ext.ux.desktop.Module",uses:["Ext.StoreManager"],models:[],stores:[],views:[],moduleName:"",onClassExtended:function(h,c){var g=Ext.getClassName(h),d=g.match(/^(.*)\.controller\./);
if(d!==null){var a=Ext.Loader.getPrefix(g)||d[1],f=c.onBeforeClassCreated,i=[],b=["model","view","store"],e;
c.onBeforeClassCreated=function(s,m){var n,p,k,q,l,o,r;
for(n=0,p=b.length;
n<p;
n++){k=b[n];
q=Ext.Array.from(m[k+"s"]);
for(l=0,o=q.length;
l<o;
l++){r=q[l];
e=Ext.Loader.getPrefix(r);
if(e===""||e===r){i.push(a+"."+k+"."+r);
}else{i.push(r);
}}}Ext.require(i,Ext.Function.pass(f,arguments,this));
};
}},constructor:function(a){var b=this;
Ext.apply(b,a);
b.callParent(arguments);
},getModuleClassName:function(a,c){var b=Ext.Loader.getPrefix(this.self.getName());
if(b){return this.moduleName==""?b+"."+c+"."+a:b+"."+this.moduleName+"."+c+"."+a;
}else{return this.moduleName==""?c+"."+a:this.moduleName+"."+c+"."+a;
}},getAppModuleClassName:function(a,c){var b=Ext.Loader.getPrefix(this.self.getName());
return b+"."+c+"."+a;
},getStore:function(b){var a=Ext.StoreManager.get(b);
if(!a){a=Ext.create(this.getModuleClassName(b,"store"),{storeId:b});
}return a;
},getAppStore:function(b){var a=Ext.StoreManager.get(b);
if(!a){a=Ext.create(this.getAppModuleClassName(b,"store"),{storeId:b});
}return a;
},getModel:function(a){a=this.getModuleClassName(a,"model");
return Ext.ModelManager.getModel(a);
},getView:function(a){a=this.getModuleClassName(a,"view");
return Ext.ClassManager.get(a);
}});
var mxClient={VERSION:"1.12.0.2",IS_IE:navigator.userAgent.indexOf("MSIE")>=0,IS_IE6:navigator.userAgent.indexOf("MSIE 6")>=0,IS_QUIRKS:navigator.userAgent.indexOf("MSIE")>=0&&(document.documentMode==null||document.documentMode==5),IS_NS:navigator.userAgent.indexOf("Mozilla/")>=0&&navigator.userAgent.indexOf("MSIE")<0,IS_OP:navigator.userAgent.indexOf("Opera/")>=0,IS_OT:navigator.userAgent.indexOf("Presto/2.4.")<0&&navigator.userAgent.indexOf("Presto/2.3.")<0&&navigator.userAgent.indexOf("Presto/2.2.")<0&&navigator.userAgent.indexOf("Presto/2.1.")<0&&navigator.userAgent.indexOf("Presto/2.0.")<0&&navigator.userAgent.indexOf("Presto/1.")<0,IS_SF:navigator.userAgent.indexOf("AppleWebKit/")>=0&&navigator.userAgent.indexOf("Chrome/")<0,IS_GC:navigator.userAgent.indexOf("Chrome/")>=0,IS_MT:(navigator.userAgent.indexOf("Firefox/")>=0&&navigator.userAgent.indexOf("Firefox/1.")<0&&navigator.userAgent.indexOf("Firefox/2.")<0)||(navigator.userAgent.indexOf("Iceweasel/")>=0&&navigator.userAgent.indexOf("Iceweasel/1.")<0&&navigator.userAgent.indexOf("Iceweasel/2.")<0)||(navigator.userAgent.indexOf("SeaMonkey/")>=0&&navigator.userAgent.indexOf("SeaMonkey/1.")<0)||(navigator.userAgent.indexOf("Iceape/")>=0&&navigator.userAgent.indexOf("Iceape/1.")<0),IS_SVG:navigator.userAgent.indexOf("Firefox/")>=0||navigator.userAgent.indexOf("Iceweasel/")>=0||navigator.userAgent.indexOf("Seamonkey/")>=0||navigator.userAgent.indexOf("Iceape/")>=0||navigator.userAgent.indexOf("Galeon/")>=0||navigator.userAgent.indexOf("Epiphany/")>=0||navigator.userAgent.indexOf("AppleWebKit/")>=0||navigator.userAgent.indexOf("Gecko/")>=0||navigator.userAgent.indexOf("Opera/")>=0,NO_FO:navigator.userAgent.indexOf("Firefox/1.")>=0||navigator.userAgent.indexOf("Iceweasel/1.")>=0||navigator.userAgent.indexOf("Firefox/2.")>=0||navigator.userAgent.indexOf("Iceweasel/2.")>=0||navigator.userAgent.indexOf("SeaMonkey/1.")>=0||navigator.userAgent.indexOf("Iceape/1.")>=0||navigator.userAgent.indexOf("Camino/1.")>=0||navigator.userAgent.indexOf("Epiphany/2.")>=0||navigator.userAgent.indexOf("Opera/")>=0||navigator.userAgent.indexOf("MSIE")>=0||navigator.userAgent.indexOf("Mozilla/2.")>=0,IS_VML:navigator.appName.toUpperCase()=="MICROSOFT INTERNET EXPLORER",IS_MAC:navigator.userAgent.toUpperCase().indexOf("MACINTOSH")>0,IS_TOUCH:navigator.userAgent.toUpperCase().indexOf("IPAD")>0||navigator.userAgent.toUpperCase().indexOf("IPOD")>0||navigator.userAgent.toUpperCase().indexOf("IPHONE")>0||navigator.userAgent.toUpperCase().indexOf("ANDROID")>0,IS_LOCAL:document.location.href.indexOf("http://")<0&&document.location.href.indexOf("https://")<0,isBrowserSupported:function(){return mxClient.IS_VML||mxClient.IS_SVG;
},link:function(a,b,e){e=e||document;
if(mxClient.IS_IE6){e.write('<link rel="'+a+'" href="'+b+'" charset="ISO-8859-1" type="text/css"/>');
}else{var d=e.createElement("link");
d.setAttribute("rel",a);
d.setAttribute("href",b);
d.setAttribute("charset","ISO-8859-1");
d.setAttribute("type","text/css");
var c=e.getElementsByTagName("head")[0];
c.appendChild(d);
}},include:function(a){document.write('<script src="'+a+'"><\/script>');
},dispose:function(){for(var a=0;
a<mxEvent.objects.length;
a++){if(mxEvent.objects[a].mxListenerList!=null){mxEvent.removeAllListeners(mxEvent.objects[a]);
}}}};
if(typeof(mxLoadResources)=="undefined"){mxLoadResources=true;
}if(typeof(mxLoadStylesheets)=="undefined"){mxLoadStylesheets=true;
}if(typeof(mxBasePath)!="undefined"&&mxBasePath.length>0){if(mxBasePath.substring(mxBasePath.length-1)=="/"){mxBasePath=mxBasePath.substring(0,mxBasePath.length-1);
}mxClient.basePath=mxBasePath;
}else{mxClient.basePath=".";
}if(typeof(mxImageBasePath)!="undefined"&&mxImageBasePath.length>0){if(mxImageBasePath.substring(mxImageBasePath.length-1)=="/"){mxImageBasePath=mxImageBasePath.substring(0,mxImageBasePath.length-1);
}mxClient.imageBasePath=mxImageBasePath;
}else{mxClient.imageBasePath=mxClient.basePath+"/images";
}if(typeof(mxLanguage)!="undefined"){mxClient.language=mxLanguage;
}else{mxClient.language=(mxClient.IS_IE)?navigator.userLanguage:navigator.language;
}if(typeof(mxDefaultLanguage)!="undefined"){mxClient.defaultLanguage=mxDefaultLanguage;
}else{mxClient.defaultLanguage="en";
}if(mxLoadStylesheets){mxClient.link("stylesheet",mxClient.basePath+"/css/common.css");
}if(typeof(mxLanguages)!="undefined"){mxClient.languages=mxLanguages;
}if(mxClient.IS_IE){if(document.documentMode>=9){mxClient.IS_VML=false;
mxClient.IS_SVG=true;
}else{if(document.documentMode==8){document.namespaces.add("v","urn:schemas-microsoft-com:vml","#default#VML");
document.namespaces.add("o","urn:schemas-microsoft-com:office:office","#default#VML");
}else{document.namespaces.add("v","urn:schemas-microsoft-com:vml");
document.namespaces.add("o","urn:schemas-microsoft-com:office:office");
}var ss=document.createStyleSheet();
ss.cssText="v\\:*{behavior:url(#default#VML)}o\\:*{behavior:url(#default#VML)}";
if(mxLoadStylesheets){mxClient.link("stylesheet",mxClient.basePath+"/css/explorer.css");
}}window.attachEvent("onunload",mxClient.dispose);
}var mxLog={consoleName:"Console",TRACE:false,DEBUG:true,WARN:true,buffer:"",init:function(){if(mxLog.window==null&&document.body!=null){var g=mxLog.consoleName+" - mxGraph "+mxClient.VERSION;
var k=document.createElement("table");
k.setAttribute("width","100%");
k.setAttribute("height","100%");
var d=document.createElement("tbody");
var f=document.createElement("tr");
var b=document.createElement("td");
b.style.verticalAlign="top";
mxLog.textarea=document.createElement("textarea");
mxLog.textarea.setAttribute("readOnly","true");
mxLog.textarea.style.height="100%";
mxLog.textarea.style.resize="none";
mxLog.textarea.value=mxLog.buffer;
if(mxClient.IS_NS&&document.compatMode!="BackCompat"){mxLog.textarea.style.width="99%";
}else{mxLog.textarea.style.width="100%";
}b.appendChild(mxLog.textarea);
f.appendChild(b);
d.appendChild(f);
f=document.createElement("tr");
mxLog.td=document.createElement("td");
mxLog.td.style.verticalAlign="top";
mxLog.td.setAttribute("height","30px");
f.appendChild(mxLog.td);
d.appendChild(f);
k.appendChild(d);
mxLog.addButton("Info",function(h){mxLog.info();
});
mxLog.addButton("DOM",function(h){var l=mxUtils.getInnerHtml(document.body);
mxLog.debug(l);
});
mxLog.addButton("Trace",function(h){mxLog.TRACE=!mxLog.TRACE;
if(mxLog.TRACE){mxLog.debug("Tracing enabled");
}else{mxLog.debug("Tracing disabled");
}});
mxLog.addButton("Copy",function(h){try{mxUtils.copy(mxLog.textarea.value);
}catch(l){mxUtils.alert(l);
}});
mxLog.addButton("Show",function(h){try{mxUtils.popup(mxLog.textarea.value);
}catch(l){mxUtils.alert(l);
}});
mxLog.addButton("Clear",function(h){mxLog.textarea.value="";
});
var e=0;
var i=0;
if(typeof(window.innerWidth)==="number"){e=window.innerHeight;
i=window.innerWidth;
}else{e=(document.documentElement.clientHeight||document.body.clientHeight);
i=document.body.clientWidth;
}mxLog.window=new mxWindow(g,k,Math.max(0,i-320),Math.max(0,e-210),300,160);
mxLog.window.setMaximizable(true);
mxLog.window.setScrollable(false);
mxLog.window.setResizable(true);
mxLog.window.setClosable(true);
mxLog.window.destroyOnClose=false;
if((mxClient.IS_NS||mxClient.IS_IE)&&!mxClient.IS_GC&&!mxClient.IS_SF&&document.compatMode!="BackCompat"){var c=mxLog.window.getElement();
var a=function(l,h){mxLog.textarea.style.height=Math.max(0,c.offsetHeight-70)+"px";
};
mxLog.window.addListener(mxEvent.RESIZE_END,a);
mxLog.window.addListener(mxEvent.MAXIMIZE,a);
mxLog.window.addListener(mxEvent.NORMALIZE,a);
mxLog.textarea.style.height="92px";
}}},info:function(){mxLog.writeln(mxUtils.toString(navigator));
},addButton:function(c,a){var b=document.createElement("button");
mxUtils.write(b,c);
mxEvent.addListener(b,"click",a);
mxLog.td.appendChild(b);
},isVisible:function(){if(mxLog.window!=null){return mxLog.window.isVisible();
}return false;
},show:function(){mxLog.setVisible(true);
},setVisible:function(a){if(mxLog.window==null){mxLog.init();
}if(mxLog.window!=null){mxLog.window.setVisible(a);
}},enter:function(a){if(mxLog.TRACE){mxLog.writeln("Entering "+a);
return new Date().getTime();
}},leave:function(a,c){if(mxLog.TRACE){var b=(c!=0)?" ("+(new Date().getTime()-c)+" ms)":"";
mxLog.writeln("Leaving "+a+b);
}},debug:function(){if(mxLog.DEBUG){mxLog.writeln.apply(this,arguments);
}},warn:function(){if(mxLog.WARN){mxLog.writeln.apply(this,arguments);
}},write:function(){var a="";
for(var b=0;
b<arguments.length;
b++){a+=arguments[b];
if(b<arguments.length-1){a+=" ";
}}if(mxLog.textarea!=null){mxLog.textarea.value=mxLog.textarea.value+a;
if(navigator.userAgent.indexOf("Presto/2.5")>=0){mxLog.textarea.style.visibility="hidden";
mxLog.textarea.style.visibility="visible";
}mxLog.textarea.scrollTop=mxLog.textarea.scrollHeight;
}else{mxLog.buffer+=a;
}},writeln:function(){var a="";
for(var b=0;
b<arguments.length;
b++){a+=arguments[b];
if(b<arguments.length-1){a+=" ";
}}mxLog.write(a+"\n");
}};
var mxObjectIdentity={FIELD_NAME:"mxObjectId",counter:0,get:function(b){if(typeof(b)=="object"&&b[mxObjectIdentity.FIELD_NAME]==null){var a=mxUtils.getFunctionName(b.constructor);
b[mxObjectIdentity.FIELD_NAME]=a+"#"+mxObjectIdentity.counter++;
}return b[mxObjectIdentity.FIELD_NAME];
},clear:function(a){if(typeof(a)=="object"){delete a[mxObjectIdentity.FIELD_NAME];
}}};
function mxDictionary(){this.clear();
}mxDictionary.prototype.map=null;
mxDictionary.prototype.clear=function(){this.map={};
};
mxDictionary.prototype.get=function(a){var b=mxObjectIdentity.get(a);
return this.map[b];
};
mxDictionary.prototype.put=function(a,c){var d=mxObjectIdentity.get(a);
var b=this.map[d];
this.map[d]=c;
return b;
};
mxDictionary.prototype.remove=function(a){var c=mxObjectIdentity.get(a);
var b=this.map[c];
delete this.map[c];
return b;
};
mxDictionary.prototype.getKeys=function(){var a=[];
for(var b in this.map){a.push(b);
}return a;
};
mxDictionary.prototype.getValues=function(){var a=[];
for(var b in this.map){a.push(this.map[b]);
}return a;
};
mxDictionary.prototype.visit=function(b){for(var a in this.map){b(a,this.map[a]);
}};
var mxResources={resources:[],extension:".properties",resourcesEncoded:true,loadDefaultBundle:true,loadSpecialBundle:true,isLanguageSupported:function(a){if(mxClient.languages!=null){return mxUtils.indexOf(mxClient.languages,a)>=0;
}return true;
},getDefaultBundle:function(b,a){if(mxResources.loadDefaultBundle||!mxResources.isLanguageSupported(a)){return b+mxResources.extension;
}else{return null;
}},getSpecialBundle:function(b,a){if(mxClient.languages==null||!this.isLanguageSupported(a)){var c=a.indexOf("-");
if(c>0){a=a.substring(0,c);
}}if(mxResources.loadSpecialBundle&&mxResources.isLanguageSupported(a)&&a!=mxClient.defaultLanguage){return b+"_"+a+mxResources.extension;
}else{return null;
}},add:function(f,b){b=(b!=null)?b:mxClient.language.toLowerCase();
if(b!=mxConstants.NONE){var g=mxResources.getDefaultBundle(f,b);
if(g!=null){try{var c=mxUtils.load(g);
if(c.isReady()){mxResources.parse(c.getText());
}}catch(d){}}var a=mxResources.getSpecialBundle(f,b);
if(a!=null){try{var c=mxUtils.load(a);
if(c.isReady()){mxResources.parse(c.getText());
}}catch(d){}}}},parse:function(g){if(g!=null){var b=g.split("\n");
for(var e=0;
e<b.length;
e++){if(b[e].charAt(0)!="#"){var c=b[e].indexOf("=");
if(c>0){var d=b[e].substring(0,c);
var a=b[e].length;
if(b[e].charCodeAt(a-1)==13){a--;
}var f=b[e].substring(c+1,a);
if(this.resourcesEncoded){f=f.replace(/\\(?=u[a-fA-F\d]{4})/g,"%");
mxResources.resources[d]=unescape(f);
}else{mxResources.resources[d]=f;
}}}}}},get:function(f,h,b){var g=mxResources.resources[f];
if(g==null){g=b;
}if(g!=null&&h!=null){var a=[];
var d=null;
for(var e=0;
e<g.length;
e++){var k=g.charAt(e);
if(k=="{"){d="";
}else{if(d!=null&&k=="}"){d=parseInt(d)-1;
if(d>=0&&d<h.length){a.push(h[d]);
}d=null;
}else{if(d!=null){d+=k;
}else{a.push(k);
}}}}g=a.join("");
}return g;
}};
function mxPoint(a,b){this.x=(a!=null)?a:0;
this.y=(b!=null)?b:0;
}mxPoint.prototype.x=null;
mxPoint.prototype.y=null;
mxPoint.prototype.equals=function(a){return a.x==this.x&&a.y==this.y;
};
mxPoint.prototype.clone=function(){return mxUtils.clone(this);
};
function mxRectangle(b,d,c,a){mxPoint.call(this,b,d);
this.width=(c!=null)?c:0;
this.height=(a!=null)?a:0;
}mxRectangle.prototype=new mxPoint();
mxRectangle.prototype.constructor=mxRectangle;
mxRectangle.prototype.width=null;
mxRectangle.prototype.height=null;
mxRectangle.prototype.setRect=function(a,d,b,c){this.x=a;
this.y=d;
this.width=b;
this.height=c;
};
mxRectangle.prototype.getCenterX=function(){return this.x+this.width/2;
};
mxRectangle.prototype.getCenterY=function(){return this.y+this.height/2;
};
mxRectangle.prototype.add=function(b){if(b!=null){var a=Math.min(this.x,b.x);
var e=Math.min(this.y,b.y);
var d=Math.max(this.x+this.width,b.x+b.width);
var c=Math.max(this.y+this.height,b.y+b.height);
this.x=a;
this.y=e;
this.width=d-a;
this.height=c-e;
}};
mxRectangle.prototype.grow=function(a){this.x-=a;
this.y-=a;
this.width+=2*a;
this.height+=2*a;
};
mxRectangle.prototype.getPoint=function(){return new mxPoint(this.x,this.y);
};
mxRectangle.prototype.equals=function(a){return a.x==this.x&&a.y==this.y&&a.width==this.width&&a.height==this.height;
};
var mxEffects={animateChanges:function(g,e,b){var a=10;
var f=0;
var c=function(){var l=false;
for(var m=0;
m<e.length;
m++){var o=e[m];
if(o instanceof mxGeometryChange||o instanceof mxTerminalChange||o instanceof mxValueChange||o instanceof mxChildChange||o instanceof mxStyleChange){var h=g.getView().getState(o.cell||o.child,false);
if(h!=null){l=true;
if(o.constructor!=mxGeometryChange||g.model.isEdge(o.cell)){mxUtils.setOpacity(h.shape.node,100*f/a);
}else{var k=g.getView().scale;
var r=(o.geometry.x-o.previous.x)*k;
var q=(o.geometry.y-o.previous.y)*k;
var p=(o.geometry.width-o.previous.width)*k;
var n=(o.geometry.height-o.previous.height)*k;
if(f==0){h.x-=r;
h.y-=q;
h.width-=p;
h.height-=n;
}else{h.x+=r/a;
h.y+=q/a;
h.width+=p/a;
h.height+=n/a;
}g.cellRenderer.redraw(h);
mxEffects.cascadeOpacity(g,o.cell,100*f/a);
}}}}mxUtils.repaintGraph(g,new mxPoint(1,1));
if(f<a&&l){f++;
window.setTimeout(c,d);
}else{if(b!=null){b();
}}};
var d=30;
c();
},cascadeOpacity:function(h,g,f){var b=h.model.getChildCount(g);
for(var d=0;
d<b;
d++){var a=h.model.getChildAt(g,d);
var k=h.getView().getState(a);
if(k!=null){mxUtils.setOpacity(k.shape.node,f);
mxEffects.cascadeOpacity(h,a,f);
}}var c=h.model.getEdges(g);
if(c!=null){for(var d=0;
d<c.length;
d++){var e=h.getView().getState(c[d]);
if(e!=null){mxUtils.setOpacity(e.shape.node,f);
}}}},fadeOut:function(g,i,a,e,c,d){e=e||40;
c=c||30;
var b=i||100;
mxUtils.setOpacity(g,b);
if(d||d==null){var h=function(){b=Math.max(b-e,0);
mxUtils.setOpacity(g,b);
if(b>0){window.setTimeout(h,c);
}else{g.style.visibility="hidden";
if(a&&g.parentNode){g.parentNode.removeChild(g);
}}};
window.setTimeout(h,c);
}else{g.style.visibility="hidden";
if(a&&g.parentNode){g.parentNode.removeChild(g);
}}}};
var mxUtils={errorResource:(mxClient.language!="none")?"error":"",closeResource:(mxClient.language!="none")?"close":"",errorImage:mxClient.imageBasePath+"/error.gif",removeCursors:function(d){if(d.style!=null){d.style.cursor="";
}var c=d.childNodes;
if(c!=null){var a=c.length;
for(var b=0;
b<a;
b+=1){mxUtils.removeCursors(c[b]);
}}},repaintGraph:function(a,d){if(mxClient.IS_GC||mxClient.IS_SF||mxClient.IS_OP){var e=a.container;
if(e!=null&&d!=null&&(e.scrollLeft>0||e.scrollTop>0)){var b=document.createElement("div");
b.style.position="absolute";
b.style.left=d.x+"px";
b.style.top=d.y+"px";
b.style.width="1px";
b.style.height="1px";
e.appendChild(b);
e.removeChild(b);
}}},getCurrentStyle:function(){if(mxClient.IS_IE){return function(a){return(a!=null)?a.currentStyle:null;
};
}else{return function(a){return(a!=null)?window.getComputedStyle(a,""):null;
};
}}(),hasScrollbars:function(b){var a=mxUtils.getCurrentStyle(b);
return a!=null&&(a.overflow=="scroll"||a.overflow=="auto");
},bind:function(b,a){return function(){return a.apply(b,arguments);
};
},eval:function(expr){var result=null;
if(expr.indexOf("function")>=0){try{eval("var _mxJavaScriptExpression="+expr);
result=_mxJavaScriptExpression;
_mxJavaScriptExpression=null;
}catch(e){mxLog.warn(e.message+" while evaluating "+expr);
}}else{try{result=eval(expr);
}catch(e){mxLog.warn(e.message+" while evaluating "+expr);
}}return result;
},findNode:function(d,b,e){var c=d.getAttribute(b);
if(c!=null&&c==e){return d;
}d=d.firstChild;
while(d!=null){var a=mxUtils.findNode(d,b,e);
if(a!=null){return a;
}d=d.nextSibling;
}return null;
},findNodeByAttribute:function(){if(document.documentMode>=9){return function(c,b,d){var a=null;
if(c!=null){if(c.nodeType==mxConstants.NODETYPE_ELEMENT&&c.getAttribute(b)==d){a=c;
}else{var e=c.firstChild;
while(e!=null&&a==null){a=mxUtils.findNodeByAttribute(e,b,d);
e=e.nextSibling;
}}}return a;
};
}else{if(mxClient.IS_IE){return function(b,a,c){if(b==null){return null;
}else{var d="//*[@"+a+"='"+c+"']";
return b.ownerDocument.selectSingleNode(d);
}};
}else{return function(c,b,d){if(c==null){return null;
}else{var a=c.ownerDocument.evaluate("//*[@"+b+"='"+d+"']",c.ownerDocument,null,XPathResult.ANY_TYPE,null);
return a.iterateNext();
}};
}}}(),getFunctionName:function(d){var e=null;
if(d!=null){if(d.name!=null){e=d.name;
}else{var c=d.toString();
var b=9;
while(c.charAt(b)==" "){b++;
}var a=c.indexOf("(",b);
e=c.substring(b,a);
}}return e;
},indexOf:function(c,b){if(c!=null&&b!=null){for(var a=0;
a<c.length;
a++){if(c[a]==b){return a;
}}}return -1;
},remove:function(d,e){var a=null;
if(typeof(e)=="object"){var b=mxUtils.indexOf(e,d);
while(b>=0){e.splice(b,1);
a=d;
b=mxUtils.indexOf(e,d);
}}for(var c in e){if(e[c]==d){delete e[c];
a=d;
}}return a;
},isNode:function(c,d,a,b){if(c!=null&&!isNaN(c.nodeType)&&(d==null||c.nodeName.toLowerCase()==d.toLowerCase())){return a==null||c.getAttribute(a)==b;
}return false;
},getChildNodes:function(d,a){a=a||mxConstants.NODETYPE_ELEMENT;
var c=[];
var b=d.firstChild;
while(b!=null){if(b.nodeType==a){c.push(b);
}b=b.nextSibling;
}return c;
},createXmlDocument:function(){var a=null;
if(document.implementation&&document.implementation.createDocument){a=document.implementation.createDocument("","",null);
}else{if(window.ActiveXObject){a=new ActiveXObject("Microsoft.XMLDOM");
}}return a;
},parseXml:function(){if(mxClient.IS_IE&&(typeof(document.documentMode)==="undefined"||document.documentMode<9)){return function(b){var a=mxUtils.createXmlDocument();
a.async="false";
a.loadXML(b);
return a;
};
}else{return function(a){var b=new DOMParser();
return b.parseFromString(a,"text/xml");
};
}}(),clearSelection:function(){if(document.selection){return function(){document.selection.empty();
};
}else{if(window.getSelection){return function(){window.getSelection().removeAllRanges();
};
}}}(),getPrettyXml:function(g,f,b){var a=[];
if(g!=null){f=f||"  ";
b=b||"";
if(g.nodeType==mxConstants.NODETYPE_TEXT){a.push(g.nodeValue);
}else{a.push(b+"<"+g.nodeName);
var c=g.attributes;
if(c!=null){for(var e=0;
e<c.length;
e++){var h=mxUtils.htmlEntities(c[e].nodeValue);
a.push(" "+c[e].nodeName+'="'+h+'"');
}}var d=g.firstChild;
if(d!=null){a.push(">\n");
while(d!=null){a.push(mxUtils.getPrettyXml(d,f,b+f));
d=d.nextSibling;
}a.push(b+"</"+g.nodeName+">\n");
}else{a.push("/>\n");
}}}return a.join("");
},removeWhitespace:function(c,d){var a=(d)?c.previousSibling:c.nextSibling;
while(a!=null&&a.nodeType==mxConstants.NODETYPE_TEXT){var b=(d)?a.previousSibling:a.nextSibling;
var e=mxUtils.getTextContent(a);
if(mxUtils.trim(e).length==0){a.parentNode.removeChild(a);
}a=b;
}},htmlEntities:function(b,a){b=b||"";
b=b.replace(/&/g,"&amp;");
b=b.replace(/"/g,"&quot;");
b=b.replace(/\'/g,"&#39;");
b=b.replace(/</g,"&lt;");
b=b.replace(/>/g,"&gt;");
if(a==null||a){b=b.replace(/\n/g,"&#xa;");
}return b;
},isVml:function(a){return a!=null&&a.tagUrn=="urn:schemas-microsoft-com:vml";
},getXml:function(d,b){var c="";
if(window.XMLSerializer!=null){var a=new XMLSerializer();
c=a.serializeToString(d);
}else{if(d.xml!=null){c=d.xml.replace(/\r\n\t[\t]*/g,"").replace(/>\r\n/g,">").replace(/\r\n/g,"\n");
}}b=b||"&#xa;";
c=c.replace(/\n/g,b);
return c;
},getTextContent:function(b){var a="";
if(b!=null){if(b.firstChild!=null){b=b.firstChild;
}a=b.nodeValue||"";
}return a;
},getInnerHtml:function(){if(mxClient.IS_IE){return function(a){if(a!=null){return a.innerHTML;
}return"";
};
}else{return function(b){if(b!=null){var a=new XMLSerializer();
return a.serializeToString(b);
}return"";
};
}}(),getOuterHtml:function(){if(mxClient.IS_IE){return function(d){if(d!=null){if(d.outerHTML!=null){return d.outerHTML;
}else{var c=[];
c.push("<"+d.nodeName);
var a=d.attributes;
if(a!=null){for(var b=0;
b<a.length;
b++){var e=a[b].nodeValue;
if(e!=null&&e.length>0){c.push(" ");
c.push(a[b].nodeName);
c.push('="');
c.push(e);
c.push('"');
}}}if(d.innerHTML.length==0){c.push("/>");
}else{c.push(">");
c.push(d.innerHTML);
c.push("</"+d.nodeName+">");
}return c.join("");
}}return"";
};
}else{return function(b){if(b!=null){var a=new XMLSerializer();
return a.serializeToString(b);
}return"";
};
}}(),write:function(a,d){var c=a.ownerDocument;
var b=c.createTextNode(d);
if(a!=null){a.appendChild(b);
}return b;
},writeln:function(a,d){var c=a.ownerDocument;
var b=c.createTextNode(d);
if(a!=null){a.appendChild(b);
a.appendChild(document.createElement("br"));
}return b;
},br:function(c,d){d=d||1;
var b=null;
for(var a=0;
a<d;
a++){if(c!=null){b=c.ownerDocument.createElement("br");
c.appendChild(b);
}}return b;
},button:function(b,a,d){d=(d!=null)?d:document;
var c=d.createElement("button");
mxUtils.write(c,b);
mxEvent.addListener(c,"click",function(e){a(e);
});
return c;
},para:function(a,c){var b=document.createElement("p");
mxUtils.write(b,c);
if(a!=null){a.appendChild(b);
}return b;
},linkAction:function(b,e,a,c,d){return mxUtils.link(b,e,function(){a.execute(c);
},d);
},linkInvoke:function(d,f,c,b,a,e){return mxUtils.link(d,f,function(){c[b](a);
},e);
},link:function(d,f,c,e){var b=document.createElement("span");
b.style.color="blue";
b.style.textDecoration="underline";
b.style.cursor="pointer";
if(e!=null){b.style.paddingLeft=e+"px";
}mxEvent.addListener(b,"click",c);
mxUtils.write(b,f);
if(d!=null){d.appendChild(b);
}return b;
},fit:function(f){var e=parseInt(f.offsetLeft);
var c=parseInt(f.offsetWidth);
var i=document.body;
var g=document.documentElement;
var k=(i.scrollLeft||g.scrollLeft)+(i.clientWidth||g.clientWidth);
if(e+c>k){f.style.left=Math.max((i.scrollLeft||g.scrollLeft),k-c)+"px";
}var h=parseInt(f.offsetTop);
var l=parseInt(f.offsetHeight);
var a=(i.scrollTop||g.scrollTop)+Math.max(i.clientHeight||0,g.clientHeight);
if(h+l>a){f.style.top=Math.max((i.scrollTop||g.scrollTop),a-l)+"px";
}},open:function(b){if(mxClient.IS_NS){try{netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
}catch(h){mxUtils.alert("Permission to read file denied.");
return"";
}var d=Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
d.initWithPath(b);
if(!d.exists()){mxUtils.alert("File not found.");
return"";
}var g=Components.classes["@mozilla.org/network/file-input-stream;1"].createInstance(Components.interfaces.nsIFileInputStream);
g.init(d,1,4,null);
var f=Components.classes["@mozilla.org/scriptableinputstream;1"].createInstance(Components.interfaces.nsIScriptableInputStream);
f.init(g);
var c=f.read(f.available());
return c;
}else{var i=new ActiveXObject("Scripting.FileSystemObject");
var a=i.OpenTextFile(b,1);
var k=a.readAll();
a.close();
return k;
}},save:function(b,d){if(mxClient.IS_NS){try{netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
}catch(g){mxUtils.alert("Permission to write file denied.");
return;
}var c=Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
c.initWithPath(b);
if(!c.exists()){c.create(0,420);
}var a=Components.classes["@mozilla.org/network/file-output-stream;1"].createInstance(Components.interfaces.nsIFileOutputStream);
a.init(c,32|2,4,null);
a.write(d,d.length);
a.flush();
a.close();
}else{var f=new ActiveXObject("Scripting.FileSystemObject");
var c=f.CreateTextFile(b,true);
c.Write(d);
c.Close();
}},saveAs:function(b){var a=document.createElement("iframe");
a.setAttribute("src","");
a.style.visibility="hidden";
document.body.appendChild(a);
try{if(mxClient.IS_NS){var d=a.contentDocument;
d.open();
d.write(b);
d.close();
try{netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
a.focus();
saveDocument(d);
}catch(c){mxUtils.alert("Permission to save document denied.");
}}else{var d=a.contentWindow.document;
d.write(b);
d.execCommand("SaveAs",false,document.location);
}}finally{document.body.removeChild(a);
}},copy:function(c){if(window.clipboardData){window.clipboardData.setData("Text",c);
}else{netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
var b=Components.classes["@mozilla.org/widget/clipboard;1"].createInstance(Components.interfaces.nsIClipboard);
if(!b){return;
}var a=Components.classes["@mozilla.org/widget/transferable;1"].createInstance(Components.interfaces.nsITransferable);
if(!a){return;
}a.addDataFlavor("text/unicode");
var e=Components.classes["@mozilla.org/supports-string;1"].createInstance(Components.interfaces.nsISupportsString);
var f=c;
e.data=f;
a.setTransferData("text/unicode",e,f.length*2);
var d=Components.interfaces.nsIClipboard;
b.setData(a,null,d.kGlobalClipboard);
}},load:function(a){var b=new mxXmlRequest(a,null,"GET",false);
b.send();
return b;
},get:function(b,c,a){return new mxXmlRequest(b,null,"GET").send(c,a);
},post:function(b,d,c,a){return new mxXmlRequest(b,d).send(c,a);
},submit:function(a,d,c,b){return new mxXmlRequest(a,d).simulate(c,b);
},loadInto:function(a,c,b){if(mxClient.IS_IE){c.onreadystatechange=function(){if(c.readyState==4){b();
}};
}else{c.addEventListener("load",b,false);
}c.load(a);
},getValue:function(d,b,a){var c=(d!=null)?d[b]:null;
if(c==null){c=a;
}return c;
},getNumber:function(d,b,a){var c=(d!=null)?d[b]:null;
if(c==null){c=a||0;
}return Number(c);
},getColor:function(d,b,a){var c=(d!=null)?d[b]:null;
if(c==null){c=a;
}else{if(c==mxConstants.NONE){c=null;
}}return c;
},clone:function(d,b,c){c=(c!=null)?c:false;
var e=null;
if(d!=null&&typeof(d.constructor)=="function"){e=new d.constructor();
for(var a in d){if(a!=mxObjectIdentity.FIELD_NAME&&(b==null||mxUtils.indexOf(b,a)<0)){if(!c&&typeof(d[a])=="object"){e[a]=mxUtils.clone(d[a]);
}else{e[a]=d[a];
}}}}return e;
},equalPoints:function(d,c){if((d==null&&c!=null)||(d!=null&&c==null)||(d!=null&&c!=null&&d.length!=c.length)){return false;
}else{if(d!=null&&c!=null){for(var e=0;
e<d.length;
e++){if(d[e]==c[e]||(d[e]!=null&&!d[e].equals(c[e]))){return false;
}}}}return true;
},equalEntries:function(d,c){if((d==null&&c!=null)||(d!=null&&c==null)||(d!=null&&c!=null&&d.length!=c.length)){return false;
}else{if(d!=null&&c!=null){for(var e in d){if(d[e]!=c[e]){return false;
}}}}return true;
},extend:function(b,a){var c=function(){};
c.prototype=a.prototype;
b.prototype=new c();
b.prototype.constructor=b;
},toString:function(f){var a="";
for(var b in f){try{if(f[b]==null){a+=b+" = [null]\n";
}else{if(typeof(f[b])=="function"){a+=b+" => [Function]\n";
}else{if(typeof(f[b])=="object"){var c=mxUtils.getFunctionName(f[b].constructor);
a+=b+" => ["+c+"]\n";
}else{a+=b+" = "+f[b]+"\n";
}}}}catch(d){a+=b+"="+d.message;
}}return a;
},toRadians:function(a){return Math.PI*a/180;
},arcToCurves:function(z,a,u,s,B,E,H,P,O){P-=z;
O-=a;
if(u===0||s===0){return C;
}var U=H;
var Y=B;
u=Math.abs(u);
s=Math.abs(s);
var G=-P/2;
var F=-O/2;
var e=Math.cos(Y*Math.PI/180);
var K=Math.sin(Y*Math.PI/180);
var J=e*G+K*F;
var r=-1*K*G+e*F;
var q=J*J;
var k=r*r;
var I=u*u;
var o=s*s;
var ac=q/I+k/o;
var V;
if(ac>1){u=Math.sqrt(ac)*u;
s=Math.sqrt(ac)*s;
V=0;
}else{var m=1;
if(E===U){m=-1;
}V=m*Math.sqrt((I*o-I*k-o*q)/(I*k+o*q));
}var A=V*u*r/s;
var d=-1*V*s*J/u;
var X=e*A-K*d+P/2;
var W=K*A+e*d+O/2;
var g=Math.atan2((r-d)/s,(J-A)/u)-Math.atan2(0,1);
var Z=(g>=0)?g:2*Math.PI+g;
g=Math.atan2((-r-d)/s,(-J-A)/u)-Math.atan2((r-d)/s,(J-A)/u);
var l=(g>=0)?g:2*Math.PI+g;
if(U==0&&l>0){l-=2*Math.PI;
}else{if(U!=0&&l<0){l+=2*Math.PI;
}}var h=l*2/Math.PI;
var M=Math.ceil(h<0?-1*h:h);
var N=l/M;
var S=8/3*Math.sin(N/4)*Math.sin(N/4)/Math.sin(N/2);
var R=e*u;
var Q=e*s;
var c=K*u;
var b=K*s;
var D=Math.cos(Z);
var p=Math.sin(Z);
var w=-S*(R*p+b*D);
var ab=-S*(c*p-Q*D);
var v=0;
var aa=0;
var C=[];
for(var T=0;
T<M;
++T){Z+=N;
D=Math.cos(Z);
p=Math.sin(Z);
v=R*D-b*p+X;
aa=c*D+Q*p+W;
var i=-S*(R*p+b*D);
var f=-S*(c*p-Q*D);
var L=T*6;
C[L]=Number(w+z);
C[L+1]=Number(ab+a);
C[L+2]=Number(v-i+z);
C[L+3]=Number(aa-f+a);
C[L+4]=Number(v+z);
C[L+5]=Number(aa+a);
w=v+i;
ab=aa+f;
}return C;
},getBoundingBox:function(d,k){var l=null;
if(d!=null&&k!=null&&k!=0){var c=mxUtils.toRadians(k);
var i=Math.cos(c);
var b=Math.sin(c);
var a=new mxPoint(d.x+d.width/2,d.y+d.height/2);
var h=new mxPoint(d.x,d.y);
var g=new mxPoint(d.x+d.width,d.y);
var f=new mxPoint(g.x,d.y+d.height);
var e=new mxPoint(d.x,f.y);
h=mxUtils.getRotatedPoint(h,i,b,a);
g=mxUtils.getRotatedPoint(g,i,b,a);
f=mxUtils.getRotatedPoint(f,i,b,a);
e=mxUtils.getRotatedPoint(e,i,b,a);
l=new mxRectangle(h.x,h.y,0,0);
l.add(new mxRectangle(g.x,g.y,0,0));
l.add(new mxRectangle(f.x,f.y,0,0));
l.add(new mxRectangle(e.x,e.y,0,0));
}return l;
},getRotatedPoint:function(g,f,b,i){i=(i!=null)?i:new mxPoint();
var a=g.x-i.x;
var h=g.y-i.y;
var d=a*f-h*b;
var e=h*f+a*b;
return new mxPoint(d+i.x,e+i.y);
},getPortConstraints:function(b,d,f,a){var e=mxUtils.getValue(b.style,mxConstants.STYLE_PORT_CONSTRAINT,null);
if(e==null){return a;
}else{var g=e.toString();
var c=mxConstants.DIRECTION_MASK_NONE;
if(g.indexOf(mxConstants.DIRECTION_NORTH)>=0){c|=mxConstants.DIRECTION_MASK_NORTH;
}if(g.indexOf(mxConstants.DIRECTION_WEST)>=0){c|=mxConstants.DIRECTION_MASK_WEST;
}if(g.indexOf(mxConstants.DIRECTION_SOUTH)>=0){c|=mxConstants.DIRECTION_MASK_SOUTH;
}if(g.indexOf(mxConstants.DIRECTION_EAST)>=0){c|=mxConstants.DIRECTION_MASK_EAST;
}return c;
}},reversePortConstraints:function(b){var a=0;
a=(b&mxConstants.DIRECTION_MASK_WEST)<<3;
a|=(b&mxConstants.DIRECTION_MASK_NORTH)<<1;
a|=(b&mxConstants.DIRECTION_MASK_SOUTH)>>1;
a|=(b&mxConstants.DIRECTION_MASK_EAST)>>3;
return a;
},findNearestSegment:function(a,h,g){var d=-1;
if(a.absolutePoints.length>0){var k=a.absolutePoints[0];
var b=null;
for(var c=1;
c<a.absolutePoints.length;
c++){var e=a.absolutePoints[c];
var f=mxUtils.ptSegDistSq(k.x,k.y,e.x,e.y,h,g);
if(b==null||f<b){b=f;
d=c-1;
}k=e;
}}return d;
},rectangleIntersectsSegment:function(d,q,o){var m=d.y;
var h=d.x;
var e=m+d.height;
var p=h+d.width;
var i=q.x;
var f=o.x;
if(q.x>o.x){i=o.x;
f=q.x;
}if(f>p){f=p;
}if(i<h){i=h;
}if(i>f){return false;
}var g=q.y;
var c=o.y;
var r=o.x-q.x;
if(Math.abs(r)>1e-7){var n=(o.y-q.y)/r;
var l=q.y-n*q.x;
g=n*i+l;
c=n*f+l;
}if(g>c){var k=c;
c=g;
g=k;
}if(c>e){c=e;
}if(g<m){g=m;
}if(g>c){return false;
}return true;
},contains:function(b,a,c){return(b.x<=a&&b.x+b.width>=a&&b.y<=c&&b.y+b.height>=c);
},intersects:function(l,k){var i=l.width;
var e=l.height;
var f=k.width;
var m=k.height;
if(f<=0||m<=0||i<=0||e<=0){return false;
}var h=l.x;
var g=l.y;
var d=k.x;
var c=k.y;
f+=d;
m+=c;
i+=h;
e+=g;
return((f<d||f>h)&&(m<c||m>g)&&(i<h||i>d)&&(e<g||e>c));
},intersectsHotspot:function(a,m,k,b,f,l){b=(b!=null)?b:1;
f=(f!=null)?f:0;
l=(l!=null)?l:0;
if(b>0){var e=a.getCenterX();
var d=a.getCenterY();
var n=a.width;
var g=a.height;
var c=mxUtils.getValue(a.style,mxConstants.STYLE_STARTSIZE)*a.view.scale;
if(c>0){if(mxUtils.getValue(a.style,mxConstants.STYLE_HORIZONTAL,true)){d=a.y+c/2;
g=c;
}else{e=a.x+c/2;
n=c;
}}n=Math.max(f,n*b);
g=Math.max(f,g*b);
if(l>0){n=Math.min(n,l);
g=Math.min(g,l);
}var i=new mxRectangle(e-n/2,d-g/2,n,g);
return mxUtils.contains(i,m,k);
}return true;
},getOffset:function(c,e){var g=0;
var f=0;
if(e!=null&&e){var a=document.body;
var h=document.documentElement;
g+=(a.scrollLeft||h.scrollLeft);
f+=(a.scrollTop||h.scrollTop);
}while(c.offsetParent){g+=c.offsetLeft;
f+=c.offsetTop;
c=c.offsetParent;
}return new mxPoint(g,f);
},getScrollOrigin:function(g){var e=document.body;
var h=document.documentElement;
var c=(e.scrollLeft||h.scrollLeft);
var f=(e.scrollTop||h.scrollTop);
var a=new mxPoint(c,f);
while(g!=null&&g!=e&&g!=h){if(!isNaN(g.scrollLeft)&&!isNaN(g.scrollTop)){a.x+=g.scrollLeft;
a.y+=g.scrollTop;
}g=g.parentNode;
}return a;
},convertPoint:function(b,a,e){var c=mxUtils.getScrollOrigin(b);
var d=mxUtils.getOffset(b);
d.x-=c.x;
d.y-=c.y;
return new mxPoint(a-d.x,e-d.y);
},ltrim:function(b,a){a=a||"\\s";
return b.replace(new RegExp("^["+a+"]+","g"),"");
},rtrim:function(b,a){a=a||"\\s";
return b.replace(new RegExp("["+a+"]+$","g"),"");
},trim:function(b,a){return mxUtils.ltrim(mxUtils.rtrim(b,a),a);
},isNumeric:function(a){return a!=null&&(a.length==null||(a.length>0&&a.indexOf("0x")<0)&&a.indexOf("0X")<0)&&!isNaN(a);
},mod:function(b,a){return((b%a)+a)%a;
},intersection:function(f,p,e,n,d,l,b,k){var i=((k-l)*(e-f))-((b-d)*(n-p));
var o=((b-d)*(p-l))-((k-l)*(f-d));
var m=((e-f)*(p-l))-((n-p)*(f-d));
var c=o/i;
var a=m/i;
if(c>=0&&c<=1&&a>=0&&a<=1){var h=f+c*(e-f);
var g=p+c*(n-p);
return new mxPoint(h,g);
}return null;
},ptSegDistSq:function(c,g,b,e,i,h){b-=c;
e-=g;
i-=c;
h-=g;
var f=i*b+h*e;
var a;
if(f<=0){a=0;
}else{i=b-i;
h=e-h;
f=i*b+h*e;
if(f<=0){a=0;
}else{a=f*f/(b*b+e*e);
}}var d=i*i+h*h-a;
if(d<0){d=0;
}return d;
},relativeCcw:function(d,g,b,f,e,c){b-=d;
f-=g;
e-=d;
c-=g;
var a=e*f-c*b;
if(a==0){a=e*b+c*f;
if(a>0){e-=b;
c-=f;
a=e*b+c*f;
if(a<0){a=0;
}}}return(a<0)?-1:((a>0)?1:0);
},animateChanges:function(b,a){mxEffects.animateChanges.apply(this,arguments);
},cascadeOpacity:function(c,a,b){mxEffects.cascadeOpacity.apply(this,arguments);
},fadeOut:function(e,f,a,d,b,c){mxEffects.fadeOut.apply(this,arguments);
},setOpacity:function(a,b){if(mxUtils.isVml(a)){if(b>=100){a.style.filter=null;
}else{a.style.filter="alpha(opacity="+(b/5)+")";
}}else{if(mxClient.IS_IE&&(typeof(document.documentMode)==="undefined"||document.documentMode<9)){if(b>=100){a.style.filter=null;
}else{a.style.filter="alpha(opacity="+b+")";
}}else{a.style.opacity=(b/100);
}}},createImage:function(b){var a=null;
if(mxClient.IS_IE6&&document.compatMode!="CSS1Compat"){a=document.createElement("v:image");
a.setAttribute("src",b);
a.style.borderStyle="none";
}else{a=document.createElement("img");
a.setAttribute("src",b);
a.setAttribute("border","0");
}return a;
},sortCells:function(a,b){b=(b!=null)?b:true;
var c=new mxDictionary();
a.sort(function(f,e){var h=c.get(f);
if(h==null){h=mxCellPath.create(f).split(mxCellPath.PATH_SEPARATOR);
c.put(f,h);
}var g=c.get(e);
if(g==null){g=mxCellPath.create(e).split(mxCellPath.PATH_SEPARATOR);
c.put(e,g);
}var d=mxCellPath.compare(h,g);
return(d==0)?0:(((d>0)==b)?1:-1);
});
return a;
},getStylename:function(a){if(a!=null){var c=a.split(";");
var b=c[0];
if(b.indexOf("=")<0){return b;
}}return"";
},getStylenames:function(c){var a=[];
if(c!=null){var d=c.split(";");
for(var b=0;
b<d.length;
b++){if(d[b].indexOf("=")<0){a.push(d[b]);
}}}return a;
},indexOfStylename:function(b,c){if(b!=null&&c!=null){var d=b.split(";");
var e=0;
for(var a=0;
a<d.length;
a++){if(d[a]==c){return e;
}e+=d[a].length+1;
}}return -1;
},addStylename:function(a,b){if(mxUtils.indexOfStylename(a,b)<0){if(a==null){a="";
}else{if(a.length>0&&a.charAt(a.length-1)!=";"){a+=";";
}}a+=b;
}return a;
},removeStylename:function(c,d){var a=[];
if(c!=null){var e=c.split(";");
for(var b=0;
b<e.length;
b++){if(e[b]!=d){a.push(e[b]);
}}}return a.join(";");
},removeAllStylenames:function(c){var a=[];
if(c!=null){var d=c.split(";");
for(var b=0;
b<d.length;
b++){if(d[b].indexOf("=")>=0){a.push(d[b]);
}}}return a.join(";");
},setCellStyles:function(b,a,d,f){if(a!=null&&a.length>0){b.beginUpdate();
try{for(var c=0;
c<a.length;
c++){if(a[c]!=null){var e=mxUtils.setStyle(b.getStyle(a[c]),d,f);
b.setStyle(a[c],e);
}}}finally{b.endUpdate();
}}},setStyle:function(f,e,g){var h=g!=null&&(typeof(g.length)=="undefined"||g.length>0);
if(f==null||f.length==0){if(h){f=e+"="+g;
}}else{var c=f.indexOf(e+"=");
if(c<0){if(h){var b=(f.charAt(f.length-1)==";")?"":";";
f=f+b+e+"="+g;
}}else{var d=(h)?(e+"="+g):"";
var a=f.indexOf(";",c);
if(!h){a++;
}f=f.substring(0,c)+d+((a>c)?f.substring(a):"");
}}return f;
},setCellStyleFlags:function(c,b,e,a,g){if(b!=null&&b.length>0){c.beginUpdate();
try{for(var d=0;
d<b.length;
d++){if(b[d]!=null){var f=mxUtils.setStyleFlag(c.getStyle(b[d]),e,a,g);
c.setStyle(b[d],f);
}}}finally{c.endUpdate();
}}},setStyleFlag:function(g,f,b,h){if(g==null||g.length==0){if(h||h==null){g=f+"="+b;
}else{g=f+"=0";
}}else{var d=g.indexOf(f+"=");
if(d<0){var c=(g.charAt(g.length-1)==";")?"":";";
if(h||h==null){g=g+c+f+"="+b;
}else{g=g+c+f+"=0";
}}else{var a=g.indexOf(";",d);
var e="";
if(a<0){e=g.substring(d+f.length+1);
}else{e=g.substring(d+f.length+1,a);
}if(h==null){e=parseInt(e)^b;
}else{if(h){e=parseInt(e)|b;
}else{e=parseInt(e)&~b;
}}g=g.substring(0,d)+f+"="+e+((a>=0)?g.substring(a):"");
}}return g;
},getSizeForString:function(d,c,a){var e=document.createElement("div");
e.style.fontSize=(c||mxConstants.DEFAULT_FONTSIZE)+"px";
e.style.fontFamily=a||mxConstants.DEFAULT_FONTFAMILY;
e.style.position="absolute";
e.style.display="inline";
e.style.visibility="hidden";
e.innerHTML=d;
document.body.appendChild(e);
var b=new mxRectangle(0,0,e.offsetWidth,e.offsetHeight);
document.body.removeChild(e);
return b;
},getViewXml:function(l,c,n,a,i){a=(a!=null)?a:0;
i=(i!=null)?i:0;
c=(c!=null)?c:1;
if(n==null){var e=l.getModel();
n=[e.getRoot()];
}var g=l.getView();
var o=null;
var f=g.isEventsEnabled();
g.setEventsEnabled(false);
var h=g.drawPane;
var m=g.overlayPane;
if(l.dialect==mxConstants.DIALECT_SVG){g.drawPane=document.createElementNS(mxConstants.NS_SVG,"g");
g.canvas.appendChild(g.drawPane);
g.overlayPane=document.createElementNS(mxConstants.NS_SVG,"g");
g.canvas.appendChild(g.overlayPane);
}else{g.drawPane=g.drawPane.cloneNode(false);
g.canvas.appendChild(g.drawPane);
g.overlayPane=g.overlayPane.cloneNode(false);
g.canvas.appendChild(g.overlayPane);
}var b=g.getTranslate();
g.translate=new mxPoint(a,i);
var k=new mxTemporaryCellStates(l.getView(),c,n);
try{var d=new mxCodec();
o=d.encode(l.getView());
}finally{k.destroy();
g.translate=b;
g.canvas.removeChild(g.drawPane);
g.canvas.removeChild(g.overlayPane);
g.drawPane=h;
g.overlayPane=m;
g.setEventsEnabled(f);
}return o;
},getScaleForPageCount:function(s,g,t,u){if(s<1){return 1;
}t=(t!=null)?t:mxConstants.PAGE_FORMAT_A4_PORTRAIT;
u=(u!=null)?u:0;
var r=t.width-(u*2);
var c=t.height-(u*2);
var h=g.getGraphBounds().clone();
var e=g.getView().getScale();
h.width/=e;
h.height/=e;
var m=h.width;
var o=h.height;
var x=1;
var k=r/c;
var v=m/o;
var p=v/k;
var b=Math.sqrt(s);
var a=Math.sqrt(p);
var f=b*a;
var n=b/a;
if(f<1&&n>s){var y=n/s;
n=s;
f/=y;
}if(n<1&&f>s){var y=f/s;
f=s;
n/=y;
}var d=Math.ceil(f)*Math.ceil(n);
var l=0;
while(d>s){var w=Math.floor(f)/f;
var i=Math.floor(n)/n;
if(w==1){w=Math.floor(f-1)/f;
}if(i==1){i=Math.floor(n-1)/n;
}var y=1;
if(w>i){y=w;
}else{y=i;
}f=f*y;
n=n*y;
d=Math.ceil(f)*Math.ceil(n);
l++;
if(l>10){break;
}}var q=r*f;
x=q/m;
return x*0.99999;
},show:function(q,n,c,o){c=(c!=null)?c:0;
o=(o!=null)?o:0;
if(n==null){var f=window.open();
n=f.document;
}else{n.open();
}var a=q.getGraphBounds();
var t=-a.x+c;
var s=-a.y+o;
if(mxClient.IS_IE){var h="<html>";
h+="<head>";
var b=document.getElementsByTagName("base");
for(var g=0;
g<b.length;
g++){h+=b[g].outerHTML;
}h+="<style>";
for(var g=0;
g<document.styleSheets.length;
g++){try{h+=document.styleSheets(g).cssText;
}catch(k){}}h+="</style>";
h+="</head>";
h+="<body>";
h+=q.container.innerHTML;
h+="</body>";
h+="<html>";
n.writeln(h);
n.close();
var d=n.body.getElementsByTagName("DIV")[0];
if(d!=null){d.style.position="absolute";
d.style.left=t+"px";
d.style.top=s+"px";
}}else{n.writeln("<html");
n.writeln("<head>");
var b=document.getElementsByTagName("base");
for(var g=0;
g<b.length;
g++){n.writeln(mxUtils.getOuterHtml(b[g]));
}var p=document.getElementsByTagName("link");
for(var g=0;
g<p.length;
g++){n.writeln(mxUtils.getOuterHtml(p[g]));
}var r=document.getElementsByTagName("style");
for(var g=0;
g<r.length;
g++){n.writeln(mxUtils.getOuterHtml(r[g]));
}n.writeln("</head>");
n.writeln("</html>");
n.close();
if(n.body==null){n.documentElement.appendChild(n.createElement("body"));
}n.body.style.overflow="auto";
var d=q.container.firstChild;
while(d!=null){var l=d.cloneNode(true);
n.body.appendChild(l);
d=d.nextSibling;
}var d=n.getElementsByTagName("g")[0];
if(d!=null){d.setAttribute("transform","translate("+t+","+s+")");
var m=d.ownerSVGElement;
m.setAttribute("width",a.width+Math.max(a.x,0)+3);
m.setAttribute("height",a.height+Math.max(a.y,0)+3);
}}mxUtils.removeCursors(n.body);
return n;
},printScreen:function(c){var b=window.open();
mxUtils.show(c,b.document);
var a=function(){b.focus();
b.print();
b.close();
};
if(mxClient.IS_GC){b.setTimeout(a,500);
}else{a();
}},popup:function(d,g){if(g){var f=document.createElement("div");
f.style.overflow="scroll";
f.style.width="636px";
f.style.height="460px";
var e=document.createElement("pre");
e.innerHTML=mxUtils.htmlEntities(d,false).replace(/\n/g,"<br>").replace(/ /g,"&nbsp;");
f.appendChild(e);
var a=document.body.clientWidth;
var b=(document.body.clientHeight||document.documentElement.clientHeight);
var c=new mxWindow("Popup Window",f,a/2-320,b/2-240,640,480,false,true);
c.setClosable(true);
c.setVisible(true);
}else{if(mxClient.IS_NS){var c=window.open();
c.document.writeln("<pre>"+mxUtils.htmlEntities(d)+"</pre");
c.document.close();
}else{var c=window.open();
var e=c.document.createElement("pre");
e.innerHTML=mxUtils.htmlEntities(d,false).replace(/\n/g,"<br>").replace(/ /g,"&nbsp;");
c.document.body.appendChild(e);
}}},alert:function(a){alert(a);
},prompt:function(b,a){return prompt(b,a);
},confirm:function(a){return confirm(a);
},error:function(m,b,l,i){var a=document.createElement("div");
a.style.padding="20px";
var d=document.createElement("img");
d.setAttribute("src",i||mxUtils.errorImage);
d.setAttribute("valign","bottom");
d.style.verticalAlign="middle";
a.appendChild(d);
a.appendChild(document.createTextNode("\u00a0"));
a.appendChild(document.createTextNode("\u00a0"));
a.appendChild(document.createTextNode("\u00a0"));
mxUtils.write(a,m);
var k=document.body.clientWidth;
var f=(document.body.clientHeight||document.documentElement.clientHeight);
var g=new mxWindow(mxResources.get(mxUtils.errorResource)||mxUtils.errorResource,a,(k-b)/2,f/4,b,null,false,true);
if(l){mxUtils.br(a);
var c=document.createElement("p");
var e=document.createElement("button");
if(mxClient.IS_IE){e.style.cssText="float:right";
}else{e.setAttribute("style","float:right");
}mxEvent.addListener(e,"click",function(h){g.destroy();
});
mxUtils.write(e,mxResources.get(mxUtils.closeResource)||mxUtils.closeResource);
c.appendChild(e);
a.appendChild(c);
mxUtils.br(a);
g.setClosable(true);
}g.setVisible(true);
return g;
},makeDraggable:function(e,f,b,a,l,k,i,h,d,g){var c=new mxDragSource(e,b);
c.dragOffset=new mxPoint((l!=null)?l:0,(k!=null)?k:mxConstants.TOOLTIP_VERTICAL_OFFSET);
c.autoscroll=i;
c.setGuidesEnabled(false);
if(d!=null){c.highlightDropTargets=d;
}if(g!=null){c.getDropTarget=g;
}c.getGraphForEvent=function(m){return(typeof(f)=="function")?f(m):f;
};
if(a!=null){c.createDragElement=function(){return a.cloneNode(true);
};
if(h){c.createPreviewElement=function(p){var n=a.cloneNode(true);
var m=parseInt(n.style.width);
var o=parseInt(n.style.height);
n.style.width=Math.round(m*p.view.scale)+"px";
n.style.height=Math.round(o*p.view.scale)+"px";
return n;
};
}}return c;
}};
var mxConstants={DEFAULT_HOTSPOT:0.3,MIN_HOTSPOT_SIZE:8,MAX_HOTSPOT_SIZE:0,RENDERING_HINT_EXACT:"exact",RENDERING_HINT_FASTER:"faster",RENDERING_HINT_FASTEST:"fastest",DIALECT_SVG:"svg",DIALECT_VML:"vml",DIALECT_MIXEDHTML:"mixedHtml",DIALECT_PREFERHTML:"preferHtml",DIALECT_STRICTHTML:"strictHtml",NS_SVG:"http://www.w3.org/2000/svg",NS_XHTML:"http://www.w3.org/1999/xhtml",NS_XLINK:"http://www.w3.org/1999/xlink",SHADOWCOLOR:"gray",SHADOW_OFFSET_X:2,SHADOW_OFFSET_Y:3,SHADOW_OPACITY:1,NODETYPE_ELEMENT:1,NODETYPE_ATTRIBUTE:2,NODETYPE_TEXT:3,NODETYPE_CDATA:4,NODETYPE_ENTITY_REFERENCE:5,NODETYPE_ENTITY:6,NODETYPE_PROCESSING_INSTRUCTION:7,NODETYPE_COMMENT:8,NODETYPE_DOCUMENT:9,NODETYPE_DOCUMENTTYPE:10,NODETYPE_DOCUMENT_FRAGMENT:11,NODETYPE_NOTATION:12,TOOLTIP_VERTICAL_OFFSET:16,DEFAULT_VALID_COLOR:"#00FF00",DEFAULT_INVALID_COLOR:"#FF0000",HIGHLIGHT_STROKEWIDTH:3,CURSOR_MOVABLE_VERTEX:"move",CURSOR_MOVABLE_EDGE:"move",CURSOR_LABEL_HANDLE:"default",CURSOR_BEND_HANDLE:"pointer",CURSOR_CONNECT:"pointer",HIGHLIGHT_COLOR:"#00FF00",CONNECT_TARGET_COLOR:"#0000FF",INVALID_CONNECT_TARGET_COLOR:"#FF0000",DROP_TARGET_COLOR:"#0000FF",VALID_COLOR:"#00FF00",INVALID_COLOR:"#FF0000",EDGE_SELECTION_COLOR:"#00FF00",VERTEX_SELECTION_COLOR:"#00FF00",VERTEX_SELECTION_STROKEWIDTH:1,EDGE_SELECTION_STROKEWIDTH:1,VERTEX_SELECTION_DASHED:true,EDGE_SELECTION_DASHED:true,GUIDE_COLOR:"#FF0000",GUIDE_STROKEWIDTH:1,OUTLINE_COLOR:"#0099FF",OUTLINE_STROKEWIDTH:(mxClient.IS_IE)?2:3,HANDLE_SIZE:7,LABEL_HANDLE_SIZE:4,HANDLE_FILLCOLOR:"#00FF00",HANDLE_STROKECOLOR:"black",LABEL_HANDLE_FILLCOLOR:"yellow",CONNECT_HANDLE_FILLCOLOR:"#0000FF",LOCKED_HANDLE_FILLCOLOR:"#FF0000",OUTLINE_HANDLE_FILLCOLOR:"#00FFFF",OUTLINE_HANDLE_STROKECOLOR:"#0033FF",DEFAULT_FONTFAMILY:"Arial,Helvetica",DEFAULT_FONTSIZE:11,DEFAULT_STARTSIZE:40,DEFAULT_MARKERSIZE:6,DEFAULT_IMAGESIZE:24,ENTITY_SEGMENT:30,RECTANGLE_ROUNDING_FACTOR:0.15,LINE_ARCSIZE:20,ARROW_SPACING:10,ARROW_WIDTH:30,ARROW_SIZE:30,PAGE_FORMAT_A4_PORTRAIT:new mxRectangle(0,0,826,1169),PAGE_FORMAT_A4_LANDSCAPE:new mxRectangle(0,0,1169,826),PAGE_FORMAT_LETTER_PORTRAIT:new mxRectangle(0,0,850,1100),PAGE_FORMAT_LETTER_LANDSCAPE:new mxRectangle(0,0,1100,850),NONE:"none",STYLE_PERIMETER:"perimeter",STYLE_SOURCE_PORT:"sourcePort",STYLE_TARGET_PORT:"targetPort",STYLE_PORT_CONSTRAINT:"portConstraint",STYLE_OPACITY:"opacity",STYLE_TEXT_OPACITY:"textOpacity",STYLE_OVERFLOW:"overflow",STYLE_ORTHOGONAL:"orthogonal",STYLE_EXIT_X:"exitX",STYLE_EXIT_Y:"exitY",STYLE_EXIT_PERIMETER:"exitPerimeter",STYLE_ENTRY_X:"entryX",STYLE_ENTRY_Y:"entryY",STYLE_ENTRY_PERIMETER:"entryPerimeter",STYLE_WHITE_SPACE:"whiteSpace",STYLE_ROTATION:"rotation",STYLE_FILLCOLOR:"fillColor",STYLE_GRADIENTCOLOR:"gradientColor",STYLE_GRADIENT_DIRECTION:"gradientDirection",STYLE_STROKECOLOR:"strokeColor",STYLE_SEPARATORCOLOR:"separatorColor",STYLE_STROKEWIDTH:"strokeWidth",STYLE_ALIGN:"align",STYLE_VERTICAL_ALIGN:"verticalAlign",STYLE_LABEL_POSITION:"labelPosition",STYLE_VERTICAL_LABEL_POSITION:"verticalLabelPosition",STYLE_IMAGE_ASPECT:"imageAspect",STYLE_IMAGE_ALIGN:"imageAlign",STYLE_IMAGE_VERTICAL_ALIGN:"imageVerticalAlign",STYLE_GLASS:"glass",STYLE_IMAGE:"image",STYLE_IMAGE_WIDTH:"imageWidth",STYLE_IMAGE_HEIGHT:"imageHeight",STYLE_IMAGE_BACKGROUND:"imageBackground",STYLE_IMAGE_BORDER:"imageBorder",STYLE_IMAGE_FLIPH:"imageFlipH",STYLE_IMAGE_FLIPV:"imageFlipV",STYLE_STENCIL_FLIPH:"stencilFlipH",STYLE_STENCIL_FLIPV:"stencilFlipV",STYLE_NOLABEL:"noLabel",STYLE_NOEDGESTYLE:"noEdgeStyle",STYLE_LABEL_BACKGROUNDCOLOR:"labelBackgroundColor",STYLE_LABEL_BORDERCOLOR:"labelBorderColor",STYLE_LABEL_PADDING:"labelPadding",STYLE_INDICATOR_SHAPE:"indicatorShape",STYLE_INDICATOR_IMAGE:"indicatorImage",STYLE_INDICATOR_COLOR:"indicatorColor",STYLE_INDICATOR_STROKECOLOR:"indicatorStrokeColor",STYLE_INDICATOR_GRADIENTCOLOR:"indicatorGradientColor",STYLE_INDICATOR_SPACING:"indicatorSpacing",STYLE_INDICATOR_WIDTH:"indicatorWidth",STYLE_INDICATOR_HEIGHT:"indicatorHeight",STYLE_INDICATOR_DIRECTION:"indicatorDirection",STYLE_SHADOW:"shadow",STYLE_SEGMENT:"segment",STYLE_ENDARROW:"endArrow",STYLE_STARTARROW:"startArrow",STYLE_ENDSIZE:"endSize",STYLE_STARTSIZE:"startSize",STYLE_ENDFILL:"endFill",STYLE_STARTFILL:"startFill",STYLE_DASHED:"dashed",STYLE_DASH_PATTERN:"dashPattern",STYLE_ROUNDED:"rounded",STYLE_CURVED:"curved",STYLE_ARCSIZE:"arcSize",STYLE_SMOOTH:"smooth",STYLE_SOURCE_PERIMETER_SPACING:"sourcePerimeterSpacing",STYLE_TARGET_PERIMETER_SPACING:"targetPerimeterSpacing",STYLE_PERIMETER_SPACING:"perimeterSpacing",STYLE_SPACING:"spacing",STYLE_SPACING_TOP:"spacingTop",STYLE_SPACING_LEFT:"spacingLeft",STYLE_SPACING_BOTTOM:"spacingBottom",STYLE_SPACING_RIGHT:"spacingRight",STYLE_HORIZONTAL:"horizontal",STYLE_DIRECTION:"direction",STYLE_ELBOW:"elbow",STYLE_FONTCOLOR:"fontColor",STYLE_FONTFAMILY:"fontFamily",STYLE_FONTSIZE:"fontSize",STYLE_FONTSTYLE:"fontStyle",STYLE_AUTOSIZE:"autosize",STYLE_FOLDABLE:"foldable",STYLE_EDITABLE:"editable",STYLE_BENDABLE:"bendable",STYLE_MOVABLE:"movable",STYLE_RESIZABLE:"resizable",STYLE_CLONEABLE:"cloneable",STYLE_DELETABLE:"deletable",STYLE_SHAPE:"shape",STYLE_EDGE:"edgeStyle",STYLE_LOOP:"loopStyle",STYLE_ROUTING_CENTER_X:"routingCenterX",STYLE_ROUTING_CENTER_Y:"routingCenterY",FONT_BOLD:1,FONT_ITALIC:2,FONT_UNDERLINE:4,FONT_SHADOW:8,SHAPE_RECTANGLE:"rectangle",SHAPE_ELLIPSE:"ellipse",SHAPE_DOUBLE_ELLIPSE:"doubleEllipse",SHAPE_RHOMBUS:"rhombus",SHAPE_LINE:"line",SHAPE_IMAGE:"image",SHAPE_ARROW:"arrow",SHAPE_LABEL:"label",SHAPE_CYLINDER:"cylinder",SHAPE_SWIMLANE:"swimlane",SHAPE_CONNECTOR:"connector",SHAPE_ACTOR:"actor",SHAPE_CLOUD:"cloud",SHAPE_TRIANGLE:"triangle",SHAPE_HEXAGON:"hexagon",ARROW_CLASSIC:"classic",ARROW_BLOCK:"block",ARROW_OPEN:"open",ARROW_OVAL:"oval",ARROW_DIAMOND:"diamond",ARROW_DIAMOND_THIN:"diamondThin",ALIGN_LEFT:"left",ALIGN_CENTER:"center",ALIGN_RIGHT:"right",ALIGN_TOP:"top",ALIGN_MIDDLE:"middle",ALIGN_BOTTOM:"bottom",DIRECTION_NORTH:"north",DIRECTION_SOUTH:"south",DIRECTION_EAST:"east",DIRECTION_WEST:"west",DIRECTION_MASK_NONE:0,DIRECTION_MASK_WEST:1,DIRECTION_MASK_NORTH:2,DIRECTION_MASK_SOUTH:4,DIRECTION_MASK_EAST:8,DIRECTION_MASK_ALL:15,ELBOW_VERTICAL:"vertical",ELBOW_HORIZONTAL:"horizontal",EDGESTYLE_ELBOW:"elbowEdgeStyle",EDGESTYLE_ENTITY_RELATION:"entityRelationEdgeStyle",EDGESTYLE_LOOP:"loopEdgeStyle",EDGESTYLE_SIDETOSIDE:"sideToSideEdgeStyle",EDGESTYLE_TOPTOBOTTOM:"topToBottomEdgeStyle",EDGESTYLE_ORTHOGONAL:"orthogonalEdgeStyle",EDGESTYLE_SEGMENT:"segmentEdgeStyle",PERIMETER_ELLIPSE:"ellipsePerimeter",PERIMETER_RECTANGLE:"rectanglePerimeter",PERIMETER_RHOMBUS:"rhombusPerimeter",PERIMETER_TRIANGLE:"trianglePerimeter"};
function mxEventObject(a){this.name=a;
this.properties=[];
for(var b=1;
b<arguments.length;
b+=2){if(arguments[b+1]!=null){this.properties[arguments[b]]=arguments[b+1];
}}}mxEventObject.prototype.name=null;
mxEventObject.prototype.properties=null;
mxEventObject.prototype.consumed=false;
mxEventObject.prototype.getName=function(){return this.name;
};
mxEventObject.prototype.getProperties=function(){return this.properties;
};
mxEventObject.prototype.getProperty=function(a){return this.properties[a];
};
mxEventObject.prototype.isConsumed=function(){return this.consumed;
};
mxEventObject.prototype.consume=function(){this.consumed=true;
};
function mxMouseEvent(a,b){this.evt=a;
this.state=b;
}mxMouseEvent.prototype.consumed=false;
mxMouseEvent.prototype.evt=null;
mxMouseEvent.prototype.graphX=null;
mxMouseEvent.prototype.graphY=null;
mxMouseEvent.prototype.state=null;
mxMouseEvent.prototype.getEvent=function(){return this.evt;
};
mxMouseEvent.prototype.getSource=function(){return mxEvent.getSource(this.evt);
};
mxMouseEvent.prototype.isSource=function(a){if(a!=null){var b=this.getSource();
while(b!=null){if(b==a.node){return true;
}b=b.parentNode;
}}return false;
};
mxMouseEvent.prototype.getX=function(){return mxEvent.getClientX(this.getEvent());
};
mxMouseEvent.prototype.getY=function(){return mxEvent.getClientY(this.getEvent());
};
mxMouseEvent.prototype.getGraphX=function(){return this.graphX;
};
mxMouseEvent.prototype.getGraphY=function(){return this.graphY;
};
mxMouseEvent.prototype.getState=function(){return this.state;
};
mxMouseEvent.prototype.getCell=function(){var a=this.getState();
if(a!=null){return a.cell;
}return null;
};
mxMouseEvent.prototype.isPopupTrigger=function(){return mxEvent.isPopupTrigger(this.getEvent());
};
mxMouseEvent.prototype.isConsumed=function(){return this.consumed;
};
mxMouseEvent.prototype.consume=function(a){a=(a!=null)?a:true;
if(a&&this.evt.preventDefault){this.evt.preventDefault();
}this.evt.returnValue=false;
this.consumed=true;
};
function mxEventSource(a){this.setEventSource(a);
}mxEventSource.prototype.eventListeners=null;
mxEventSource.prototype.eventsEnabled=true;
mxEventSource.prototype.eventSource=null;
mxEventSource.prototype.isEventsEnabled=function(){return this.eventsEnabled;
};
mxEventSource.prototype.setEventsEnabled=function(a){this.eventsEnabled=a;
};
mxEventSource.prototype.getEventSource=function(){return this.eventSource;
};
mxEventSource.prototype.setEventSource=function(a){this.eventSource=a;
};
mxEventSource.prototype.addListener=function(b,a){if(this.eventListeners==null){this.eventListeners=[];
}this.eventListeners.push(b);
this.eventListeners.push(a);
};
mxEventSource.prototype.removeListener=function(a){if(this.eventListeners!=null){var b=0;
while(b<this.eventListeners.length){if(this.eventListeners[b+1]==a){this.eventListeners.splice(b,2);
}else{b+=2;
}}}};
mxEventSource.prototype.fireEvent=function(a,e){if(this.eventListeners!=null&&this.isEventsEnabled()){if(a==null){a=new mxEventObject();
}if(e==null){e=this.getEventSource();
}if(e==null){e=this;
}var b=[e,a];
for(var d=0;
d<this.eventListeners.length;
d+=2){var c=this.eventListeners[d];
if(c==null||c==a.getName()){this.eventListeners[d+1].apply(this,b);
}}}};
var mxEvent={objects:[],addListener:function(){var a=function(d,c,b){if(d.mxListenerList==null){d.mxListenerList=[];
mxEvent.objects.push(d);
}var e={name:c,f:b};
d.mxListenerList.push(e);
};
if(window.addEventListener){return function(d,c,b){d.addEventListener(c,b,false);
a(d,c,b);
};
}else{return function(d,c,b){d.attachEvent("on"+c,b);
a(d,c,b);
};
}}(),removeListener:function(){var a=function(e,c,b){if(e.mxListenerList!=null){var g=e.mxListenerList.length;
for(var d=0;
d<g;
d++){var f=e.mxListenerList[d];
if(f.f==b){e.mxListenerList.splice(d,1);
break;
}}if(e.mxListenerList.length==0){e.mxListenerList=null;
}}};
if(window.removeEventListener){return function(d,c,b){d.removeEventListener(c,b,false);
a(d,c,b);
};
}else{return function(d,c,b){d.detachEvent("on"+c,b);
a(d,c,b);
};
}}(),removeAllListeners:function(a){var c=a.mxListenerList;
if(c!=null){while(c.length>0){var b=c[0];
mxEvent.removeListener(a,b.name,b.f);
}}},redirectMouseEvents:function(c,k,a,i,d,f,b){var g=function(m){return(typeof(a)=="function")?a(m):a;
};
var h=(mxClient.IS_TOUCH)?"touchstart":"mousedown";
var e=(mxClient.IS_TOUCH)?"touchmove":"mousemove";
var l=(mxClient.IS_TOUCH)?"touchend":"mouseup";
mxEvent.addListener(c,h,function(m){if(i!=null){i(m);
}else{if(!mxEvent.isConsumed(m)){k.fireMouseEvent(mxEvent.MOUSE_DOWN,new mxMouseEvent(m,g(m)));
}}});
mxEvent.addListener(c,e,function(m){if(d!=null){d(m);
}else{if(!mxEvent.isConsumed(m)){k.fireMouseEvent(mxEvent.MOUSE_MOVE,new mxMouseEvent(m,g(m)));
}}});
mxEvent.addListener(c,l,function(m){if(f!=null){f(m);
}else{if(!mxEvent.isConsumed(m)){k.fireMouseEvent(mxEvent.MOUSE_UP,new mxMouseEvent(m,g(m)));
}}});
mxEvent.addListener(c,"dblclick",function(m){if(b!=null){b(m);
}else{if(!mxEvent.isConsumed(m)){var n=g(m);
k.dblClick(m,(n!=null)?n.cell:null);
}}});
},release:function(d){if(d!=null){mxEvent.removeAllListeners(d);
var c=d.childNodes;
if(c!=null){var a=c.length;
for(var b=0;
b<a;
b+=1){mxEvent.release(c[b]);
}}}},addMouseWheelListener:function(a){if(a!=null){var c=function(d){if(d==null){d=window.event;
}var e=0;
if(mxClient.IS_NS&&!mxClient.IS_SF&&!mxClient.IS_GC){e=-d.detail/2;
}else{e=d.wheelDelta/120;
}if(e!=0){a(d,e>0);
}};
if(mxClient.IS_NS){var b=(mxClient.IS_SF||mxClient.IS_GC)?"mousewheel":"DOMMouseScroll";
mxEvent.addListener(window,b,c);
}else{mxEvent.addListener(document,"mousewheel",c);
}}},disableContextMenu:function(){if(mxClient.IS_IE&&(typeof(document.documentMode)==="undefined"||document.documentMode<9)){return function(a){mxEvent.addListener(a,"contextmenu",function(){return false;
});
};
}else{return function(a){a.setAttribute("oncontextmenu","return false;");
};
}}(),getSource:function(a){return(a.srcElement!=null)?a.srcElement:a.target;
},isConsumed:function(a){return a.isConsumed!=null&&a.isConsumed;
},isLeftMouseButton:function(a){return a.button==((mxClient.IS_IE&&(typeof(document.documentMode)==="undefined"||document.documentMode<9))?1:0);
},isRightMouseButton:function(a){return a.button==2;
},isPopupTrigger:function(a){return mxEvent.isRightMouseButton(a)||(mxEvent.isShiftDown(a)&&!mxEvent.isControlDown(a));
},isShiftDown:function(a){return(a!=null)?a.shiftKey:false;
},isAltDown:function(a){return(a!=null)?a.altKey:false;
},isControlDown:function(a){return(a!=null)?a.ctrlKey:false;
},isMetaDown:function(a){return(a!=null)?a.metaKey:false;
},getMainEvent:function(a){if((a.type=="touchstart"||a.type=="touchmove")&&a.touches!=null&&a.touches[0]!=null){a=a.touches[0];
}else{if(a.type=="touchend"&&a.changedTouches!=null&&a.changedTouches[0]!=null){a=a.changedTouches[0];
}}return a;
},getClientX:function(a){return mxEvent.getMainEvent(a).clientX;
},getClientY:function(a){return mxEvent.getMainEvent(a).clientY;
},consume:function(b,c,a){c=(c!=null)?c:true;
a=(a!=null)?a:true;
if(c){if(b.preventDefault){if(a){b.stopPropagation();
}b.preventDefault();
}else{if(a){b.cancelBubble=true;
}}}b.isConsumed=true;
b.returnValue=false;
},LABEL_HANDLE:-1,ROTATION_HANDLE:-2,MOUSE_DOWN:"mouseDown",MOUSE_MOVE:"mouseMove",MOUSE_UP:"mouseUp",ACTIVATE:"activate",RESIZE_START:"resizeStart",RESIZE:"resize",RESIZE_END:"resizeEnd",MOVE_START:"moveStart",MOVE:"move",MOVE_END:"moveEnd",PAN_START:"panStart",PAN:"pan",PAN_END:"panEnd",MINIMIZE:"minimize",NORMALIZE:"normalize",MAXIMIZE:"maximize",HIDE:"hide",SHOW:"show",CLOSE:"close",DESTROY:"destroy",REFRESH:"refresh",SIZE:"size",SELECT:"select",FIRED:"fired",GET:"get",RECEIVE:"receive",CONNECT:"connect",DISCONNECT:"disconnect",SUSPEND:"suspend",RESUME:"resume",MARK:"mark",SESSION:"session",ROOT:"root",POST:"post",OPEN:"open",SAVE:"save",BEFORE_ADD_VERTEX:"beforeAddVertex",ADD_VERTEX:"addVertex",AFTER_ADD_VERTEX:"afterAddVertex",DONE:"done",EXECUTE:"execute",BEGIN_UPDATE:"beginUpdate",END_UPDATE:"endUpdate",BEFORE_UNDO:"beforeUndo",UNDO:"undo",REDO:"redo",CHANGE:"change",NOTIFY:"notify",LAYOUT_CELLS:"layoutCells",CLICK:"click",SCALE:"scale",TRANSLATE:"translate",SCALE_AND_TRANSLATE:"scaleAndTranslate",UP:"up",DOWN:"down",ADD:"add",REMOVE:"remove",CLEAR:"clear",ADD_CELLS:"addCells",CELLS_ADDED:"cellsAdded",MOVE_CELLS:"moveCells",CELLS_MOVED:"cellsMoved",RESIZE_CELLS:"resizeCells",CELLS_RESIZED:"cellsResized",TOGGLE_CELLS:"toggleCells",CELLS_TOGGLED:"cellsToggled",ORDER_CELLS:"orderCells",CELLS_ORDERED:"cellsOrdered",REMOVE_CELLS:"removeCells",CELLS_REMOVED:"cellsRemoved",GROUP_CELLS:"groupCells",UNGROUP_CELLS:"ungroupCells",REMOVE_CELLS_FROM_PARENT:"removeCellsFromParent",FOLD_CELLS:"foldCells",CELLS_FOLDED:"cellsFolded",ALIGN_CELLS:"alignCells",LABEL_CHANGED:"labelChanged",CONNECT_CELL:"connectCell",CELL_CONNECTED:"cellConnected",SPLIT_EDGE:"splitEdge",FLIP_EDGE:"flipEdge",START_EDITING:"startEditing",ADD_OVERLAY:"addOverlay",REMOVE_OVERLAY:"removeOverlay",UPDATE_CELL_SIZE:"updateCellSize",ESCAPE:"escape",CLICK:"click",DOUBLE_CLICK:"doubleClick",START:"start",RESET:"reset"};
function mxXmlRequest(b,d,f,c,e,a){this.url=b;
this.params=d;
this.method=f||"POST";
this.async=(c!=null)?c:true;
this.username=e;
this.password=a;
}mxXmlRequest.prototype.url=null;
mxXmlRequest.prototype.params=null;
mxXmlRequest.prototype.method=null;
mxXmlRequest.prototype.async=null;
mxXmlRequest.prototype.binary=false;
mxXmlRequest.prototype.username=null;
mxXmlRequest.prototype.password=null;
mxXmlRequest.prototype.request=null;
mxXmlRequest.prototype.isBinary=function(){return this.binary;
};
mxXmlRequest.prototype.setBinary=function(a){this.binary=a;
};
mxXmlRequest.prototype.getText=function(){return this.request.responseText;
};
mxXmlRequest.prototype.isReady=function(){return this.request.readyState==4;
};
mxXmlRequest.prototype.getDocumentElement=function(){var a=this.getXml();
if(a!=null){return a.documentElement;
}return null;
};
mxXmlRequest.prototype.getXml=function(){var a=this.request.responseXML;
if(document.documentMode>=9||a==null||a.documentElement==null){a=mxUtils.parseXml(this.request.responseText);
}return a;
};
mxXmlRequest.prototype.getText=function(){return this.request.responseText;
};
mxXmlRequest.prototype.getStatus=function(){return this.request.status;
};
mxXmlRequest.prototype.create=function(){if(window.XMLHttpRequest){return function(){var a=new XMLHttpRequest();
if(this.isBinary()&&a.overrideMimeType){a.overrideMimeType("text/plain; charset=x-user-defined");
}return a;
};
}else{if(typeof(ActiveXObject)!="undefined"){return function(){return new ActiveXObject("Microsoft.XMLHTTP");
};
}}}();
mxXmlRequest.prototype.send=function(b,a){this.request=this.create();
if(this.request!=null){if(b!=null){this.request.onreadystatechange=mxUtils.bind(this,function(){if(this.isReady()){b(this);
this.onreadystatechaange=null;
}});
}this.request.open(this.method,this.url,this.async,this.username,this.password);
this.setRequestHeaders(this.request,this.params);
this.request.send(this.params);
}};
mxXmlRequest.prototype.setRequestHeaders=function(a,b){if(b!=null){a.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
}};
mxXmlRequest.prototype.simulate=function(m,g){m=m||document;
var d=null;
if(m==document){d=window.onbeforeunload;
window.onbeforeunload=null;
}var b=m.createElement("form");
b.setAttribute("method",this.method);
b.setAttribute("action",this.url);
if(g!=null){b.setAttribute("target",g);
}b.style.display="none";
b.style.visibility="hidden";
var c=(this.params.indexOf("&")>0)?this.params.split("&"):this.params.split();
for(var e=0;
e<c.length;
e++){var h=c[e].indexOf("=");
if(h>0){var a=c[e].substring(0,h);
var l=c[e].substring(h+1);
var k=m.createElement("textarea");
k.setAttribute("name",a);
l=l.replace(/\n/g,"&#xa;");
var f=m.createTextNode(l);
k.appendChild(f);
b.appendChild(k);
}}m.body.appendChild(b);
b.submit();
m.body.removeChild(b);
if(d!=null){window.onbeforeunload=d;
}};
var mxClipboard={STEPSIZE:10,insertCount:1,cells:null,isEmpty:function(){return mxClipboard.cells==null;
},cut:function(b,a){a=mxClipboard.copy(b,a);
mxClipboard.insertCount=0;
mxClipboard.removeCells(b,a);
return a;
},removeCells:function(b,a){b.removeCells(a);
},copy:function(c,b){b=b||c.getSelectionCells();
var a=c.getExportableCells(b);
mxClipboard.insertCount=1;
mxClipboard.cells=c.cloneCells(a);
return a;
},paste:function(c){if(mxClipboard.cells!=null){var a=c.getImportableCells(mxClipboard.cells);
var d=mxClipboard.insertCount*mxClipboard.STEPSIZE;
var b=c.getDefaultParent();
a=c.importCells(a,d,d,b);
mxClipboard.insertCount++;
c.setSelectionCells(a);
}}};
function mxWindow(g,e,h,f,b,i,c,k,d,a){if(e!=null){c=(c!=null)?c:true;
this.content=e;
this.init(h,f,b,i,a);
this.installMaximizeHandler();
this.installMinimizeHandler();
this.installCloseHandler();
this.setMinimizable(c);
this.setTitle(g);
if(k==null||k){this.installMoveHandler();
}if(d!=null&&d.parentNode!=null){d.parentNode.replaceChild(this.div,d);
}else{document.body.appendChild(this.div);
}}}mxWindow.prototype=new mxEventSource();
mxWindow.prototype.constructor=mxWindow;
mxWindow.prototype.closeImage=mxClient.imageBasePath+"/close.gif";
mxWindow.prototype.minimizeImage=mxClient.imageBasePath+"/minimize.gif";
mxWindow.prototype.normalizeImage=mxClient.imageBasePath+"/normalize.gif";
mxWindow.prototype.maximizeImage=mxClient.imageBasePath+"/maximize.gif";
mxWindow.prototype.resizeImage=mxClient.imageBasePath+"/resize.gif";
mxWindow.prototype.visible=false;
mxWindow.prototype.content=false;
mxWindow.prototype.minimumSize=new mxRectangle(0,0,50,40);
mxWindow.prototype.title=false;
mxWindow.prototype.content=false;
mxWindow.prototype.destroyOnClose=true;
mxWindow.prototype.init=function(h,g,b,i,a){a=(a!=null)?a:"mxWindow";
this.div=document.createElement("div");
this.div.className=a;
this.div.style.left=h+"px";
this.div.style.top=g+"px";
this.table=document.createElement("table");
this.table.className=a;
if(b!=null){if(!mxClient.IS_IE){this.div.style.width=b+"px";
}this.table.style.width=b+"px";
}if(i!=null){if(!mxClient.IS_IE){this.div.style.height=i+"px";
}this.table.style.height=i+"px";
}var c=document.createElement("tbody");
var e=document.createElement("tr");
this.title=document.createElement("td");
this.title.className=a+"Title";
e.appendChild(this.title);
c.appendChild(e);
e=document.createElement("tr");
this.td=document.createElement("td");
this.td.className=a+"Pane";
this.contentWrapper=document.createElement("div");
this.contentWrapper.className=a+"Pane";
this.contentWrapper.style.width="100%";
this.contentWrapper.appendChild(this.content);
if(mxClient.IS_IE||this.content.nodeName.toUpperCase()!="DIV"){this.contentWrapper.style.height="100%";
}this.td.appendChild(this.contentWrapper);
e.appendChild(this.td);
c.appendChild(e);
this.table.appendChild(c);
this.div.appendChild(this.table);
var d=mxUtils.bind(this,function(k){this.activate();
});
var f=(mxClient.IS_TOUCH)?"touchstart":"mousedown";
mxEvent.addListener(this.title,f,d);
mxEvent.addListener(this.table,f,d);
this.hide();
};
mxWindow.prototype.setTitle=function(b){var c=this.title.firstChild;
while(c!=null){var a=c.nextSibling;
if(c.nodeType==mxConstants.NODETYPE_TEXT){c.parentNode.removeChild(c);
}c=a;
}mxUtils.write(this.title,b||"");
};
mxWindow.prototype.setScrollable=function(a){if(navigator.userAgent.indexOf("Presto/2.5")<0){if(a){this.contentWrapper.style.overflow="auto";
}else{this.contentWrapper.style.overflow="hidden";
}}};
mxWindow.prototype.activate=function(){if(mxWindow.activeWindow!=this){var d=mxUtils.getCurrentStyle(this.getElement());
var b=(d!=null)?d.zIndex:3;
if(mxWindow.activeWindow){var a=mxWindow.activeWindow.getElement();
if(a!=null&&a.style!=null){a.style.zIndex=b;
}}var c=mxWindow.activeWindow;
this.getElement().style.zIndex=parseInt(b)+1;
mxWindow.activeWindow=this;
this.fireEvent(new mxEventObject(mxEvent.ACTIVATE,"previousWindow",c));
}};
mxWindow.prototype.getElement=function(){return this.div;
};
mxWindow.prototype.fit=function(){mxUtils.fit(this.div);
};
mxWindow.prototype.isResizable=function(){if(this.resize!=null){return this.resize.style.display!="none";
}return false;
};
mxWindow.prototype.setResizable=function(b){if(b){if(this.resize==null){this.resize=document.createElement("img");
this.resize.style.position="absolute";
this.resize.style.bottom="2px";
this.resize.style.right="2px";
this.resize.setAttribute("src",mxClient.imageBasePath+"/resize.gif");
this.resize.style.cursor="nw-resize";
var c=(mxClient.IS_TOUCH)?"touchstart":"mousedown";
var d=(mxClient.IS_TOUCH)?"touchmove":"mousemove";
var a=(mxClient.IS_TOUCH)?"touchend":"mouseup";
mxEvent.addListener(this.resize,c,mxUtils.bind(this,function(h){this.activate();
var g=mxEvent.getClientX(h);
var f=mxEvent.getClientY(h);
var l=this.div.offsetWidth;
var e=this.div.offsetHeight;
var k=mxUtils.bind(this,function(n){var o=mxEvent.getClientX(n)-g;
var m=mxEvent.getClientY(n)-f;
this.setSize(l+o,e+m);
this.fireEvent(new mxEventObject(mxEvent.RESIZE,"event",n));
mxEvent.consume(n);
});
var i=mxUtils.bind(this,function(m){mxEvent.removeListener(document,d,k);
mxEvent.removeListener(document,a,i);
this.fireEvent(new mxEventObject(mxEvent.RESIZE_END,"event",m));
mxEvent.consume(m);
});
mxEvent.addListener(document,d,k);
mxEvent.addListener(document,a,i);
this.fireEvent(new mxEventObject(mxEvent.RESIZE_START,"event",h));
mxEvent.consume(h);
}));
this.div.appendChild(this.resize);
}else{this.resize.style.display="inline";
}}else{if(this.resize!=null){this.resize.style.display="none";
}}};
mxWindow.prototype.setSize=function(b,a){b=Math.max(this.minimumSize.width,b);
a=Math.max(this.minimumSize.height,a);
if(!mxClient.IS_IE){this.div.style.width=b+"px";
this.div.style.height=a+"px";
}this.table.style.width=b+"px";
this.table.style.height=a+"px";
if(!mxClient.IS_IE){this.contentWrapper.style.height=(this.div.offsetHeight-this.title.offsetHeight-2)+"px";
}};
mxWindow.prototype.setMinimizable=function(a){this.minimize.style.display=(a)?"":"none";
};
mxWindow.prototype.getMinimumSize=function(){return new mxRectangle(0,0,0,this.title.offsetHeight);
};
mxWindow.prototype.installMinimizeHandler=function(){this.minimize=document.createElement("img");
this.minimize.setAttribute("src",this.minimizeImage);
this.minimize.setAttribute("align","right");
this.minimize.setAttribute("title","Minimize");
this.minimize.style.cursor="pointer";
this.minimize.style.marginRight="1px";
this.minimize.style.display="none";
this.title.appendChild(this.minimize);
var c=false;
var d=null;
var a=null;
var b=mxUtils.bind(this,function(f){this.activate();
if(!c){c=true;
this.minimize.setAttribute("src",this.normalizeImage);
this.minimize.setAttribute("title","Normalize");
this.contentWrapper.style.display="none";
d=this.maximize.style.display;
this.maximize.style.display="none";
a=this.table.style.height;
var g=this.getMinimumSize();
if(g.height>0){if(!mxClient.IS_IE){this.div.style.height=g.height+"px";
}this.table.style.height=g.height+"px";
}if(g.width>0){if(!mxClient.IS_IE){this.div.style.width=g.width+"px";
}this.table.style.width=g.width+"px";
}if(this.resize!=null){this.resize.style.visibility="hidden";
}this.fireEvent(new mxEventObject(mxEvent.MINIMIZE,"event",f));
}else{c=false;
this.minimize.setAttribute("src",this.minimizeImage);
this.minimize.setAttribute("title","Minimize");
this.contentWrapper.style.display="";
this.maximize.style.display=d;
if(!mxClient.IS_IE){this.div.style.height=a;
}this.table.style.height=a;
if(this.resize!=null){this.resize.style.visibility="";
}this.fireEvent(new mxEventObject(mxEvent.NORMALIZE,"event",f));
}mxEvent.consume(f);
});
var e=(mxClient.IS_TOUCH)?"touchstart":"mousedown";
mxEvent.addListener(this.minimize,e,b);
};
mxWindow.prototype.setMaximizable=function(a){this.maximize.style.display=(a)?"":"none";
};
mxWindow.prototype.installMaximizeHandler=function(){this.maximize=document.createElement("img");
this.maximize.setAttribute("src",this.maximizeImage);
this.maximize.setAttribute("align","right");
this.maximize.setAttribute("title","Maximize");
this.maximize.style.cursor="default";
this.maximize.style.marginLeft="1px";
this.maximize.style.cursor="pointer";
this.maximize.style.display="none";
this.title.appendChild(this.maximize);
var d=false;
var b=null;
var g=null;
var a=null;
var e=null;
var c=mxUtils.bind(this,function(h){this.activate();
if(this.maximize.style.display!="none"){if(!d){d=true;
this.maximize.setAttribute("src",this.normalizeImage);
this.maximize.setAttribute("title","Normalize");
this.contentWrapper.style.display="";
this.minimize.style.visibility="hidden";
b=parseInt(this.div.style.left);
g=parseInt(this.div.style.top);
a=this.table.style.height;
e=this.table.style.width;
this.div.style.left="0px";
this.div.style.top="0px";
if(!mxClient.IS_IE){this.div.style.height=(document.body.clientHeight-2)+"px";
this.div.style.width=(document.body.clientWidth-2)+"px";
}this.table.style.width=(document.body.clientWidth-2)+"px";
this.table.style.height=(document.body.clientHeight-2)+"px";
if(this.resize!=null){this.resize.style.visibility="hidden";
}if(!mxClient.IS_IE){var i=mxUtils.getCurrentStyle(this.contentWrapper);
if(i.overflow=="auto"||this.resize!=null){this.contentWrapper.style.height=(this.div.offsetHeight-this.title.offsetHeight-2)+"px";
}}this.fireEvent(new mxEventObject(mxEvent.MAXIMIZE,"event",h));
}else{d=false;
this.maximize.setAttribute("src",this.maximizeImage);
this.maximize.setAttribute("title","Maximize");
this.contentWrapper.style.display="";
this.minimize.style.visibility="";
this.div.style.left=b+"px";
this.div.style.top=g+"px";
if(!mxClient.IS_IE){this.div.style.height=a;
this.div.style.width=e;
var i=mxUtils.getCurrentStyle(this.contentWrapper);
if(i.overflow=="auto"||this.resize!=null){this.contentWrapper.style.height=(this.div.offsetHeight-this.title.offsetHeight-2)+"px";
}}this.table.style.height=a;
this.table.style.width=e;
if(this.resize!=null){this.resize.style.visibility="";
}this.fireEvent(new mxEventObject(mxEvent.NORMALIZE,"event",h));
}mxEvent.consume(h);
}});
var f=(mxClient.IS_TOUCH)?"touchstart":"mousedown";
mxEvent.addListener(this.maximize,f,c);
mxEvent.addListener(this.title,"dblclick",c);
};
mxWindow.prototype.installMoveHandler=function(){this.title.style.cursor="move";
var b=(mxClient.IS_TOUCH)?"touchstart":"mousedown";
var c=(mxClient.IS_TOUCH)?"touchmove":"mousemove";
var a=(mxClient.IS_TOUCH)?"touchend":"mouseup";
mxEvent.addListener(this.title,b,mxUtils.bind(this,function(g){var f=mxEvent.getClientX(g);
var e=mxEvent.getClientY(g);
var d=this.getX();
var k=this.getY();
var i=mxUtils.bind(this,function(m){var n=mxEvent.getClientX(m)-f;
var l=mxEvent.getClientY(m)-e;
this.setLocation(d+n,k+l);
this.fireEvent(new mxEventObject(mxEvent.MOVE,"event",m));
mxEvent.consume(m);
});
var h=mxUtils.bind(this,function(l){mxEvent.removeListener(document,c,i);
mxEvent.removeListener(document,a,h);
this.fireEvent(new mxEventObject(mxEvent.MOVE_END,"event",l));
mxEvent.consume(l);
});
mxEvent.addListener(document,c,i);
mxEvent.addListener(document,a,h);
this.fireEvent(new mxEventObject(mxEvent.MOVE_START,"event",g));
mxEvent.consume(g);
}));
};
mxWindow.prototype.setLocation=function(a,b){this.div.style.left=a+"px";
this.div.style.top=b+"px";
};
mxWindow.prototype.getX=function(){return parseInt(this.div.style.left);
};
mxWindow.prototype.getY=function(){return parseInt(this.div.style.top);
};
mxWindow.prototype.installCloseHandler=function(){this.closeImg=document.createElement("img");
this.closeImg.setAttribute("src",this.closeImage);
this.closeImg.setAttribute("align","right");
this.closeImg.setAttribute("title","Close");
this.closeImg.style.marginLeft="2px";
this.closeImg.style.cursor="pointer";
this.closeImg.style.display="none";
this.title.insertBefore(this.closeImg,this.title.firstChild);
var a=(mxClient.IS_TOUCH)?"touchstart":"mousedown";
mxEvent.addListener(this.closeImg,a,mxUtils.bind(this,function(b){this.fireEvent(new mxEventObject(mxEvent.CLOSE,"event",b));
if(this.destroyOnClose){this.destroy();
}else{this.setVisible(false);
}mxEvent.consume(b);
}));
};
mxWindow.prototype.setImage=function(a){this.image=document.createElement("img");
this.image.setAttribute("src",a);
this.image.setAttribute("align","left");
this.image.style.marginRight="4px";
this.image.style.marginLeft="0px";
this.image.style.marginTop="-2px";
this.title.insertBefore(this.image,this.title.firstChild);
};
mxWindow.prototype.setClosable=function(a){this.closeImg.style.display=(a)?"":"none";
};
mxWindow.prototype.isVisible=function(){if(this.div!=null){return this.div.style.visibility!="hidden";
}return false;
};
mxWindow.prototype.setVisible=function(a){if(this.div!=null&&this.isVisible()!=a){if(a){this.show();
}else{this.hide();
}}};
mxWindow.prototype.show=function(){this.div.style.visibility="";
this.activate();
var a=mxUtils.getCurrentStyle(this.contentWrapper);
if(!mxClient.IS_IE&&(a.overflow=="auto"||this.resize!=null)){this.contentWrapper.style.height=(this.div.offsetHeight-this.title.offsetHeight-2)+"px";
}this.fireEvent(new mxEventObject(mxEvent.SHOW));
};
mxWindow.prototype.hide=function(){this.div.style.visibility="hidden";
this.fireEvent(new mxEventObject(mxEvent.HIDE));
};
mxWindow.prototype.destroy=function(){this.fireEvent(new mxEventObject(mxEvent.DESTROY));
if(this.div!=null){mxEvent.release(this.div);
this.div.parentNode.removeChild(this.div);
this.div=null;
}this.title=null;
this.content=null;
this.contentWrapper=null;
};
function mxForm(a){this.table=document.createElement("table");
this.table.className=a;
this.body=document.createElement("tbody");
this.table.appendChild(this.body);
}mxForm.prototype.table=null;
mxForm.prototype.body=false;
mxForm.prototype.getTable=function(){return this.table;
};
mxForm.prototype.addButtons=function(c,e){var b=document.createElement("tr");
var d=document.createElement("td");
b.appendChild(d);
d=document.createElement("td");
var a=document.createElement("button");
mxUtils.write(a,mxResources.get("ok")||"OK");
d.appendChild(a);
mxEvent.addListener(a,"click",function(){c();
});
a=document.createElement("button");
mxUtils.write(a,mxResources.get("cancel")||"Cancel");
d.appendChild(a);
mxEvent.addListener(a,"click",function(){e();
});
b.appendChild(d);
this.body.appendChild(b);
};
mxForm.prototype.addText=function(b,c){var a=document.createElement("input");
a.setAttribute("type","text");
a.value=c;
return this.addField(b,a);
};
mxForm.prototype.addCheckbox=function(b,c){var a=document.createElement("input");
a.setAttribute("type","checkbox");
this.addField(b,a);
if(c){a.checked=true;
}return a;
};
mxForm.prototype.addTextarea=function(b,d,c){var a=document.createElement("textarea");
if(mxClient.IS_NS){c--;
}a.setAttribute("rows",c||2);
a.value=d;
return this.addField(b,a);
};
mxForm.prototype.addCombo=function(b,d,c){var a=document.createElement("select");
if(c!=null){a.setAttribute("size",c);
}if(d){a.setAttribute("multiple","true");
}return this.addField(b,a);
};
mxForm.prototype.addOption=function(e,b,d,a){var c=document.createElement("option");
mxUtils.writeln(c,b);
c.setAttribute("value",d);
if(a){c.setAttribute("selected",a);
}e.appendChild(c);
};
mxForm.prototype.addField=function(b,a){var c=document.createElement("tr");
var d=document.createElement("td");
mxUtils.write(d,b);
c.appendChild(d);
d=document.createElement("td");
d.appendChild(a);
c.appendChild(d);
this.body.appendChild(c);
return a;
};
function mxImage(c,b,a){this.src=c;
this.width=b;
this.height=a;
}mxImage.prototype.src=null;
mxImage.prototype.width=null;
mxImage.prototype.height=null;
function mxDivResizer(c,a){if(c.nodeName.toLowerCase()=="div"){if(a==null){a=window;
}this.div=c;
var b=mxUtils.getCurrentStyle(c);
if(b!=null){this.resizeWidth=b.width=="auto";
this.resizeHeight=b.height=="auto";
}mxEvent.addListener(a,"resize",mxUtils.bind(this,function(d){if(!this.handlingResize){this.handlingResize=true;
this.resize();
this.handlingResize=false;
}}));
this.resize();
}}mxDivResizer.prototype.resizeWidth=true;
mxDivResizer.prototype.resizeHeight=true;
mxDivResizer.prototype.handlingResize=false;
mxDivResizer.prototype.resize=function(){var d=this.getDocumentWidth();
var f=this.getDocumentHeight();
var c=parseInt(this.div.style.left);
var g=parseInt(this.div.style.right);
var e=parseInt(this.div.style.top);
var a=parseInt(this.div.style.bottom);
if(this.resizeWidth&&!isNaN(c)&&!isNaN(g)&&c>=0&&g>=0&&d-g-c>0){this.div.style.width=(d-g-c)+"px";
}if(this.resizeHeight&&!isNaN(e)&&!isNaN(a)&&e>=0&&a>=0&&f-e-a>0){this.div.style.height=(f-e-a)+"px";
}};
mxDivResizer.prototype.getDocumentWidth=function(){return document.body.clientWidth;
};
mxDivResizer.prototype.getDocumentHeight=function(){return document.body.clientHeight;
};
function mxDragSource(b,a){this.element=b;
this.dropHandler=a;
var c=(mxClient.IS_TOUCH)?"touchstart":"mousedown";
mxEvent.addListener(b,c,mxUtils.bind(this,this.mouseDown));
}mxDragSource.prototype.element=null;
mxDragSource.prototype.dropHandler=null;
mxDragSource.prototype.dragOffset=null;
mxDragSource.prototype.dragElement=null;
mxDragSource.prototype.previewElement=null;
mxDragSource.prototype.enabled=true;
mxDragSource.prototype.currentGraph=null;
mxDragSource.prototype.currentDropTarget=null;
mxDragSource.prototype.currentPoint=null;
mxDragSource.prototype.currentGuide=null;
mxDragSource.prototype.currentHighlight=null;
mxDragSource.prototype.autoscroll=true;
mxDragSource.prototype.guidesEnabled=true;
mxDragSource.prototype.gridEnabled=true;
mxDragSource.prototype.highlightDropTargets=true;
mxDragSource.prototype.dragElementZIndex=100;
mxDragSource.prototype.dragElementOpacity=70;
mxDragSource.prototype.isEnabled=function(){return this.enabled;
};
mxDragSource.prototype.setEnabled=function(a){this.enabled=a;
};
mxDragSource.prototype.isGuidesEnabled=function(){return this.guidesEnabled;
};
mxDragSource.prototype.setGuidesEnabled=function(a){this.guidesEnabled=a;
};
mxDragSource.prototype.isGridEnabled=function(){return this.gridEnabled;
};
mxDragSource.prototype.setGridEnabled=function(a){this.gridEnabled=a;
};
mxDragSource.prototype.getGraphForEvent=function(a){return null;
};
mxDragSource.prototype.getDropTarget=function(b,a,c){return b.getCellAt(a,c);
};
mxDragSource.prototype.createDragElement=function(a){return this.element.cloneNode(true);
};
mxDragSource.prototype.createPreviewElement=function(a){return null;
};
mxDragSource.prototype.mouseDown=function(b){if(this.enabled&&!mxEvent.isConsumed(b)&&this.mouseMoveHandler==null){this.startDrag(b);
var c=(mxClient.IS_TOUCH)?"touchmove":"mousemove";
var a=(mxClient.IS_TOUCH)?"touchend":"mouseup";
this.mouseMoveHandler=mxUtils.bind(this,this.mouseMove);
mxEvent.addListener(document,c,this.mouseMoveHandler);
this.mouseUpHandler=mxUtils.bind(this,this.mouseUp);
mxEvent.addListener(document,a,this.mouseUpHandler);
mxEvent.consume(b,true,false);
}};
mxDragSource.prototype.startDrag=function(a){this.dragElement=this.createDragElement(a);
this.dragElement.style.position="absolute";
this.dragElement.style.zIndex=this.dragElementZIndex;
mxUtils.setOpacity(this.dragElement,this.dragElementOpacity);
};
mxDragSource.prototype.stopDrag=function(a){if(this.dragElement!=null){if(this.dragElement.parentNode!=null){this.dragElement.parentNode.removeChild(this.dragElement);
}this.dragElement=null;
}};
mxDragSource.prototype.graphContainsEvent=function(d,b){var a=mxEvent.getClientX(b);
var f=mxEvent.getClientY(b);
var e=mxUtils.getOffset(d.container);
var c=mxUtils.getScrollOrigin();
return a>=e.x-c.x&&f>=e.y-c.y&&a<=e.x-c.x+d.container.offsetWidth&&f<=e.y-c.y+d.container.offsetHeight;
};
mxDragSource.prototype.mouseMove=function(b){var c=this.getGraphForEvent(b);
if(c!=null&&!this.graphContainsEvent(c,b)){c=null;
}if(c!=this.currentGraph){if(this.currentGraph!=null){this.dragExit(this.currentGraph);
}this.currentGraph=c;
if(this.currentGraph!=null){this.dragEnter(this.currentGraph);
}}if(this.currentGraph!=null){this.dragOver(this.currentGraph,b);
}if(this.dragElement!=null&&(this.previewElement==null||this.previewElement.style.visibility!="visible")){var a=mxEvent.getClientX(b);
var d=mxEvent.getClientY(b);
if(this.dragElement.parentNode==null){document.body.appendChild(this.dragElement);
}this.dragElement.style.visibility="visible";
if(this.dragOffset!=null){a+=this.dragOffset.x;
d+=this.dragOffset.y;
}a+=document.body.scrollLeft||document.documentElement.scrollLeft;
d+=document.body.scrollTop||document.documentElement.scrollTop;
this.dragElement.style.left=a+"px";
this.dragElement.style.top=d+"px";
}else{if(this.dragElement!=null){this.dragElement.style.visibility="hidden";
}}mxEvent.consume(b);
};
mxDragSource.prototype.mouseUp=function(c){if(this.currentGraph!=null){if(this.currentPoint!=null&&(this.previewElement==null||this.previewElement.style.visibility!="hidden")){var f=this.currentGraph.view.scale;
var d=this.currentGraph.view.translate;
var a=this.currentPoint.x/f-d.x;
var g=this.currentPoint.y/f-d.y;
this.drop(this.currentGraph,c,this.currentDropTarget,a,g);
}this.dragExit(this.currentGraph);
}this.stopDrag(c);
this.currentGraph=null;
if(this.mouseMoveHandler!=null){var e=(mxClient.IS_TOUCH)?"touchmove":"mousemove";
mxEvent.removeListener(document,e,this.mouseMoveHandler);
this.mouseMoveHandler=null;
}if(this.mouseUpHandler!=null){var b=(mxClient.IS_TOUCH)?"touchend":"mouseup";
mxEvent.removeListener(document,b,this.mouseUpHandler);
this.mouseUpHandler=null;
}mxEvent.consume(c);
};
mxDragSource.prototype.dragEnter=function(a){a.isMouseDown=true;
this.previewElement=this.createPreviewElement(a);
if(this.isGuidesEnabled()&&this.previewElement!=null){this.currentGuide=new mxGuide(a,a.graphHandler.getGuideStates());
}if(this.highlightDropTargets){this.currentHighlight=new mxCellHighlight(a,mxConstants.DROP_TARGET_COLOR);
}};
mxDragSource.prototype.dragExit=function(a){this.currentDropTarget=null;
this.currentPoint=null;
a.isMouseDown=false;
if(this.previewElement!=null){if(this.previewElement.parentNode!=null){this.previewElement.parentNode.removeChild(this.previewElement);
}this.previewElement=null;
}if(this.currentGuide!=null){this.currentGuide.destroy();
this.currentGuide=null;
}if(this.currentHighlight!=null){this.currentHighlight.destroy();
this.currentHighlight=null;
}};
mxDragSource.prototype.dragOver=function(r,q){var f=mxUtils.getOffset(r.container);
var o=mxUtils.getScrollOrigin(r.container);
var m=mxEvent.getClientX(q)-f.x+o.x;
var l=mxEvent.getClientY(q)-f.y+o.y;
if(r.autoScroll&&(this.autoscroll==null||this.autoscroll)){r.scrollPointToVisible(m,l,r.autoExtend);
}if(this.currentHighlight!=null&&r.isDropEnabled()){this.currentDropTarget=this.getDropTarget(r,m,l);
var b=r.getView().getState(this.currentDropTarget);
this.currentHighlight.highlight(b);
}if(this.previewElement!=null){if(this.previewElement.parentNode==null){r.container.appendChild(this.previewElement);
this.previewElement.style.zIndex="3";
this.previewElement.style.position="absolute";
}var i=this.isGridEnabled()&&r.isGridEnabledEvent(q);
var e=true;
if(this.currentGuide!=null&&this.currentGuide.isEnabledForEvent(q)){var n=parseInt(this.previewElement.style.width);
var g=parseInt(this.previewElement.style.height);
var a=new mxRectangle(0,0,n,g);
var p=new mxPoint(m,l);
p=this.currentGuide.move(a,p,i);
e=false;
m=p.x;
l=p.y;
}else{if(i){var d=r.view.scale;
var k=r.view.translate;
var c=r.gridSize/2;
m=(r.snap(m/d-k.x-c)+k.x)*d;
l=(r.snap(l/d-k.y-c)+k.y)*d;
}}if(this.currentGuide!=null&&e){this.currentGuide.hide();
}if(this.previewOffset!=null){m+=this.previewOffset.x;
l+=this.previewOffset.y;
}this.previewElement.style.left=Math.round(m)+"px";
this.previewElement.style.top=Math.round(l)+"px";
this.previewElement.style.visibility="visible";
}this.currentPoint=new mxPoint(m,l);
};
mxDragSource.prototype.drop=function(c,b,e,a,d){this.dropHandler(c,b,e,a,d);
c.container.focus();
};
function mxToolbar(a){this.container=a;
}mxToolbar.prototype=new mxEventSource();
mxToolbar.prototype.constructor=mxToolbar;
mxToolbar.prototype.container=null;
mxToolbar.prototype.enabled=true;
mxToolbar.prototype.noReset=false;
mxToolbar.prototype.updateDefaultMode=true;
mxToolbar.prototype.addItem=function(k,i,a,e,b,c){var f=document.createElement((i!=null)?"img":"button");
var d=b||((c!=null)?"mxToolbarMode":"mxToolbarItem");
f.className=d;
f.setAttribute("src",i);
if(k!=null){if(i!=null){f.setAttribute("title",k);
}else{mxUtils.write(f,k);
}}this.container.appendChild(f);
if(a!=null){mxEvent.addListener(f,(mxClient.IS_TOUCH)?"touchend":"click",a);
}var h=(mxClient.IS_TOUCH)?"touchstart":"mousedown";
var l=(mxClient.IS_TOUCH)?"touchend":"mouseup";
mxEvent.addListener(f,h,mxUtils.bind(this,function(n){if(e!=null){f.setAttribute("src",e);
}else{f.style.backgroundColor="gray";
}if(c!=null){if(this.menu==null){this.menu=new mxPopupMenu();
this.menu.init();
}var o=this.currentImg;
if(this.menu.isMenuShowing()){this.menu.hideMenu();
}if(o!=f){this.currentImg=f;
this.menu.factoryMethod=c;
var m=new mxPoint(f.offsetLeft,f.offsetTop+f.offsetHeight);
this.menu.popup(m.x,m.y,null,n);
if(this.menu.isMenuShowing()){f.className=d+"Selected";
this.menu.hideMenu=function(){mxPopupMenu.prototype.hideMenu.apply(this);
f.className=d;
this.currentImg=null;
};
}}}}));
var g=mxUtils.bind(this,function(m){if(e!=null){f.setAttribute("src",i);
}else{f.style.backgroundColor="";
}});
mxEvent.addListener(f,l,g);
mxEvent.addListener(f,"mouseout",g);
return f;
};
mxToolbar.prototype.addCombo=function(b){var c=document.createElement("div");
c.style.display="inline";
c.className="mxToolbarComboContainer";
var a=document.createElement("select");
a.className=b||"mxToolbarCombo";
c.appendChild(a);
this.container.appendChild(c);
return a;
};
mxToolbar.prototype.addActionCombo=function(c,b){var a=document.createElement("select");
a.className=b||"mxToolbarCombo";
this.addOption(a,c,null);
mxEvent.addListener(a,"change",function(d){var e=a.options[a.selectedIndex];
a.selectedIndex=0;
if(e.funct!=null){e.funct(d);
}});
this.container.appendChild(a);
return a;
};
mxToolbar.prototype.addOption=function(c,d,b){var a=document.createElement("option");
mxUtils.writeln(a,d);
if(typeof(b)=="function"){a.funct=b;
}else{a.setAttribute("value",b);
}c.appendChild(a);
return a;
};
mxToolbar.prototype.addSwitchMode=function(f,e,a,d,c){var b=document.createElement("img");
b.initialClassName=c||"mxToolbarMode";
b.className=b.initialClassName;
b.setAttribute("src",e);
b.altIcon=d;
if(f!=null){b.setAttribute("title",f);
}mxEvent.addListener(b,"click",mxUtils.bind(this,function(g){var h=this.selectedMode.altIcon;
if(h!=null){this.selectedMode.altIcon=this.selectedMode.getAttribute("src");
this.selectedMode.setAttribute("src",h);
}else{this.selectedMode.className=this.selectedMode.initialClassName;
}if(this.updateDefaultMode){this.defaultMode=b;
}this.selectedMode=b;
var h=b.altIcon;
if(h!=null){b.altIcon=b.getAttribute("src");
b.setAttribute("src",h);
}else{b.className=b.initialClassName+"Selected";
}this.fireEvent(new mxEventObject(mxEvent.SELECT));
a();
}));
this.container.appendChild(b);
if(this.defaultMode==null){this.defaultMode=b;
this.selectMode(b);
a();
}return b;
};
mxToolbar.prototype.addMode=function(g,f,b,e,d,a){a=(a!=null)?a:true;
var c=document.createElement((f!=null)?"img":"button");
c.initialClassName=d||"mxToolbarMode";
c.className=c.initialClassName;
c.setAttribute("src",f);
c.altIcon=e;
if(g!=null){c.setAttribute("title",g);
}if(this.enabled&&a){mxEvent.addListener(c,"click",mxUtils.bind(this,function(h){this.selectMode(c,b);
this.noReset=false;
}));
mxEvent.addListener(c,"dblclick",mxUtils.bind(this,function(h){this.selectMode(c,b);
this.noReset=true;
}));
if(this.defaultMode==null){this.defaultMode=c;
this.defaultFunction=b;
this.selectMode(c,b);
}}this.container.appendChild(c);
return c;
};
mxToolbar.prototype.selectMode=function(c,a){if(this.selectedMode!=c){if(this.selectedMode!=null){var b=this.selectedMode.altIcon;
if(b!=null){this.selectedMode.altIcon=this.selectedMode.getAttribute("src");
this.selectedMode.setAttribute("src",b);
}else{this.selectedMode.className=this.selectedMode.initialClassName;
}}this.selectedMode=c;
var b=this.selectedMode.altIcon;
if(b!=null){this.selectedMode.altIcon=this.selectedMode.getAttribute("src");
this.selectedMode.setAttribute("src",b);
}else{this.selectedMode.className=this.selectedMode.initialClassName+"Selected";
}this.fireEvent(new mxEventObject(mxEvent.SELECT,"function",a));
}};
mxToolbar.prototype.resetMode=function(a){if((a||!this.noReset)&&this.selectedMode!=this.defaultMode){this.selectMode(this.defaultMode,this.defaultFunction);
}};
mxToolbar.prototype.addSeparator=function(a){return this.addItem(null,a,null);
};
mxToolbar.prototype.addBreak=function(){mxUtils.br(this.container);
};
mxToolbar.prototype.addLine=function(){var a=document.createElement("hr");
a.style.marginRight="6px";
a.setAttribute("size","1");
this.container.appendChild(a);
};
mxToolbar.prototype.destroy=function(){mxEvent.release(this.container);
this.container=null;
this.defaultMode=null;
this.defaultFunction=null;
this.selectedMode=null;
if(this.menu!=null){this.menu.destroy();
}};
function mxSession(c,b,a,d){this.model=c;
this.urlInit=b;
this.urlPoll=a;
this.urlNotify=d;
if(c!=null){this.codec=new mxCodec();
this.codec.lookup=function(e){return c.getCell(e);
};
}c.addListener(mxEvent.NOTIFY,mxUtils.bind(this,function(f,e){var g=e.getProperty("edit");
if(g!=null&&this.debug||(this.connected&&!this.suspended)){this.notify("<edit>"+this.encodeChanges(g.changes,g.undone)+"</edit>");
}}));
}mxSession.prototype=new mxEventSource();
mxSession.prototype.constructor=mxSession;
mxSession.prototype.model=null;
mxSession.prototype.urlInit=null;
mxSession.prototype.urlPoll=null;
mxSession.prototype.urlNotify=null;
mxSession.prototype.codec=null;
mxSession.prototype.linefeed="&#xa;";
mxSession.prototype.escapePostData=true;
mxSession.prototype.significantRemoteChanges=true;
mxSession.prototype.sent=0;
mxSession.prototype.received=0;
mxSession.prototype.debug=false;
mxSession.prototype.connected=false;
mxSession.prototype.suspended=false;
mxSession.prototype.polling=false;
mxSession.prototype.start=function(){if(this.debug){this.connected=true;
this.fireEvent(new mxEventObject(mxEvent.CONNECT));
}else{if(!this.connected){this.get(this.urlInit,mxUtils.bind(this,function(a){this.connected=true;
this.fireEvent(new mxEventObject(mxEvent.CONNECT));
this.poll();
}));
}}};
mxSession.prototype.suspend=function(){if(this.connected&&!this.suspended){this.suspended=true;
this.fireEvent(new mxEventObject(mxEvent.SUSPEND));
}};
mxSession.prototype.resume=function(b,a,c){if(this.connected&&this.suspended){this.suspended=false;
this.fireEvent(new mxEventObject(mxEvent.RESUME));
if(!this.polling){this.poll();
}}};
mxSession.prototype.stop=function(a){if(this.connected){this.connected=false;
}this.fireEvent(new mxEventObject(mxEvent.DISCONNECT,"reason",a));
};
mxSession.prototype.poll=function(){if(this.connected&&!this.suspended&&this.urlPoll!=null){this.polling=true;
this.get(this.urlPoll,mxUtils.bind(this,function(){this.poll();
}));
}else{this.polling=false;
}};
mxSession.prototype.notify=function(a,b,c){if(a!=null&&a.length>0){if(this.urlNotify!=null){if(this.debug){mxLog.show();
mxLog.debug("mxSession.notify: "+this.urlNotify+" xml="+a);
}else{a="<message><delta>"+a+"</delta></message>";
if(this.escapePostData){a=encodeURIComponent(a);
}mxUtils.post(this.urlNotify,"xml="+a,b,c);
}}this.sent+=a.length;
this.fireEvent(new mxEventObject(mxEvent.NOTIFY,"url",this.urlNotify,"xml",a));
}};
mxSession.prototype.get=function(b,c,d){if(typeof(mxUtils)!="undefined"){var a=mxUtils.bind(this,function(e){if(d!=null){d(e);
}else{this.stop(e);
}});
mxUtils.get(b,mxUtils.bind(this,function(f){if(typeof(mxUtils)!="undefined"){if(f.isReady()&&f.getStatus()!=404){this.received+=f.getText().length;
this.fireEvent(new mxEventObject(mxEvent.GET,"url",b,"request",f));
if(this.isValidResponse(f)){if(f.getText().length>0){var e=f.getDocumentElement();
if(e==null){a("Invalid response: "+f.getText());
}else{this.receive(e);
}}if(c!=null){c(f);
}}}else{a("Response not ready");
}}}),function(e){a("Transmission error");
});
}};
mxSession.prototype.isValidResponse=function(a){return a.getText().indexOf("<?php")<0;
};
mxSession.prototype.encodeChanges=function(c,g){var a="";
var e=(g)?-1:1;
var f=(g)?c.length-1:0;
for(var b=f;
b>=0&&b<c.length;
b+=e){var d=this.codec.encode(c[b]);
a+=mxUtils.getXml(d,this.linefeed);
}return a;
};
mxSession.prototype.receive=function(c){if(c!=null&&c.nodeType==mxConstants.NODETYPE_ELEMENT){var b=c.getAttribute("namespace");
if(b!=null){this.model.prefix=b+"-";
}var d=c.firstChild;
while(d!=null){var a=d.nodeName.toLowerCase();
if(a=="state"){this.processState(d);
}else{if(a=="delta"){this.processDelta(d);
}}d=d.nextSibling;
}this.fireEvent(new mxEventObject(mxEvent.RECEIVE,"node",c));
}};
mxSession.prototype.processState=function(a){var b=new mxCodec(a.ownerDocument);
b.decode(a.firstChild,this.model);
};
mxSession.prototype.processDelta=function(b){var a=b.firstChild;
while(a!=null){if(a.nodeName=="edit"){this.processEdit(a);
}a=a.nextSibling;
}};
mxSession.prototype.processEdit=function(c){var a=this.decodeChanges(c);
if(a.length>0){var b=this.createUndoableEdit(a);
this.model.fireEvent(new mxEventObject(mxEvent.CHANGE,"edit",b,"changes",a));
this.model.fireEvent(new mxEventObject(mxEvent.UNDO,"edit",b));
this.fireEvent(new mxEventObject(mxEvent.FIRED,"edit",b));
}};
mxSession.prototype.createUndoableEdit=function(a){var b=new mxUndoableEdit(this.model,this.significantRemoteChanges);
b.changes=a;
b.notify=function(){b.source.fireEvent(new mxEventObject(mxEvent.CHANGE,"edit",b,"changes",b.changes));
b.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,"edit",b,"changes",b.changes));
};
return b;
};
mxSession.prototype.decodeChanges=function(b){this.codec.document=b.ownerDocument;
var a=[];
b=b.firstChild;
while(b!=null){var c=this.decodeChange(b);
if(c!=null){a.push(c);
}b=b.nextSibling;
}return a;
};
mxSession.prototype.decodeChange=function(b){var c=null;
if(b.nodeType==mxConstants.NODETYPE_ELEMENT){if(b.nodeName=="mxRootChange"){var a=new mxCodec(b.ownerDocument);
c=a.decode(b);
}else{c=this.codec.decode(b);
}if(c!=null){c.model=this.model;
c.execute();
if(b.nodeName=="mxChildChange"&&c.parent==null){this.cellRemoved(c.child);
}}}return c;
};
mxSession.prototype.cellRemoved=function(a,d){this.codec.putObject(a.getId(),a);
var b=this.model.getChildCount(a);
for(var c=0;
c<b;
c++){this.cellRemoved(this.model.getChildAt(a,c));
}};
function mxUndoableEdit(b,a){this.source=b;
this.changes=[];
this.significant=(a!=null)?a:true;
}mxUndoableEdit.prototype.source=null;
mxUndoableEdit.prototype.changes=null;
mxUndoableEdit.prototype.significant=null;
mxUndoableEdit.prototype.undone=false;
mxUndoableEdit.prototype.redone=false;
mxUndoableEdit.prototype.isEmpty=function(){return this.changes.length==0;
};
mxUndoableEdit.prototype.isSignificant=function(){return this.significant;
};
mxUndoableEdit.prototype.add=function(a){this.changes.push(a);
};
mxUndoableEdit.prototype.notify=function(){};
mxUndoableEdit.prototype.die=function(){};
mxUndoableEdit.prototype.undo=function(){if(!this.undone){this.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));
var b=this.changes.length;
for(var a=b-1;
a>=0;
a--){var c=this.changes[a];
if(c.execute!=null){c.execute();
}else{if(c.undo!=null){c.undo();
}}this.source.fireEvent(new mxEventObject(mxEvent.EXECUTED,"change",c));
}this.undone=true;
this.redone=false;
this.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));
}this.notify();
};
mxUndoableEdit.prototype.redo=function(){if(!this.redone){this.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));
var b=this.changes.length;
for(var a=0;
a<b;
a++){var c=this.changes[a];
if(c.execute!=null){c.execute();
}else{if(c.redo!=null){c.redo();
}}this.source.fireEvent(new mxEventObject(mxEvent.EXECUTED,"change",c));
}this.undone=false;
this.redone=true;
this.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));
}this.notify();
};
function mxUndoManager(a){this.size=(a!=null)?a:100;
this.clear();
}mxUndoManager.prototype=new mxEventSource();
mxUndoManager.prototype.constructor=mxUndoManager;
mxUndoManager.prototype.size=null;
mxUndoManager.prototype.history=null;
mxUndoManager.prototype.indexOfNextAdd=0;
mxUndoManager.prototype.isEmpty=function(){return this.history.length==0;
};
mxUndoManager.prototype.clear=function(){this.history=[];
this.indexOfNextAdd=0;
this.fireEvent(new mxEventObject(mxEvent.CLEAR));
};
mxUndoManager.prototype.canUndo=function(){return this.indexOfNextAdd>0;
};
mxUndoManager.prototype.undo=function(){while(this.indexOfNextAdd>0){var a=this.history[--this.indexOfNextAdd];
a.undo();
if(a.isSignificant()){this.fireEvent(new mxEventObject(mxEvent.UNDO,"edit",a));
break;
}}};
mxUndoManager.prototype.canRedo=function(){return this.indexOfNextAdd<this.history.length;
};
mxUndoManager.prototype.redo=function(){var b=this.history.length;
while(this.indexOfNextAdd<b){var a=this.history[this.indexOfNextAdd++];
a.redo();
if(a.isSignificant()){this.fireEvent(new mxEventObject(mxEvent.REDO,"edit",a));
break;
}}};
mxUndoManager.prototype.undoableEditHappened=function(a){this.trim();
if(this.size>0&&this.size==this.history.length){this.history.shift();
}this.history.push(a);
this.indexOfNextAdd=this.history.length;
this.fireEvent(new mxEventObject(mxEvent.ADD,"edit",a));
};
mxUndoManager.prototype.trim=function(){if(this.history.length>this.indexOfNextAdd){var a=this.history.splice(this.indexOfNextAdd,this.history.length-this.indexOfNextAdd);
for(var b=0;
b<a.length;
b++){a[b].die();
}}};
var mxUrlConverter=function(a){var b=true;
var c=null;
var e=null;
var d=function(){e=location.protocol+"//"+location.host;
c=e+location.pathname;
var f=c.lastIndexOf("/");
if(f>0){c=c.substring(0,f+1);
}};
return{isEnabled:function(){return b;
},setEnabled:function(f){b=f;
},getBaseUrl:function(){return c;
},setBaseUrl:function(f){c=f;
},getBaseDomain:function(){return c;
},setBaseDomain:function(f){c=f;
},convert:function(f){if(b&&f.indexOf("http://")!=0&&f.indexOf("https://")!=0&&f.indexOf("data:image")!=0){if(c==null){d();
}if(f.charAt(0)=="/"){f=e+f;
}else{f=c+f;
}}return f;
}};
};
function mxPanningManager(a){this.thread=null;
this.active=false;
this.tdx=0;
this.tdy=0;
this.t0x=0;
this.t0y=0;
this.dx=0;
this.dy=0;
this.scrollbars=false;
this.scrollLeft=0;
this.scrollTop=0;
this.mouseListener={mouseDown:function(c,d){},mouseMove:function(c,d){},mouseUp:mxUtils.bind(this,function(c,d){if(this.active){this.stop();
}})};
a.addMouseListener(this.mouseListener);
mxEvent.addListener(document,"mouseup",mxUtils.bind(this,function(){if(this.active){this.stop();
}}));
var b=mxUtils.bind(this,function(){this.scrollbars=mxUtils.hasScrollbars(a.container);
this.scrollLeft=a.container.scrollLeft;
this.scrollTop=a.container.scrollTop;
return window.setInterval(mxUtils.bind(this,function(){this.tdx-=this.dx;
this.tdy-=this.dy;
if(this.scrollbars){var d=-a.container.scrollLeft-Math.ceil(this.dx);
var c=-a.container.scrollTop-Math.ceil(this.dy);
a.panGraph(d,c);
a.panDx=this.scrollLeft-a.container.scrollLeft;
a.panDy=this.scrollTop-a.container.scrollTop;
a.fireEvent(new mxEventObject(mxEvent.PAN));
}else{a.panGraph(this.getDx(),this.getDy());
}}),this.delay);
});
this.isActive=function(){return active;
};
this.getDx=function(){return Math.round(this.tdx);
};
this.getDy=function(){return Math.round(this.tdy);
};
this.start=function(){this.t0x=a.view.translate.x;
this.t0y=a.view.translate.y;
this.active=true;
};
this.panTo=function(d,i,e,f){if(!this.active){this.start();
}this.scrollLeft=a.container.scrollLeft;
this.scrollTop=a.container.scrollTop;
e=(e!=null)?e:0;
f=(f!=null)?f:0;
var g=a.container;
this.dx=d+e-g.scrollLeft-g.clientWidth;
if(this.dx<0&&Math.abs(this.dx)<this.border){this.dx=this.border+this.dx;
}else{if(this.handleMouseOut){this.dx=Math.max(this.dx,0);
}else{this.dx=0;
}}if(this.dx==0){this.dx=d-g.scrollLeft;
if(this.dx>0&&this.dx<this.border){this.dx=this.dx-this.border;
}else{if(this.handleMouseOut){this.dx=Math.min(0,this.dx);
}else{this.dx=0;
}}}this.dy=i+f-g.scrollTop-g.clientHeight;
if(this.dy<0&&Math.abs(this.dy)<this.border){this.dy=this.border+this.dy;
}else{if(this.handleMouseOut){this.dy=Math.max(this.dy,0);
}else{this.dy=0;
}}if(this.dy==0){this.dy=i-g.scrollTop;
if(this.dy>0&&this.dy<this.border){this.dy=this.dy-this.border;
}else{if(this.handleMouseOut){this.dy=Math.min(0,this.dy);
}else{this.dy=0;
}}}if(this.dx!=0||this.dy!=0){this.dx*=this.damper;
this.dy*=this.damper;
if(this.thread==null){this.thread=b();
}}else{if(this.thread!=null){window.clearInterval(this.thread);
this.thread=null;
}}};
this.stop=function(){if(this.active){this.active=false;
if(this.thread!=null){window.clearInterval(this.thread);
this.thread=null;
}this.tdx=0;
this.tdy=0;
if(!this.scrollbars){var d=a.panDx;
var c=a.panDy;
if(d!=0||c!=0){a.panGraph(0,0);
a.view.setTranslate(this.t0x+d/a.view.scale,this.t0y+c/a.view.scale);
}}else{a.panDx=0;
a.panDy=0;
a.fireEvent(new mxEventObject(mxEvent.PAN));
}}};
this.destroy=function(){a.removeMouseListener(this.mouseListener);
};
}mxPanningManager.prototype.damper=1/6;
mxPanningManager.prototype.delay=10;
mxPanningManager.prototype.handleMouseOut=true;
mxPanningManager.prototype.border=0;
function mxPath(a){this.format=a;
this.path=[];
this.translate=new mxPoint(0,0);
}mxPath.prototype.format=null;
mxPath.prototype.translate=null;
mxPath.prototype.scale=1;
mxPath.prototype.path=null;
mxPath.prototype.isVml=function(){return this.format=="vml";
};
mxPath.prototype.getPath=function(){return this.path.join("");
};
mxPath.prototype.setTranslate=function(a,b){this.translate=new mxPoint(a,b);
};
mxPath.prototype.moveTo=function(a,b){a+=this.translate.x;
b+=this.translate.y;
a*=this.scale;
b*=this.scale;
if(this.isVml()){this.path.push("m ",Math.round(a)," ",Math.round(b)," ");
}else{this.path.push("M ",a," ",b," ");
}};
mxPath.prototype.lineTo=function(a,b){a+=this.translate.x;
b+=this.translate.y;
a*=this.scale;
b*=this.scale;
if(this.isVml()){this.path.push("l ",Math.round(a)," ",Math.round(b)," ");
}else{this.path.push("L ",a," ",b," ");
}};
mxPath.prototype.quadTo=function(b,c,a,d){b+=this.translate.x;
c+=this.translate.y;
b*=this.scale;
c*=this.scale;
a+=this.translate.x;
d+=this.translate.y;
a*=this.scale;
d*=this.scale;
if(this.isVml()){this.path.push("c ",Math.round(b)," ",Math.round(c)," ",Math.round(a)," ",Math.round(d)," ",Math.round(a)," ",Math.round(d)," ");
}else{this.path.push("Q ",b," ",c," ",a," ",d," ");
}};
mxPath.prototype.curveTo=function(c,e,b,d,a,f){c+=this.translate.x;
e+=this.translate.y;
c*=this.scale;
e*=this.scale;
b+=this.translate.x;
d+=this.translate.y;
b*=this.scale;
d*=this.scale;
a+=this.translate.x;
f+=this.translate.y;
a*=this.scale;
f*=this.scale;
if(this.isVml()){this.path.push("c ",Math.round(c)," ",Math.round(e)," ",Math.round(b)," ",Math.round(d)," ",Math.round(a)," ",Math.round(f)," ");
}else{this.path.push("C ",c," ",e," ",b," ",d," ",a," ",f," ");
}};
mxPath.prototype.ellipse=function(g,f,i,d){g+=this.translate.x;
f+=this.translate.y;
g*=this.scale;
f*=this.scale;
if(this.isVml()){this.path.push("at ",Math.round(g)," ",Math.round(f)," ",Math.round(g+i)," ",Math.round(f+d)," ",Math.round(g)," ",Math.round(f+d/2)," ",Math.round(g)," ",Math.round(f+d/2));
}else{var e=g;
var c=f+d/2;
var l=g+i;
var k=f+d/2;
var b=i/2;
var a=d/2;
this.path.push("M ",e," ",c," ");
this.path.push("A ",b," ",a," 0 1 0 ",l," ",k," ");
this.path.push("A ",b," ",a," 0 1 0 ",e," ",c);
}};
mxPath.prototype.addPath=function(a){this.path=this.path.concat(a.path);
};
mxPath.prototype.write=function(a){this.path.push(a," ");
};
mxPath.prototype.end=function(){if(this.format=="vml"){this.path.push("e");
}};
mxPath.prototype.close=function(){if(this.format=="vml"){this.path.push("x e");
}else{this.path.push("Z");
}};
function mxPopupMenu(a){this.factoryMethod=a;
if(a!=null){this.init();
}}mxPopupMenu.prototype=new mxEventSource();
mxPopupMenu.prototype.constructor=mxPopupMenu;
mxPopupMenu.prototype.submenuImage=mxClient.imageBasePath+"/submenu.gif";
mxPopupMenu.prototype.zIndex=10006;
mxPopupMenu.prototype.factoryMethod=null;
mxPopupMenu.prototype.useLeftButtonForPopup=false;
mxPopupMenu.prototype.enabled=true;
mxPopupMenu.prototype.itemCount=0;
mxPopupMenu.prototype.autoExpand=false;
mxPopupMenu.prototype.smartSeparators=false;
mxPopupMenu.prototype.labels=true;
mxPopupMenu.prototype.init=function(){this.table=document.createElement("table");
this.table.className="mxPopupMenu";
this.tbody=document.createElement("tbody");
this.table.appendChild(this.tbody);
this.div=document.createElement("div");
this.div.className="mxPopupMenu";
this.div.style.display="inline";
this.div.style.zIndex=this.zIndex;
this.div.appendChild(this.table);
mxEvent.disableContextMenu(this.div);
};
mxPopupMenu.prototype.isEnabled=function(){return this.enabled;
};
mxPopupMenu.prototype.setEnabled=function(a){this.enabled=a;
};
mxPopupMenu.prototype.isPopupTrigger=function(a){return a.isPopupTrigger()||(this.useLeftButtonForPopup&&mxEvent.isLeftMouseButton(a.getEvent()));
};
mxPopupMenu.prototype.addItem=function(m,c,a,n,o,i){n=n||this;
this.itemCount++;
if(n.willAddSeparator){if(n.containsItems){this.addSeparator(n,true);
}n.willAddSeparator=false;
}n.containsItems=true;
var k=document.createElement("tr");
k.className="mxPopupMenuItem";
var h=document.createElement("td");
h.className="mxPopupMenuIcon";
if(c!=null){var e=document.createElement("img");
e.src=c;
h.appendChild(e);
}else{if(o!=null){var b=document.createElement("div");
b.className=o;
h.appendChild(b);
}}k.appendChild(h);
if(this.labels){var g=document.createElement("td");
g.className="mxPopupMenuItem"+((i!=null&&!i)?" disabled":"");
mxUtils.write(g,m);
g.align="left";
k.appendChild(g);
var f=document.createElement("td");
f.className="mxPopupMenuItem"+((i!=null&&!i)?" disabled":"");
f.style.paddingRight="6px";
f.style.textAlign="right";
k.appendChild(f);
if(n.div==null){this.createSubmenu(n);
}}n.tbody.appendChild(k);
if(i==null||i){var l=(mxClient.IS_TOUCH)?"touchstart":"mousedown";
var d=(mxClient.IS_TOUCH)?"touchmove":"mousemove";
var p=(mxClient.IS_TOUCH)?"touchend":"mouseup";
mxEvent.addListener(k,l,mxUtils.bind(this,function(q){this.eventReceiver=k;
if(n.activeRow!=k&&n.activeRow!=n){if(n.activeRow!=null&&n.activeRow.div.parentNode!=null){this.hideSubmenu(n);
}if(k.div!=null){this.showSubmenu(n,k);
n.activeRow=k;
}}mxEvent.consume(q);
}));
mxEvent.addListener(k,d,mxUtils.bind(this,function(q){if(n.activeRow!=k&&n.activeRow!=n){if(n.activeRow!=null&&n.activeRow.div.parentNode!=null){this.hideSubmenu(n);
}if(this.autoExpand&&k.div!=null){this.showSubmenu(n,k);
n.activeRow=k;
}}k.className="mxPopupMenuItemHover";
}));
mxEvent.addListener(k,p,mxUtils.bind(this,function(q){if(this.eventReceiver==k){if(n.activeRow!=k){this.hideMenu();
}if(a!=null){a(q);
}}this.eventReceiver=null;
mxEvent.consume(q);
}));
mxEvent.addListener(k,"mouseout",mxUtils.bind(this,function(q){k.className="mxPopupMenuItem";
}));
}return k;
};
mxPopupMenu.prototype.createSubmenu=function(b){b.table=document.createElement("table");
b.table.className="mxPopupMenu";
b.tbody=document.createElement("tbody");
b.table.appendChild(b.tbody);
b.div=document.createElement("div");
b.div.className="mxPopupMenu";
b.div.style.position="absolute";
b.div.style.display="inline";
b.div.style.zIndex=this.zIndex;
b.div.appendChild(b.table);
var a=document.createElement("img");
a.setAttribute("src",this.submenuImage);
td=b.firstChild.nextSibling.nextSibling;
td.appendChild(a);
};
mxPopupMenu.prototype.showSubmenu=function(f,i){if(i.div!=null){i.div.style.left=(f.div.offsetLeft+i.offsetLeft+i.offsetWidth-1)+"px";
i.div.style.top=(f.div.offsetTop+i.offsetTop)+"px";
document.body.appendChild(i.div);
var g=parseInt(i.div.offsetLeft);
var e=parseInt(i.div.offsetWidth);
var a=document.body;
var h=document.documentElement;
var c=(a.scrollLeft||h.scrollLeft)+(a.clientWidth||h.clientWidth);
if(g+e>c){i.div.style.left=(f.div.offsetLeft-e+((mxClient.IS_IE)?6:-6))+"px";
}mxUtils.fit(i.div);
}};
mxPopupMenu.prototype.addSeparator=function(b,e){b=b||this;
if(this.smartSeparators&&!e){b.willAddSeparator=true;
}else{if(b.tbody!=null){b.willAddSeparator=false;
var d=document.createElement("tr");
var f=document.createElement("td");
f.className="mxPopupMenuIcon";
f.style.padding="0 0 0 0px";
d.appendChild(f);
var c=document.createElement("td");
c.style.padding="0 0 0 0px";
c.setAttribute("colSpan","2");
var a=document.createElement("hr");
a.setAttribute("size","1");
c.appendChild(a);
d.appendChild(c);
b.tbody.appendChild(d);
}}};
mxPopupMenu.prototype.popup=function(b,d,a,c){if(this.div!=null&&this.tbody!=null&&this.factoryMethod!=null){this.div.style.left=b+"px";
this.div.style.top=d+"px";
while(this.tbody.firstChild!=null){mxEvent.release(this.tbody.firstChild);
this.tbody.removeChild(this.tbody.firstChild);
}this.itemCount=0;
this.factoryMethod(this,a,c);
if(this.itemCount>0){this.showMenu();
this.fireEvent(new mxEventObject(mxEvent.SHOW));
}}};
mxPopupMenu.prototype.isMenuShowing=function(){return this.div!=null&&this.div.parentNode==document.body;
};
mxPopupMenu.prototype.showMenu=function(){if(document.documentMode>=9){this.div.style.filter="none";
}document.body.appendChild(this.div);
mxUtils.fit(this.div);
};
mxPopupMenu.prototype.hideMenu=function(){if(this.div!=null){if(this.div.parentNode!=null){this.div.parentNode.removeChild(this.div);
}this.hideSubmenu(this);
this.containsItems=false;
}};
mxPopupMenu.prototype.hideSubmenu=function(a){if(a.activeRow!=null){this.hideSubmenu(a.activeRow);
if(a.activeRow.div.parentNode!=null){a.activeRow.div.parentNode.removeChild(a.activeRow.div);
}a.activeRow=null;
}};
mxPopupMenu.prototype.destroy=function(){if(this.div!=null){mxEvent.release(this.div);
if(this.div.parentNode!=null){this.div.parentNode.removeChild(this.div);
}this.div=null;
}};
function mxAutoSaveManager(a){this.changeHandler=mxUtils.bind(this,function(c,b){if(this.isEnabled()){this.graphModelChanged(b.getProperty("edit").changes);
}});
this.setGraph(a);
}mxAutoSaveManager.prototype=new mxEventSource();
mxAutoSaveManager.prototype.constructor=mxAutoSaveManager;
mxAutoSaveManager.prototype.graph=null;
mxAutoSaveManager.prototype.autoSaveDelay=10;
mxAutoSaveManager.prototype.autoSaveThrottle=2;
mxAutoSaveManager.prototype.autoSaveThreshold=5;
mxAutoSaveManager.prototype.ignoredChanges=0;
mxAutoSaveManager.prototype.lastSnapshot=0;
mxAutoSaveManager.prototype.enabled=true;
mxAutoSaveManager.prototype.changeHandler=null;
mxAutoSaveManager.prototype.isEnabled=function(){return this.enabled;
};
mxAutoSaveManager.prototype.setEnabled=function(a){this.enabled=a;
};
mxAutoSaveManager.prototype.setGraph=function(a){if(this.graph!=null){this.graph.getModel().removeListener(this.changeHandler);
}this.graph=a;
if(this.graph!=null){this.graph.getModel().addListener(mxEvent.CHANGE,this.changeHandler);
}};
mxAutoSaveManager.prototype.save=function(){};
mxAutoSaveManager.prototype.graphModelChanged=function(b){var a=new Date().getTime();
var c=(a-this.lastSnapshot)/1000;
if(c>this.autoSaveDelay||(this.ignoredChanges>=this.autoSaveThreshold&&c>this.autoSaveThrottle)){this.save();
this.reset();
}else{this.ignoredChanges++;
}};
mxAutoSaveManager.prototype.reset=function(){this.lastSnapshot=new Date().getTime();
this.ignoredChanges=0;
};
mxAutoSaveManager.prototype.destroy=function(){this.setGraph(null);
};
function mxAnimation(a){this.delay=(a!=null)?a:20;
}mxAnimation.prototype=new mxEventSource();
mxAnimation.prototype.constructor=mxAnimation;
mxAnimation.prototype.delay=null;
mxAnimation.prototype.thread=null;
mxAnimation.prototype.startAnimation=function(){if(this.thread==null){this.thread=window.setInterval(mxUtils.bind(this,this.updateAnimation),this.delay);
}};
mxAnimation.prototype.updateAnimation=function(){this.fireEvent(new mxEventObject(mxEvent.EXECUTE));
};
mxAnimation.prototype.stopAnimation=function(){if(this.thread!=null){window.clearInterval(this.thread);
this.thread=null;
this.fireEvent(new mxEventObject(mxEvent.DONE));
}};
function mxMorphing(c,a,d,b){mxAnimation.call(this,b);
this.graph=c;
this.steps=(a!=null)?a:6;
this.ease=(d!=null)?d:1.5;
}mxMorphing.prototype=new mxAnimation();
mxMorphing.prototype.constructor=mxMorphing;
mxMorphing.prototype.graph=null;
mxMorphing.prototype.steps=null;
mxMorphing.prototype.step=0;
mxMorphing.prototype.ease=null;
mxMorphing.prototype.cells=null;
mxMorphing.prototype.updateAnimation=function(){var a=new mxCellStatePreview(this.graph);
if(this.cells!=null){for(var b=0;
b<this.cells.length;
b++){this.animateCell(cells[b],a,false);
}}else{this.animateCell(this.graph.getModel().getRoot(),a,true);
}this.show(a);
if(a.isEmpty()||this.step++>=this.steps){this.stopAnimation();
}};
mxMorphing.prototype.show=function(a){a.show();
};
mxMorphing.prototype.animateCell=function(k,d,b){var a=this.graph.getView().getState(k);
var h=null;
if(a!=null){h=this.getDelta(a);
if(this.graph.getModel().isVertex(k)&&(h.x!=0||h.y!=0)){var c=this.graph.view.getTranslate();
var e=this.graph.view.getScale();
h.x+=c.x*e;
h.y+=c.y*e;
d.moveState(a,-h.x/this.ease,-h.y/this.ease);
}}if(b&&!this.stopRecursion(a,h)){var f=this.graph.getModel().getChildCount(k);
for(var g=0;
g<f;
g++){this.animateCell(this.graph.getModel().getChildAt(k,g),d,b);
}}};
mxMorphing.prototype.stopRecursion=function(a,b){return b!=null&&(b.x!=0||b.y!=0);
};
mxMorphing.prototype.getDelta=function(b){var a=this.getOriginForCell(b.cell);
var e=this.graph.getView().getTranslate();
var d=this.graph.getView().getScale();
var c=new mxPoint(b.x/d-e.x,b.y/d-e.y);
return new mxPoint((a.x-c.x)*d,(a.y-c.y)*d);
};
mxMorphing.prototype.getOriginForCell=function(b){var a=null;
if(b!=null){a=this.getOriginForCell(this.graph.getModel().getParent(b));
var d=this.graph.getCellGeometry(b);
if(d!=null){a.x+=d.x;
a.y+=d.y;
}}if(a==null){var c=this.graph.view.getTranslate();
a=new mxPoint(-c.x,-c.y);
}return a;
};
function mxImageBundle(a){this.images=[];
this.alt=(a!=null)?a:false;
}mxImageBundle.prototype.images=null;
mxImageBundle.prototype.images=null;
mxImageBundle.prototype.putImage=function(a,b,c){this.images[a]={value:b,fallback:c};
};
mxImageBundle.prototype.getImage=function(c){var a=null;
if(c!=null){var b=this.images[c];
if(b!=null){a=(this.alt)?b.fallback:b.value;
}}return a;
};
function mxImageExport(){this.initShapes();
this.initMarkers();
}mxImageExport.prototype.includeOverlays=false;
mxImageExport.prototype.glassSize=0.4;
mxImageExport.prototype.shapes=null;
mxImageExport.prototype.markers=null;
mxImageExport.prototype.drawState=function(g,d){if(g!=null){if(g.shape!=null){var b=(g.shape.stencil!=null)?g.shape.stencil:this.shapes[g.style[mxConstants.STYLE_SHAPE]];
if(b==null){if(typeof(g.shape.redrawPath)=="function"){b=this.createShape(g,d);
}else{if(g.view.graph.getModel().isVertex(g.cell)){b=this.shapes.rectangle;
}}}if(b!=null){this.drawShape(g,d,b);
if(this.includeOverlays){this.drawOverlays(g,d);
}}}var f=g.view.graph;
var a=f.model.getChildCount(g.cell);
for(var e=0;
e<a;
e++){var c=f.view.getState(f.model.getChildAt(g.cell,e));
this.drawState(c,d);
}}};
mxImageExport.prototype.createShape=function(b,a){return{drawShape:function(c,f,e,d){var g={translate:new mxPoint(e.x,e.y),moveTo:function(h,i){c.moveTo(this.translate.x+h,this.translate.y+i);
},lineTo:function(h,i){c.lineTo(this.translate.x+h,this.translate.y+i);
},quadTo:function(i,k,h,l){c.quadTo(this.translate.x+i,this.translate.y+k,this.translate.x+h,this.translate.y+l);
},curveTo:function(k,m,i,l,h,n){c.curveTo(this.translate.x+k,this.translate.y+m,this.translate.x+i,this.translate.y+l,this.translate.x+h,this.translate.y+n);
},end:function(){},close:function(){c.close();
}};
if(!d){c.fillAndStroke();
}c.begin();
f.shape.redrawPath.call(f.shape,g,e.x,e.y,e.width,e.height,!d);
if(!d){c.fillAndStroke();
}return true;
}};
};
mxImageExport.prototype.drawOverlays=function(b,a){if(b.overlays!=null){b.overlays.visit(function(e,c){var d=c.bounds;
if(d!=null){a.image(d.x,d.y,d.width,d.height,c.image);
}});
}};
mxImageExport.prototype.drawShape=function(k,g,c){var A=mxUtils.getNumber(k.style,mxConstants.STYLE_ROTATION,0);
var G=mxUtils.getValue(k.style,mxConstants.STYLE_DIRECTION,null);
var B=k.style[mxConstants.STYLE_STENCIL_FLIPH];
var p=k.style[mxConstants.STYLE_STENCIL_FLIPV];
if(B?!p:p){A*=-1;
}if(G!=null){if(G=="north"){A+=270;
}else{if(G=="west"){A+=180;
}else{if(G=="south"){A+=90;
}}}}if(B&&p){A+=180;
B=false;
p=false;
}g.save();
A=A%360;
if(A!=0||B||p){g.rotate(A,B,p,k.getCenterX(),k.getCenterY());
}var I=k.view.scale;
var w=mxUtils.getNumber(k.style,mxConstants.STYLE_STROKEWIDTH,1)*I;
g.setStrokeWidth(w);
var a=w/2;
var f=this.getBackgroundBounds(k);
if(k.shape.stencil==null&&(G=="south"||G=="north")){var s=(f.width-f.height)/2;
f.x+=s;
f.y+=-s;
var E=f.width;
f.width=f.height;
f.height=E;
}var l=new mxRectangle(f.x-a,f.y-a,f.width+w,f.height+w);
var i=mxUtils.getValue(k.style,mxConstants.STYLE_OPACITY,100)/100;
var x=k.style[mxConstants.STYLE_SHAPE];
var D=x==mxConstants.SHAPE_IMAGE;
var t=(D)?null:mxUtils.getValue(k.style,mxConstants.STYLE_GRADIENTCOLOR);
if(t==mxConstants.NONE){t=null;
}var H=(D)?mxConstants.STYLE_IMAGE_BACKGROUND:mxConstants.STYLE_FILLCOLOR;
var h=mxUtils.getValue(k.style,H,null);
if(h==mxConstants.NONE){h=null;
}var K=(D)?mxConstants.STYLE_IMAGE_BORDER:mxConstants.STYLE_STROKECOLOR;
var z=mxUtils.getValue(k.style,K,null);
if(z==mxConstants.NONE){z=null;
}var J=(h!=null&&(x==mxConstants.SHAPE_LABEL||x==mxConstants.SHAPE_RECTANGLE));
if(mxUtils.getValue(k.style,mxConstants.STYLE_SHADOW,false)){this.drawShadow(g,k,c,A,B,p,f,i,h!=null);
}g.setAlpha(i);
if(mxUtils.getValue(k.style,mxConstants.STYLE_DASHED,"0")=="1"){g.setDashed(true);
var r=k.style.dashPattern;
if(r!=null){g.setDashPattern(r);
}}if(z!=null||h!=null){if(z!=null){g.setStrokeColor(z);
}if(h!=null){if(t!=null&&t!="transparent"){g.setGradient(h,t,f.x,f.y,f.width,f.height,G);
}else{g.setFillColor(h);
}}J=c.drawShape(g,k,f,true,false)&&J;
c.drawShape(g,k,f,false,false);
}if(J&&mxUtils.getValue(k.style,mxConstants.STYLE_GLASS,0)==1){this.drawGlass(k,g,l,c,this.glassSize);
}if(D||x==mxConstants.SHAPE_LABEL){var n=k.view.graph.getImage(k);
if(n!=null){var v=this.getImageBounds(k);
if(v!=null){this.drawImage(k,g,v,n);
}}}g.restore();
var u=k.text;
var o=k.view.graph.getLabel(k.cell);
if(u!=null&&o!=null&&o.length>0){g.save();
g.setAlpha(mxUtils.getValue(k.style,mxConstants.STYLE_TEXT_OPACITY,100)/100);
var m=new mxRectangle(u.boundingBox.x,u.boundingBox.y,u.boundingBox.width,u.boundingBox.height);
var C=mxUtils.getValue(k.style,mxConstants.STYLE_HORIZONTAL,1)==0;
m.y+=2;
if(C){if(u.dialect!=mxConstants.DIALECT_SVG){var e=m.x+m.width/2;
var d=m.y+m.height/2;
var E=m.width;
m.width=m.height;
m.height=E;
m.x=e-m.width/2;
m.y=d-m.height/2;
}else{if(u.dialect==mxConstants.DIALECT_SVG){var F=k.y+k.height;
var e=m.getCenterX()-k.x;
var d=m.getCenterY()-k.y;
var q=F-e-m.height/2;
m.x=k.x+d-m.width/2;
m.y=q;
}}}this.drawLabelBackground(k,g,m,C);
this.drawLabel(k,g,m,C,o);
g.restore();
}};
mxImageExport.prototype.drawShadow=function(d,b,g,m,k,c,a,e,n){var i=m*Math.PI/180;
var l=Math.cos(-i);
var h=Math.sin(-i);
var f=mxUtils.getRotatedPoint(new mxPoint(mxConstants.SHADOW_OFFSET_X,mxConstants.SHADOW_OFFSET_Y),l,h);
if(k){f.x*=-1;
}if(c){f.y*=-1;
}d.translate(f.x,f.y);
if(g.drawShape(d,b,a,true,true)){d.setAlpha(mxConstants.SHADOW_OPACITY*e);
d.shadow(mxConstants.SHADOWCOLOR,n);
}d.translate(-f.x,-f.y);
};
mxImageExport.prototype.drawGlass=function(e,b,d,a,c){if(a.drawShape(b,e,d,true,false)){b.save();
b.clip();
b.setGlassGradient(d.x,d.y,d.width,d.height);
b.begin();
b.moveTo(d.x,d.y);
b.lineTo(d.x,(d.y+d.height*c));
b.quadTo((d.x+d.width*0.5),(d.y+d.height*0.7),d.x+d.width,(d.y+d.height*c));
b.lineTo(d.x+d.width,d.y);
b.close();
b.fill();
b.restore();
}};
mxImageExport.prototype.drawImage=function(e,b,d,g){var a=mxUtils.getValue(e.style,mxConstants.STYLE_IMAGE_ASPECT,1)==1;
var f=mxUtils.getValue(e.style,mxConstants.STYLE_IMAGE_FLIPH,0)==1;
var c=mxUtils.getValue(e.style,mxConstants.STYLE_IMAGE_FLIPV,0)==1;
b.image(d.x,d.y,d.width,d.height,g,a,f,c);
};
mxImageExport.prototype.drawLabelBackground=function(b,c,a,f){var l=mxUtils.getValue(b.style,mxConstants.STYLE_LABEL_BORDERCOLOR);
var m=mxUtils.getValue(b.style,mxConstants.STYLE_LABEL_BACKGROUNDCOLOR);
if(l==mxConstants.NONE){l=null;
}if(m==mxConstants.NONE){m=null;
}if(l!=null||m!=null){var i=a.x;
var g=a.y-mxUtils.getValue(b.style,mxConstants.STYLE_LABEL_PADDING,0);
var k=a.width;
var e=a.height;
if(f){i+=(k-e)/2;
g+=(e-k)/2;
var d=k;
k=e;
e=d;
}if(m!=null){c.setFillColor(m);
}if(l!=null){c.setStrokeColor(l);
c.setStrokeWidth(1);
c.setDashed(false);
}c.rect(i,g,k,e);
if(m!=null&&l!=null){c.fillAndStroke();
}else{if(m!=null){c.fill();
}else{if(l!=null){c.stroke();
}}}}};
mxImageExport.prototype.drawLabel=function(b,d,a,g,i){var e=b.view.scale;
d.setFontColor(mxUtils.getValue(b.style,mxConstants.STYLE_FONTCOLOR,"#000000"));
d.setFontFamily(mxUtils.getValue(b.style,mxConstants.STYLE_FONTFAMILY,mxConstants.DEFAULT_FONTFAMILY));
d.setFontStyle(mxUtils.getValue(b.style,mxConstants.STYLE_FONTSTYLE,0));
d.setFontSize(mxUtils.getValue(b.style,mxConstants.STYLE_FONTSIZE,mxConstants.DEFAULT_FONTSIZE)*e);
var h=mxUtils.getValue(b.style,mxConstants.STYLE_ALIGN,mxConstants.ALIGN_LEFT);
if(h=="left"){h=null;
}var k=a.y-mxUtils.getValue(b.style,mxConstants.STYLE_LABEL_PADDING,0);
var c=b.view.graph.isWrapping(b.cell);
var f=b.view.graph.isHtmlLabel(b.cell);
if(f&&mxText.prototype.replaceLinefeeds){i=i.replace(/\n/g,"<br/>");
}d.text(a.x,k,a.width,a.height,i,h,null,g,c,(f)?"html":"");
};
mxImageExport.prototype.getBackgroundBounds=function(c){if(c.style[mxConstants.STYLE_SHAPE]==mxConstants.SHAPE_SWIMLANE){var d=c.view.scale;
var e=mxUtils.getValue(c.style,mxConstants.STYLE_STARTSIZE,mxConstants.DEFAULT_STARTSIZE)*d;
var a=c.width;
var b=c.height;
if(mxUtils.getValue(c.style,mxConstants.STYLE_HORIZONTAL,true)){b=e;
}else{a=e;
}return new mxRectangle(c.x,c.y,Math.min(c.width,a),Math.min(c.height,b));
}else{return new mxRectangle(c.x,c.y,c.width,c.height);
}};
mxImageExport.prototype.getImageBounds=function(g){var e=new mxRectangle(g.x,g.y,g.width,g.height);
var d=g.style;
if(mxUtils.getValue(d,mxConstants.STYLE_SHAPE)!=mxConstants.SHAPE_IMAGE){var f=mxUtils.getValue(d,mxConstants.STYLE_IMAGE_ALIGN,mxConstants.ALIGN_LEFT);
var c=mxUtils.getValue(d,mxConstants.STYLE_IMAGE_VERTICAL_ALIGN,mxConstants.ALIGN_MIDDLE);
var b=mxUtils.getValue(d,mxConstants.STYLE_IMAGE_WIDTH,mxConstants.DEFAULT_IMAGESIZE);
var a=mxUtils.getValue(d,mxConstants.STYLE_IMAGE_HEIGHT,mxConstants.DEFAULT_IMAGESIZE);
var h=mxUtils.getValue(d,mxConstants.STYLE_SPACING,2);
if(f==mxConstants.ALIGN_CENTER){e.x+=(e.width-b)/2;
}else{if(f==mxConstants.ALIGN_RIGHT){e.x+=e.width-b-h-2;
}else{e.x+=h+4;
}}if(c==mxConstants.ALIGN_TOP){e.y+=h;
}else{if(c==mxConstants.ALIGN_BOTTOM){e.y+=e.height-a-h;
}else{e.y+=(e.height-a)/2;
}}e.width=b;
e.height=a;
}return e;
};
mxImageExport.prototype.drawMarker=function(c,b,a){var e=null;
var t=b.absolutePoints;
var d=t.length;
var q=(a)?t[1]:t[d-2];
var h=(a)?t[0]:t[d-1];
var s=h.x-q.x;
var p=h.y-q.y;
var k=Math.max(1,Math.sqrt(s*s+p*p));
var m=s/k;
var l=p/k;
var r=mxUtils.getValue(b.style,(a)?mxConstants.STYLE_STARTSIZE:mxConstants.STYLE_ENDSIZE,mxConstants.DEFAULT_MARKERSIZE);
var o=mxUtils.getValue(b.style,mxConstants.STYLE_STROKEWIDTH,1);
h=h.clone();
var i=mxUtils.getValue(b.style,(a)?mxConstants.STYLE_STARTARROW:mxConstants.STYLE_ENDARROW);
var g=this.markers[i];
if(g!=null){e=g(c,b,i,h,m,l,r,a,o);
}return e;
};
mxImageExport.prototype.initShapes=function(){this.shapes=[];
this.shapes.rectangle={drawShape:function(b,h,e,c){if(c){if(mxUtils.getValue(h.style,mxConstants.STYLE_ROUNDED,false)){var g=mxUtils.getValue(h.style,mxConstants.STYLE_ARCSIZE,mxConstants.RECTANGLE_ROUNDING_FACTOR*100)/100;
var d=Math.min(e.width*g,e.height*g);
b.roundrect(e.x,e.y,e.width,e.height,d,d);
}else{b.rect(e.x,e.y,e.width,e.height);
}return true;
}else{b.fillAndStroke();
}}};
this.shapes.swimlane={drawShape:function(f,d,b,e){if(e){if(mxUtils.getValue(d.style,mxConstants.STYLE_ROUNDED,false)){var c=Math.min(b.width*mxConstants.RECTANGLE_ROUNDING_FACTOR,b.height*mxConstants.RECTANGLE_ROUNDING_FACTOR);
f.roundrect(b.x,b.y,b.width,b.height,c,c);
}else{f.rect(b.x,b.y,b.width,b.height);
}return true;
}else{f.fillAndStroke();
f.begin();
var k=d.x;
var i=d.y;
var l=d.width;
var g=d.height;
if(mxUtils.getValue(d.style,mxConstants.STYLE_HORIZONTAL,1)==0){k+=b.width;
l-=b.width;
f.moveTo(k,i);
f.lineTo(k+l,i);
f.lineTo(k+l,i+g);
f.lineTo(k,i+g);
}else{i+=b.height;
g-=b.height;
f.moveTo(k,i);
f.lineTo(k,i+g);
f.lineTo(k+l,i+g);
f.lineTo(k+l,i);
}f.stroke();
}}};
this.shapes.image=this.shapes.rectangle;
this.shapes.label=this.shapes.rectangle;
var a=this;
this.shapes.connector={translatePoint:function(c,b,e){if(e!=null){var d=c[b].clone();
d.x+=e.x;
d.y+=e.y;
c[b]=d;
}},drawShape:function(g,k,m,z,l){if(z){g.setFillColor((l)?mxConstants.NONE:mxUtils.getValue(k.style,mxConstants.STYLE_STROKECOLOR,"#000000"));
g.setDashed(false);
var G=k.absolutePoints.slice();
this.translatePoint(G,0,a.drawMarker(g,k,true));
this.translatePoint(G,G.length-1,a.drawMarker(g,k,false));
g.setDashed(mxUtils.getValue(k.style,mxConstants.STYLE_DASHED,"0")=="1");
g.begin();
var u=G[0];
g.moveTo(u.x,u.y);
if(mxUtils.getValue(k.style,mxConstants.STYLE_CURVED,false)){var w=G.length;
for(var x=1;
x<w-2;
x++){var c=G[x];
var b=G[x+1];
var h=(c.x+b.x)/2;
var f=(c.y+b.y)/2;
g.quadTo(c.x,c.y,h,f);
}var c=G[w-2];
var b=G[w-1];
g.quadTo(c.x,c.y,b.x,b.y);
}else{var C=mxUtils.getValue(k.style,mxConstants.STYLE_ROUNDED,false);
var v=mxConstants.LINE_ARCSIZE/2;
var E=G[G.length-1];
g.moveTo(u.x,u.y);
for(var x=1;
x<G.length-1;
x++){var B=G[x];
var p=u.x-B.x;
var o=u.y-B.y;
if((C&&x<G.length-1)&&(p!=0||o!=0)){var t=Math.sqrt(p*p+o*o);
var s=p*Math.min(v,t/2)/t;
var F=o*Math.min(v,t/2)/t;
var A=B.x+s;
var e=B.y+F;
g.lineTo(A,e);
var r=G[x+1];
p=r.x-B.x;
o=r.y-B.y;
t=Math.max(1,Math.sqrt(p*p+o*o));
var q=p*Math.min(v,t/2)/t;
var D=o*Math.min(v,t/2)/t;
var y=B.x+q;
var d=B.y+D;
g.curveTo(B.x,B.y,B.x,B.y,y,d);
B=new mxPoint(y,d);
}else{g.lineTo(B.x,B.y);
}u=B;
}g.lineTo(E.x,E.y);
}g.stroke();
return true;
}else{}}};
this.shapes.arrow={drawShape:function(f,i,m,B){if(B){var h=mxConstants.ARROW_SPACING;
var w=mxConstants.ARROW_WIDTH;
var e=mxConstants.ARROW_SIZE;
var F=i.absolutePoints;
var d=F[0];
var E=F[F.length-1];
var u=E.x-d.x;
var t=E.y-d.y;
var v=Math.sqrt(u*u+t*t);
var g=v-2*h-e;
var D=u/v;
var C=t/v;
var o=g*D;
var n=g*C;
var l=w*C/3;
var k=-w*D/3;
var z=d.x-l/2+h*D;
var x=d.y-k/2+h*C;
var c=z+l;
var b=x+k;
var r=c+o;
var p=b+n;
var A=r+l;
var y=p+k;
var s=A-3*l;
var q=y-3*k;
f.begin();
f.moveTo(z,x);
f.lineTo(c,b);
f.lineTo(r,p);
f.lineTo(A,y);
f.lineTo(E.x-h*D,E.y-h*C);
f.lineTo(s,q);
f.lineTo(s+l,q+k);
f.close();
return true;
}else{f.fillAndStroke();
}}};
this.shapes.cylinder={drawShape:function(e,c,b,d){if(d){return false;
}else{var i=b.x;
var g=b.y;
var k=b.width;
var f=b.height;
var l=Math.min(mxCylinder.prototype.maxHeight,Math.floor(f/5));
e.begin();
e.moveTo(i,g+l);
e.curveTo(i,g-l/3,i+k,g-l/3,i+k,g+l);
e.lineTo(i+k,g+f-l);
e.curveTo(i+k,g+f+l/3,i,g+f+l/3,i,g+f-l);
e.close();
e.fillAndStroke();
e.begin();
e.moveTo(i,g+l);
e.curveTo(i,g+2*l,i+k,g+2*l,i+k,g+l);
e.stroke();
}}};
this.shapes.line={drawShape:function(c,f,e,d){if(d){return false;
}else{c.begin();
var b=f.getCenterY();
c.moveTo(e.x,b);
c.lineTo(e.x+e.width,b);
c.stroke();
}}};
this.shapes.ellipse={drawShape:function(b,e,d,c){if(c){b.ellipse(d.x,d.y,d.width,d.height);
return true;
}else{b.fillAndStroke();
}}};
this.shapes.doubleEllipse={drawShape:function(e,c,b,d){var i=b.x;
var g=b.y;
var k=b.width;
var f=b.height;
if(d){e.ellipse(i,g,k,f);
return true;
}else{e.fillAndStroke();
var l=Math.min(4,Math.min(k/5,f/5));
i+=l;
g+=l;
k-=2*l;
f-=2*l;
if(k>0&&f>0){e.ellipse(i,g,k,f);
}e.stroke();
}}};
this.shapes.triangle={drawShape:function(d,i,g,e){if(e){var b=g.x;
var k=g.y;
var c=g.width;
var f=g.height;
d.begin();
d.moveTo(b,k);
d.lineTo(b+c,k+f/2);
d.lineTo(b,k+f);
d.close();
return true;
}else{d.fillAndStroke();
}}};
this.shapes.rhombus={drawShape:function(e,c,b,d){if(d){var l=b.x;
var k=b.y;
var m=b.width;
var g=b.height;
var i=m/2;
var f=g/2;
e.begin();
e.moveTo(l+i,k);
e.lineTo(l+m,k+f);
e.lineTo(l+i,k+g);
e.lineTo(l,k+f);
e.close();
return true;
}else{e.fillAndStroke();
}}};
this.shapes.hexagon={drawShape:function(d,i,g,e){if(e){var b=g.x;
var k=g.y;
var c=g.width;
var f=g.height;
d.begin();
d.moveTo(b+0.25*c,k);
d.lineTo(b+0.75*c,k);
d.lineTo(b+c,k+0.5*f);
d.lineTo(b+0.75*c,k+f);
d.lineTo(b+0.25*c,k+f);
d.lineTo(b,k+0.5*f);
d.close();
return true;
}else{d.fillAndStroke();
}}};
this.shapes.actor={drawShape:function(f,c,b,d){if(d){var k=b.x;
var i=b.y;
var l=b.width;
var g=b.height;
var e=l*2/6;
f.begin();
f.moveTo(k,i+g);
f.curveTo(k,i+3*g/5,k,i+2*g/5,k+l/2,i+2*g/5);
f.curveTo(k+l/2-e,i+2*g/5,k+l/2-e,i,k+l/2,i);
f.curveTo(k+l/2+e,i,k+l/2+e,i+2*g/5,k+l/2,i+2*g/5);
f.curveTo(k+l,i+2*g/5,k+l,i+3*g/5,k+l,i+g);
f.close();
return true;
}else{f.fillAndStroke();
}}};
this.shapes.cloud={drawShape:function(d,i,g,e){if(e){var b=g.x;
var k=g.y;
var c=g.width;
var f=g.height;
d.begin();
d.moveTo(b+0.25*c,k+0.25*f);
d.curveTo(b+0.05*c,k+0.25*f,b,k+0.5*f,b+0.16*c,k+0.55*f);
d.curveTo(b,k+0.66*f,b+0.18*c,k+0.9*f,b+0.31*c,k+0.8*f);
d.curveTo(b+0.4*c,k+f,b+0.7*c,k+f,b+0.8*c,k+0.8*f);
d.curveTo(b+c,k+0.8*f,b+c,k+0.6*f,b+0.875*c,k+0.5*f);
d.curveTo(b+c,k+0.3*f,b+0.8*c,k+0.1*f,b+0.625*c,k+0.2*f);
d.curveTo(b+0.5*c,k+0.05*f,b+0.3*c,k+0.05*f,b+0.25*c,k+0.25*f);
d.close();
return true;
}else{d.fillAndStroke();
}}};
};
mxImageExport.prototype.initMarkers=function(){this.markers=[];
var a=function(g,d,l,k,n,m,q,c,o){var h=n*o*1.118;
var e=m*o*1.118;
k.x-=h;
k.y-=e;
n=n*(q+o);
m=m*(q+o);
g.begin();
g.moveTo(k.x,k.y);
g.lineTo(k.x-n-m/2,k.y-m+n/2);
if(l==mxConstants.ARROW_CLASSIC){g.lineTo(k.x-n*3/4,k.y-m*3/4);
}g.lineTo(k.x+m/2-n,k.y-m-n/2);
g.close();
var p=(c)?mxConstants.STYLE_STARTFILL:mxConstants.STYLE_ENDFILL;
if(d.style[p]==0){g.stroke();
}else{g.fillAndStroke();
}var i=(l!=mxConstants.ARROW_CLASSIC)?1:3/4;
return new mxPoint(-n*i-h,-m*i-e);
};
this.markers.classic=a;
this.markers.block=a;
this.markers.open=function(f,d,i,h,l,k,n,c,m){var g=l*m*1.118;
var e=k*m*1.118;
h.x-=g;
h.y-=e;
l=l*(n+m);
k=k*(n+m);
f.begin();
f.moveTo(h.x-l-k/2,h.y-k+l/2);
f.lineTo(h.x,h.y);
f.lineTo(h.x+k/2-l,h.y-k-l/2);
f.stroke();
return new mxPoint(-g*2,-e*2);
};
this.markers.oval=function(e,d,g,f,k,h,n,c,l){var i=n/2;
e.ellipse(f.x-i,f.y-i,n,n);
var m=(c)?mxConstants.STYLE_STARTFILL:mxConstants.STYLE_ENDFILL;
if(d.style[m]==0){e.stroke();
}else{e.fillAndStroke();
}return new mxPoint(-k/2,-h/2);
};
var b=function(f,d,i,h,m,l,q,c,n){var k=(i==mxConstants.ARROW_DIAMOND)?0.7071:0.9862;
var g=m*n*k;
var e=l*n*k;
m=m*(q+n);
l=l*(q+n);
h.x-=g;
h.y-=e;
var p=((i==mxConstants.ARROW_DIAMOND)?2:3.4);
f.begin();
f.moveTo(h.x,h.y);
f.lineTo(h.x-m/2-l/p,h.y+m/p-l/2);
f.lineTo(h.x-m,h.y-l);
f.lineTo(h.x-m/2+l/p,h.y-l/2-m/p);
f.close();
var o=(c)?mxConstants.STYLE_STARTFILL:mxConstants.STYLE_ENDFILL;
if(d.style[o]==0){f.stroke();
}else{f.fillAndStroke();
}return new mxPoint(-g-m,-e-l);
};
this.markers.diamond=b;
this.markers.diamondThin=b;
};
var mxXmlCanvas2D=function(c){var e=new mxUrlConverter();
var d=true;
var b=true;
var g=c.ownerDocument;
var a=[];
var f={alpha:1,dashed:false,strokewidth:1,fontsize:mxConstants.DEFAULT_FONTSIZE,fontfamily:mxConstants.DEFAULT_FONTFAMILY,fontcolor:"#000000"};
var h=function(i){return Math.round(parseFloat(i)*100)/100;
};
return{getConverter:function(){return e;
},isCompressed:function(){return d;
},setCompressed:function(i){d=i;
},isTextEnabled:function(){return b;
},setTextEnabled:function(i){b=i;
},getDocument:function(){return g;
},save:function(){if(d){a.push(f);
f=mxUtils.clone(f);
}c.appendChild(g.createElement("save"));
},restore:function(){if(d){f=a.pop();
}c.appendChild(g.createElement("restore"));
},scale:function(k){var i=g.createElement("scale");
i.setAttribute("scale",k);
c.appendChild(i);
},translate:function(k,i){var l=g.createElement("translate");
l.setAttribute("dx",h(k));
l.setAttribute("dy",h(i));
c.appendChild(l);
},rotate:function(k,n,l,i,o){var m=g.createElement("rotate");
m.setAttribute("theta",h(k));
m.setAttribute("flipH",(n)?"1":"0");
m.setAttribute("flipV",(l)?"1":"0");
m.setAttribute("cx",h(i));
m.setAttribute("cy",h(o));
c.appendChild(m);
},setStrokeWidth:function(k){if(d){if(f.strokewidth==k){return;
}f.strokewidth=k;
}var i=g.createElement("strokewidth");
i.setAttribute("width",h(k));
c.appendChild(i);
},setStrokeColor:function(k){var i=g.createElement("strokecolor");
i.setAttribute("color",k);
c.appendChild(i);
},setDashed:function(k){if(d){if(f.dashed==k){return;
}f.dashed=k;
}var i=g.createElement("dashed");
i.setAttribute("dashed",(k)?"1":"0");
c.appendChild(i);
},setDashPattern:function(k){var i=g.createElement("dashpattern");
i.setAttribute("pattern",k);
c.appendChild(i);
},setLineCap:function(k){var i=g.createElement("linecap");
i.setAttribute("cap",k);
c.appendChild(i);
},setLineJoin:function(k){var i=g.createElement("linejoin");
i.setAttribute("join",k);
c.appendChild(i);
},setMiterLimit:function(k){var i=g.createElement("miterlimit");
i.setAttribute("limit",k);
c.appendChild(i);
},setFontSize:function(k){if(b){if(d){if(f.fontsize==k){return;
}f.fontsize=k;
}var i=g.createElement("fontsize");
i.setAttribute("size",k);
c.appendChild(i);
}},setFontColor:function(k){if(b){if(d){if(f.fontcolor==k){return;
}f.fontcolor=k;
}var i=g.createElement("fontcolor");
i.setAttribute("color",k);
c.appendChild(i);
}},setFontFamily:function(k){if(b){if(d){if(f.fontfamily==k){return;
}f.fontfamily=k;
}var i=g.createElement("fontfamily");
i.setAttribute("family",k);
c.appendChild(i);
}},setFontStyle:function(k){if(b){var i=g.createElement("fontstyle");
i.setAttribute("style",k);
c.appendChild(i);
}},setAlpha:function(k){if(d){if(f.alpha==k){return;
}f.alpha=k;
}var i=g.createElement("alpha");
i.setAttribute("alpha",h(k));
c.appendChild(i);
},setFillColor:function(k){var i=g.createElement("fillcolor");
i.setAttribute("color",k);
c.appendChild(i);
},setGradient:function(m,k,i,q,l,n,p){var o=g.createElement("gradient");
o.setAttribute("c1",m);
o.setAttribute("c2",k);
o.setAttribute("x",h(i));
o.setAttribute("y",h(q));
o.setAttribute("w",h(l));
o.setAttribute("h",h(n));
if(p!=null){o.setAttribute("direction",p);
}c.appendChild(o);
},setGlassGradient:function(i,n,k,l){var m=g.createElement("glass");
m.setAttribute("x",h(i));
m.setAttribute("y",h(n));
m.setAttribute("w",h(k));
m.setAttribute("h",h(l));
c.appendChild(m);
},rect:function(i,n,k,l){var m=g.createElement("rect");
m.setAttribute("x",h(i));
m.setAttribute("y",h(n));
m.setAttribute("w",h(k));
m.setAttribute("h",h(l));
c.appendChild(m);
},roundrect:function(i,p,l,n,m,k){var o=g.createElement("roundrect");
o.setAttribute("x",h(i));
o.setAttribute("y",h(p));
o.setAttribute("w",h(l));
o.setAttribute("h",h(n));
o.setAttribute("dx",h(m));
o.setAttribute("dy",h(k));
c.appendChild(o);
},ellipse:function(i,n,k,l){var m=g.createElement("ellipse");
m.setAttribute("x",h(i));
m.setAttribute("y",h(n));
m.setAttribute("w",h(k));
m.setAttribute("h",h(l));
c.appendChild(m);
},image:function(q,p,r,n,i,k,o,l){i=e.convert(i);
var m=g.createElement("image");
m.setAttribute("x",h(q));
m.setAttribute("y",h(p));
m.setAttribute("w",h(r));
m.setAttribute("h",h(n));
m.setAttribute("src",i);
m.setAttribute("aspect",(k)?"1":"0");
m.setAttribute("flipH",(o)?"1":"0");
m.setAttribute("flipV",(l)?"1":"0");
c.appendChild(m);
},text:function(r,p,t,m,o,n,q,l,i,s){if(b){var k=g.createElement("text");
k.setAttribute("x",h(r));
k.setAttribute("y",h(p));
k.setAttribute("w",h(t));
k.setAttribute("h",h(m));
k.setAttribute("str",o);
if(n!=null){k.setAttribute("align",n);
}if(q!=null){k.setAttribute("valign",q);
}k.setAttribute("vertical",(l)?"1":"0");
k.setAttribute("wrap",(i)?"1":"0");
k.setAttribute("format",s);
c.appendChild(k);
}},begin:function(){c.appendChild(g.createElement("begin"));
},moveTo:function(i,l){var k=g.createElement("move");
k.setAttribute("x",h(i));
k.setAttribute("y",h(l));
c.appendChild(k);
},lineTo:function(i,l){var k=g.createElement("line");
k.setAttribute("x",h(i));
k.setAttribute("y",h(l));
c.appendChild(k);
},quadTo:function(k,m,i,l){var n=g.createElement("quad");
n.setAttribute("x1",h(k));
n.setAttribute("y1",h(m));
n.setAttribute("x2",h(i));
n.setAttribute("y2",h(l));
c.appendChild(n);
},curveTo:function(m,o,k,n,i,l){var p=g.createElement("curve");
p.setAttribute("x1",h(m));
p.setAttribute("y1",h(o));
p.setAttribute("x2",h(k));
p.setAttribute("y2",h(n));
p.setAttribute("x3",h(i));
p.setAttribute("y3",h(l));
c.appendChild(p);
},close:function(){c.appendChild(g.createElement("close"));
},stroke:function(){c.appendChild(g.createElement("stroke"));
},fill:function(){c.appendChild(g.createElement("fill"));
},fillAndStroke:function(){c.appendChild(g.createElement("fillstroke"));
},shadow:function(l,k){var i=g.createElement("shadow");
i.setAttribute("value",l);
if(k!=null){i.setAttribute("filled",(k)?"1":"0");
}c.appendChild(i);
},clip:function(){c.appendChild(g.createElement("clip"));
}};
};
var mxSvgCanvas2D=function(r,k){k=(k!=null)?k:false;
var u=new mxUrlConverter();
var s=true;
var e=true;
var v=true;
var n=function(z,A){var B=r.ownerDocument||document;
if(B.createElementNS!=null){return B.createElementNS(A||mxConstants.NS_SVG,z);
}else{var y=B.createElement(z);
if(A!=null){y.setAttribute("xmlns",A);
}return y;
}};
var b=n("defs");
if(k){var t=n("style");
t.setAttribute("type","text/css");
mxUtils.write(t,"svg{font-family:"+mxConstants.DEFAULT_FONTFAMILY+";font-size:"+mxConstants.DEFAULT_FONTSIZE+";fill:none;stroke-miterlimit:10}");
if(s){mxUtils.write(t,"rect{shape-rendering:crispEdges}");
}b.appendChild(t);
}r.appendChild(b);
var x={dx:0,dy:0,scale:1,transform:"",fill:null,gradient:null,stroke:null,strokeWidth:1,dashed:false,dashpattern:"3 3",alpha:1,linecap:"flat",linejoin:"miter",miterlimit:10,fontColor:"#000000",fontSize:mxConstants.DEFAULT_FONTSIZE,fontFamily:mxConstants.DEFAULT_FONTFAMILY,fontStyle:0};
var i=true;
var o=null;
var f=null;
var d=null;
var g=null;
var p=[];
var m=0;
var l=[];
var w=function(C,y,B){if(C.charAt(0)=="#"){C=C.substring(1);
}if(y.charAt(0)=="#"){y=y.substring(1);
}C=C.toLowerCase();
y=y.toLowerCase();
var z=null;
if(B==null||B==mxConstants.DIRECTION_SOUTH){z="s";
}else{if(B==mxConstants.DIRECTION_EAST){z="e";
}else{var A=C;
C=y;
y=A;
if(B==mxConstants.DIRECTION_NORTH){z="s";
}else{if(B==mxConstants.DIRECTION_WEST){z="e";
}}}}return C+"-"+y+"-"+z;
};
var h=function(C,D,z){var A="margin:0px;font-size:"+Math.floor(x.fontSize)+"px;font-family:"+x.fontFamily+";color:"+x.fontColor+";";
if((x.fontStyle&mxConstants.FONT_BOLD)==mxConstants.FONT_BOLD){A+="font-weight:bold;";
}if((x.fontStyle&mxConstants.FONT_ITALIC)==mxConstants.FONT_ITALIC){A+="font-style:italic;";
}if((x.fontStyle&mxConstants.FONT_UNDERLINE)==mxConstants.FONT_UNDERLINE){A+="font-decoration:underline;";
}if(D==mxConstants.ALIGN_CENTER){A+="text-align:center;";
}else{if(D==mxConstants.ALIGN_RIGHT){A+="text-align:right;";
}}var y=document.createElement("div");
y.innerHTML=C;
C=y.innerHTML.replace(/&nbsp;/g,"&#160;");
var B=mxUtils.parseXml('<div xmlns="http://www.w3.org/1999/xhtml" style="'+A+'">'+C+"</div>").documentElement;
return B;
};
var c=function(D,y,B){var C=w(D,y,B);
var A=p[C];
if(A==null){A=n("linearGradient");
A.setAttribute("id",++m);
A.setAttribute("x1","0%");
A.setAttribute("y1","0%");
A.setAttribute("x2","0%");
A.setAttribute("y2","0%");
if(B==null||B==mxConstants.DIRECTION_SOUTH){A.setAttribute("y2","100%");
}else{if(B==mxConstants.DIRECTION_EAST){A.setAttribute("x2","100%");
}else{if(B==mxConstants.DIRECTION_NORTH){A.setAttribute("y1","100%");
}else{if(B==mxConstants.DIRECTION_WEST){A.setAttribute("x1","100%");
}}}}var z=n("stop");
z.setAttribute("offset","0%");
z.setAttribute("style","stop-color:"+D);
A.appendChild(z);
z=n("stop");
z.setAttribute("offset","100%");
z.setAttribute("style","stop-color:"+y);
A.appendChild(z);
b.appendChild(A);
p[C]=A;
}return A.getAttribute("id");
};
var a=function(B,E,D,A){if(B!=null){if(E.clip!=null){B.setAttribute("clip-path","url(#"+E.clip+")");
E.clip=null;
}if(d!=null){B.setAttribute("d",d.join(" "));
d=null;
if(s&&i){B.setAttribute("shape-rendering","crispEdges");
E.strokeWidth=Math.max(1,E.strokeWidth);
}}if(E.alpha<1){B.setAttribute("opacity",E.alpha);
}if(D&&(E.fill!=null||E.gradient!=null)){if(E.gradient!=null){B.setAttribute("fill","url(#"+E.gradient+")");
}else{B.setAttribute("fill",E.fill.toLowerCase());
}}else{if(!k){B.setAttribute("fill","none");
}}if(A&&E.stroke!=null){B.setAttribute("stroke",E.stroke.toLowerCase());
if(E.strokeWidth!=1){if(B.nodeName=="rect"&&s){E.strokeWidth=Math.max(1,E.strokeWidth);
}B.setAttribute("stroke-width",E.strokeWidth);
}if(B.nodeName=="path"){if(E.linejoin!=null&&E.linejoin!="miter"){B.setAttribute("stroke-linejoin",E.linejoin);
}if(E.linecap!=null){var C=E.linecap;
if(C=="flat"){C="butt";
}if(C!="butt"){B.setAttribute("stroke-linecap",C);
}}if(E.miterlimit!=null&&(!k||E.miterlimit!=10)){B.setAttribute("stroke-miterlimit",E.miterlimit);
}}if(E.dashed){var F=E.dashpattern.split(" ");
if(F.length>0){var y=[];
for(var z=0;
z<F.length;
z++){y[z]=Number(F[z])*x.strokeWidth;
}B.setAttribute("stroke-dasharray",y.join(" "));
}}}if(E.transform.length>0){B.setAttribute("transform",E.transform);
}r.appendChild(B);
}};
var q=function(y){return Math.round(parseFloat(y)*100)/100;
};
return{getConverter:function(){return u;
},isAutoAntiAlias:function(){return s;
},setAutoAntiAlias:function(y){s=y;
},isTextEnabled:function(){return e;
},setTextEnabled:function(y){e=y;
},isFoEnabled:function(){return v;
},setFoEnabled:function(y){v=y;
},save:function(){l.push(x);
x=mxUtils.clone(x);
},restore:function(){x=l.pop();
},scale:function(y){x.scale*=y;
x.strokeWidth*=y;
},translate:function(z,y){x.dx+=z;
x.dy+=y;
},rotate:function(z,E,y,B,A){B+=x.dx;
A+=x.dy;
B*=x.scale;
A*=x.scale;
if(E^y){var D=(E)?B:0;
var G=(E)?-1:1;
var C=(y)?A:0;
var F=(y)?-1:1;
x.transform+="translate("+q(D)+","+q(C)+")";
x.transform+="scale("+q(G)+","+q(F)+")";
x.transform+="translate("+q(-D)+" "+q(-C)+")";
}x.transform+="rotate("+q(z)+","+q(B)+","+q(A)+")";
},setStrokeWidth:function(y){x.strokeWidth=y*x.scale;
},setStrokeColor:function(y){x.stroke=y;
},setDashed:function(y){x.dashed=y;
},setDashPattern:function(y){x.dashpattern=y;
},setLineCap:function(y){x.linecap=y;
},setLineJoin:function(y){x.linejoin=y;
},setMiterLimit:function(y){x.miterlimit=y;
},setFontSize:function(y){x.fontSize=y;
},setFontColor:function(y){x.fontColor=y;
},setFontFamily:function(y){x.fontFamily=y;
},setFontStyle:function(y){x.fontStyle=y;
},setAlpha:function(y){x.alpha=y;
},setFillColor:function(y){x.fill=y;
x.gradient=null;
},setGradient:function(C,A,z,F,B,D,E){if(C!=null&&A!=null){x.gradient=c(C,A,E);
x.fill=C;
}},setGlassGradient:function(z,E,A,C){if(o==null){o=n("linearGradient");
o.setAttribute("id","0");
o.setAttribute("x1","0%");
o.setAttribute("y1","0%");
o.setAttribute("x2","0%");
o.setAttribute("y2","100%");
var D=n("stop");
D.setAttribute("offset","0%");
D.setAttribute("style","stop-color:#ffffff;stop-opacity:0.9");
o.appendChild(D);
var B=n("stop");
B.setAttribute("offset","100%");
B.setAttribute("style","stop-color:#ffffff;stop-opacity:0.1");
o.appendChild(B);
if(b.firstChild.nextSibling!=null){b.insertBefore(o,b.firstChild.nextSibling);
}else{b.appendChild(o);
}}x.gradient="0";
},rect:function(z,C,A,B){z+=x.dx;
C+=x.dy;
f=n("rect");
f.setAttribute("x",q(z*x.scale));
f.setAttribute("y",q(C*x.scale));
f.setAttribute("width",q(A*x.scale));
f.setAttribute("height",q(B*x.scale));
if(!k&&s){f.setAttribute("shape-rendering","crispEdges");
}},roundrect:function(z,E,B,D,C,A){z+=x.dx;
E+=x.dy;
f=n("rect");
f.setAttribute("x",q(z*x.scale));
f.setAttribute("y",q(E*x.scale));
f.setAttribute("width",q(B*x.scale));
f.setAttribute("height",q(D*x.scale));
if(C>0){f.setAttribute("rx",q(C*x.scale));
}if(A>0){f.setAttribute("ry",q(A*x.scale));
}if(!k&&s){f.setAttribute("shape-rendering","crispEdges");
}},ellipse:function(z,C,A,B){z+=x.dx;
C+=x.dy;
f=n("ellipse");
f.setAttribute("cx",q((z+A/2)*x.scale));
f.setAttribute("cy",q((C+B/2)*x.scale));
f.setAttribute("rx",q(A/2*x.scale));
f.setAttribute("ry",q(B/2*x.scale));
},image:function(J,H,K,D,z,A,F,B){z=u.convert(z);
A=(A!=null)?A:true;
F=(F!=null)?F:false;
B=(B!=null)?B:false;
J+=x.dx;
H+=x.dy;
var C=n("image");
C.setAttribute("x",q(J*x.scale));
C.setAttribute("y",q(H*x.scale));
C.setAttribute("width",q(K*x.scale));
C.setAttribute("height",q(D*x.scale));
if(mxClient.IS_VML){C.setAttribute("xlink:href",z);
}else{C.setAttributeNS(mxConstants.NS_XLINK,"xlink:href",z);
}if(!A){C.setAttribute("preserveAspectRatio","none");
}if(x.alpha<1){C.setAttribute("opacity",x.alpha);
}var E=x.transform;
if(F||B){var I=1;
var G=1;
var M=0;
var L=0;
if(F){I=-1;
M=-K-2*J;
}if(B){G=-1;
L=-D-2*H;
}E+="scale("+I+","+G+")translate("+M+","+L+")";
}if(E.length>0){C.setAttribute("transform",E);
}r.appendChild(C);
},text:function(L,J,N,V,Q,S,G,C,K,U){if(e){L+=x.dx;
J+=x.dy;
if(v&&U=="html"){var R=n("g");
R.setAttribute("transform",x.transform+"scale("+x.scale+","+x.scale+")");
if(x.alpha<1){R.setAttribute("opacity",x.alpha);
}var I=n("foreignObject");
I.setAttribute("x",Math.round(L));
I.setAttribute("y",Math.round(J));
I.setAttribute("width",Math.round(N));
I.setAttribute("height",Math.round(V));
I.appendChild(h(Q,S,G));
R.appendChild(I);
r.appendChild(R);
}else{var P=Math.floor(x.fontSize);
var R=n("g");
var B=x.transform;
if(C){var F=L+N/2;
var D=J+V/2;
B+="rotate(-90,"+q(F*x.scale)+","+q(D*x.scale)+")";
}if(B.length>0){R.setAttribute("transform",B);
}if(x.alpha<1){R.setAttribute("opacity",x.alpha);
}var H=(S==mxConstants.ALIGN_RIGHT)?"end":(S==mxConstants.ALIGN_CENTER)?"middle":"start";
if(H=="end"){L+=Math.max(0,N-2);
}else{if(H=="middle"){L+=N/2;
}else{L+=(N>0)?2:0;
}}if((x.fontStyle&mxConstants.FONT_BOLD)==mxConstants.FONT_BOLD){R.setAttribute("font-weight","bold");
}if((x.fontStyle&mxConstants.FONT_ITALIC)==mxConstants.FONT_ITALIC){R.setAttribute("font-style","italic");
}if((x.fontStyle&mxConstants.FONT_UNDERLINE)==mxConstants.FONT_UNDERLINE){R.setAttribute("text-decoration","underline");
}if(H!="start"){R.setAttribute("text-anchor",H);
}if(!k||P!=mxConstants.DEFAULT_FONTSIZE){R.setAttribute("font-size",Math.floor(P*x.scale)+"px");
}if(!k||x.fontFamily!=mxConstants.DEFAULT_FONTFAMILY){R.setAttribute("font-family",x.fontFamily);
}R.setAttribute("fill",x.fontColor);
var A=Q.split("\n");
var E=P*1.25;
var z=(V>0)?P+(A.length-1)*E:A.length*E-1;
var M=V-z;
if(G==null||G==mxConstants.ALIGN_TOP){J=Math.max(J-3*x.scale,J+M/2+((V>0)?E/2-8:0));
}else{if(G==mxConstants.ALIGN_MIDDLE){J=J+M/2;
}else{if(G==mxConstants.ALIGN_BOTTOM){J=Math.min(J,J+M+2*x.scale);
}}}J+=P;
for(var T=0;
T<A.length;
T++){var O=n("text");
O.setAttribute("x",q(L*x.scale));
O.setAttribute("y",q(J*x.scale));
mxUtils.write(O,A[T]);
R.appendChild(O);
J+=P*1.3;
}r.appendChild(R);
}}},begin:function(){f=n("path");
d=[];
g=null;
i=true;
},moveTo:function(z,A){if(d!=null){z+=x.dx;
A+=x.dy;
d.push("M "+q(z*x.scale)+" "+q(A*x.scale));
if(s){g=new mxPoint(z,A);
}}},lineTo:function(z,A){if(d!=null){z+=x.dx;
A+=x.dy;
d.push("L "+q(z*x.scale)+" "+q(A*x.scale));
if(s){if(g!=null&&i&&z!=g.x&&A!=g.y){i=false;
}g=new mxPoint(z,A);
}}},quadTo:function(z,B,y,A){if(d!=null){z+=x.dx;
B+=x.dy;
y+=x.dx;
A+=x.dy;
d.push("Q "+q(z*x.scale)+" "+q(B*x.scale)+" "+q(y*x.scale)+" "+q(A*x.scale));
i=false;
}},curveTo:function(B,D,z,C,y,A){if(d!=null){B+=x.dx;
D+=x.dy;
z+=x.dx;
C+=x.dy;
y+=x.dx;
A+=x.dy;
d.push("C "+q(B*x.scale)+" "+q(D*x.scale)+" "+q(z*x.scale)+" "+q(C*x.scale)+" "+q(y*x.scale)+" "+q(A*x.scale));
i=false;
}},close:function(){if(d!=null){d.push("Z");
}},stroke:function(){a(f,x,false,true);
},fill:function(){a(f,x,true,false);
},fillAndStroke:function(){a(f,x,true,true);
},shadow:function(z,y){this.save();
this.setStrokeColor(z);
if(y){this.setFillColor(z);
this.fillAndStroke();
}else{this.stroke();
}this.restore();
},clip:function(){if(f!=null){if(d!=null){f.setAttribute("d",d.join(" "));
d=null;
}var z=++m;
var y=n("clipPath");
y.setAttribute("id",z);
y.appendChild(f);
b.appendChild(y);
x.clip=z;
}}};
};
function mxGuide(b,a){this.graph=b;
this.setStates(a);
}mxGuide.prototype.graph=null;
mxGuide.prototype.states=null;
mxGuide.prototype.horizontal=true;
mxGuide.prototype.vertical=true;
mxGuide.prototype.guideX=null;
mxGuide.prototype.guideY=null;
mxGuide.prototype.crisp=true;
mxGuide.prototype.setStates=function(a){this.states=a;
};
mxGuide.prototype.isEnabledForEvent=function(a){return true;
};
mxGuide.prototype.getGuideTolerance=function(){return this.graph.gridSize*this.graph.view.scale/2;
};
mxGuide.prototype.createGuideShape=function(b){var a=new mxPolyline([],mxConstants.GUIDE_COLOR,mxConstants.GUIDE_STROKEWIDTH);
a.crisp=this.crisp;
a.isDashed=true;
return a;
};
mxGuide.prototype.move=function(k,w,t){if(this.states!=null&&(this.horizontal||this.vertical)&&k!=null&&w!=null){var m=this.graph.getView().translate;
var B=this.graph.getView().scale;
var o=w.x;
var n=w.y;
var d=false;
var c=false;
var a=this.getGuideTolerance();
var s=a;
var r=a;
var x=k.clone();
x.x+=w.x;
x.y+=w.y;
var e=x.x;
var u=x.x+x.width;
var y=x.getCenterX();
var p=x.y;
var l=x.y+x.height;
var A=x.getCenterY();
function h(b){b+=this.graph.panDx;
var i=false;
if(Math.abs(b-y)<s){o=b-k.getCenterX();
s=Math.abs(b-y);
i=true;
}else{if(Math.abs(b-e)<s){o=b-k.x;
s=Math.abs(b-e);
i=true;
}else{if(Math.abs(b-u)<s){o=b-k.x-k.width;
s=Math.abs(b-u);
i=true;
}}}if(i){if(this.guideX==null){this.guideX=this.createGuideShape(true);
this.guideX.dialect=(this.graph.dialect!=mxConstants.DIALECT_SVG)?mxConstants.DIALECT_VML:mxConstants.DIALECT_SVG;
this.guideX.init(this.graph.getView().getOverlayPane());
if(this.graph.dialect==mxConstants.DIALECT_SVG){this.guideX.node.setAttribute("pointer-events","none");
this.guideX.pipe.setAttribute("pointer-events","none");
}}var C=this.graph.container;
b-=this.graph.panDx;
this.guideX.points=[new mxPoint(b,-this.graph.panDy),new mxPoint(b,C.scrollHeight-3-this.graph.panDy)];
}d=d||i;
}function g(C){C+=this.graph.panDy;
var b=false;
if(Math.abs(C-A)<r){n=C-k.getCenterY();
r=Math.abs(C-A);
b=true;
}else{if(Math.abs(C-p)<r){n=C-k.y;
r=Math.abs(C-p);
b=true;
}else{if(Math.abs(C-l)<r){n=C-k.y-k.height;
r=Math.abs(C-l);
b=true;
}}}if(b){if(this.guideY==null){this.guideY=this.createGuideShape(false);
this.guideY.dialect=(this.graph.dialect!=mxConstants.DIALECT_SVG)?mxConstants.DIALECT_VML:mxConstants.DIALECT_SVG;
this.guideY.init(this.graph.getView().getOverlayPane());
if(this.graph.dialect==mxConstants.DIALECT_SVG){this.guideY.node.setAttribute("pointer-events","none");
this.guideY.pipe.setAttribute("pointer-events","none");
}}var i=this.graph.container;
C-=this.graph.panDy;
this.guideY.points=[new mxPoint(-this.graph.panDx,C),new mxPoint(i.scrollWidth-3-this.graph.panDx,C)];
}c=c||b;
}for(var q=0;
q<this.states.length;
q++){var f=this.states[q];
if(f!=null){if(this.horizontal){h.call(this,f.getCenterX());
h.call(this,f.x);
h.call(this,f.x+f.width);
}if(this.vertical){g.call(this,f.getCenterY());
g.call(this,f.y);
g.call(this,f.y+f.height);
}}}if(!d&&this.guideX!=null){this.guideX.node.style.visibility="hidden";
}else{if(this.guideX!=null){this.guideX.node.style.visibility="visible";
this.guideX.redraw();
}}if(!c&&this.guideY!=null){this.guideY.node.style.visibility="hidden";
}else{if(this.guideY!=null){this.guideY.node.style.visibility="visible";
this.guideY.redraw();
}}if(t){if(!d){var z=k.x-(this.graph.snap(k.x/B-m.x)+m.x)*B;
o=this.graph.snap(o/B)*B-z;
}if(!c){var v=k.y-(this.graph.snap(k.y/B-m.y)+m.y)*B;
n=this.graph.snap(n/B)*B-v;
}}w=new mxPoint(o,n);
}return w;
};
mxGuide.prototype.hide=function(){if(this.guideX!=null){this.guideX.node.style.visibility="hidden";
}if(this.guideY!=null){this.guideY.node.style.visibility="hidden";
}};
mxGuide.prototype.destroy=function(){if(this.guideX!=null){this.guideX.destroy();
this.guideX=null;
}if(this.guideY!=null){this.guideY.destroy();
this.guideY=null;
}};
function mxShape(){}mxShape.prototype.SVG_STROKE_TOLERANCE=8;
mxShape.prototype.scale=1;
mxShape.prototype.dialect=null;
mxShape.prototype.crisp=false;
mxShape.prototype.roundedCrispSvg=true;
mxShape.prototype.mixedModeHtml=true;
mxShape.prototype.preferModeHtml=true;
mxShape.prototype.bounds=null;
mxShape.prototype.points=null;
mxShape.prototype.node=null;
mxShape.prototype.label=null;
mxShape.prototype.innerNode=null;
mxShape.prototype.style=null;
mxShape.prototype.startOffset=null;
mxShape.prototype.endOffset=null;
mxShape.prototype.boundingBox=null;
mxShape.prototype.vmlNodes=["node","strokeNode","fillNode","shadowNode"];
mxShape.prototype.vmlScale=1;
mxShape.prototype.strokewidth=1;
mxShape.prototype.setCursor=function(a){if(a==null){a="";
}this.cursor=a;
if(this.innerNode!=null){this.innerNode.style.cursor=a;
}if(this.node!=null){this.node.style.cursor=a;
}if(this.pipe!=null){this.pipe.style.cursor=a;
}};
mxShape.prototype.getCursor=function(){return this.cursor;
};
mxShape.prototype.init=function(a){if(this.node==null){this.node=this.create(a);
if(a!=null){a.appendChild(this.node);
if(document.documentMode==8&&mxUtils.isVml(this.node)){this.reparseVml();
}}}if(this.insertGradientNode!=null){this.insertGradient(this.insertGradientNode);
this.insertGradientNode=null;
}};
mxShape.prototype.reparseVml=function(){for(var a=0;
a<this.vmlNodes.length;
a++){if(this[this.vmlNodes[a]]!=null){this[this.vmlNodes[a]].setAttribute("id","mxTemporaryReference-"+this.vmlNodes[a]);
}}this.node.outerHTML=this.node.outerHTML;
for(var a=0;
a<this.vmlNodes.length;
a++){if(this[this.vmlNodes[a]]!=null){this[this.vmlNodes[a]]=this.node.ownerDocument.getElementById("mxTemporaryReference-"+this.vmlNodes[a]);
this[this.vmlNodes[a]].removeAttribute("id");
}}};
mxShape.prototype.insertGradient=function(d){if(d!=null){var c=0;
var f=d.getAttribute("id");
var e=document.getElementById(f);
while(e!=null&&e.ownerSVGElement!=this.node.ownerSVGElement){c++;
f=d.getAttribute("id")+"-"+c;
e=document.getElementById(f);
}if(e==null){d.setAttribute("id",f);
this.node.ownerSVGElement.appendChild(d);
e=d;
}if(e!=null){var b="url(#"+f+")";
var a=(this.innerNode!=null)?this.innerNode:this.node;
if(a!=null&&a.getAttribute("fill")!=b){a.setAttribute("fill",b);
}}}};
mxShape.prototype.isMixedModeHtml=function(){return this.mixedModeHtml&&!this.isRounded&&!this.isShadow&&this.gradient==null&&mxUtils.getValue(this.style,mxConstants.STYLE_GLASS,0)==0&&mxUtils.getValue(this.style,mxConstants.STYLE_ROTATION,0)==0;
};
mxShape.prototype.create=function(a){var b=null;
if(this.dialect==mxConstants.DIALECT_SVG){b=this.createSvg();
}else{if(this.dialect==mxConstants.DIALECT_STRICTHTML||(this.preferModeHtml&&this.dialect==mxConstants.DIALECT_PREFERHTML)||(this.isMixedModeHtml()&&this.dialect==mxConstants.DIALECT_MIXEDHTML)){b=this.createHtml();
}else{b=this.createVml();
}}return b;
};
mxShape.prototype.createHtml=function(){var a=document.createElement("DIV");
this.configureHtmlShape(a);
return a;
};
mxShape.prototype.destroy=function(){if(this.node!=null){mxEvent.release(this.node);
if(this.node.parentNode!=null){this.node.parentNode.removeChild(this.node);
}if(this.node.glassOverlay){this.node.glassOverlay.parentNode.removeChild(this.node.glassOverlay);
this.node.glassOverlay=null;
}this.node=null;
}};
mxShape.prototype.apply=function(b){var a=b.style;
this.style=a;
if(a!=null){this.fill=mxUtils.getValue(a,mxConstants.STYLE_FILLCOLOR,this.fill);
this.gradient=mxUtils.getValue(a,mxConstants.STYLE_GRADIENTCOLOR,this.gradient);
this.gradientDirection=mxUtils.getValue(a,mxConstants.STYLE_GRADIENT_DIRECTION,this.gradientDirection);
this.opacity=mxUtils.getValue(a,mxConstants.STYLE_OPACITY,this.opacity);
this.stroke=mxUtils.getValue(a,mxConstants.STYLE_STROKECOLOR,this.stroke);
this.strokewidth=mxUtils.getNumber(a,mxConstants.STYLE_STROKEWIDTH,this.strokewidth);
this.isShadow=mxUtils.getValue(a,mxConstants.STYLE_SHADOW,this.isShadow);
this.isDashed=mxUtils.getValue(a,mxConstants.STYLE_DASHED,this.isDashed);
this.spacing=mxUtils.getValue(a,mxConstants.STYLE_SPACING,this.spacing);
this.startSize=mxUtils.getNumber(a,mxConstants.STYLE_STARTSIZE,this.startSize);
this.endSize=mxUtils.getNumber(a,mxConstants.STYLE_ENDSIZE,this.endSize);
this.isRounded=mxUtils.getValue(a,mxConstants.STYLE_ROUNDED,this.isRounded);
this.startArrow=mxUtils.getValue(a,mxConstants.STYLE_STARTARROW,this.startArrow);
this.endArrow=mxUtils.getValue(a,mxConstants.STYLE_ENDARROW,this.endArrow);
this.rotation=mxUtils.getValue(a,mxConstants.STYLE_ROTATION,this.rotation);
this.direction=mxUtils.getValue(a,mxConstants.STYLE_DIRECTION,this.direction);
if(this.fill=="none"){this.fill=null;
}if(this.gradient=="none"){this.gradient=null;
}if(this.stroke=="none"){this.stroke=null;
}}};
mxShape.prototype.createSvgGroup=function(a){var b=document.createElementNS(mxConstants.NS_SVG,"g");
this.innerNode=document.createElementNS(mxConstants.NS_SVG,a);
this.configureSvgShape(this.innerNode);
if(a=="rect"&&this.strokewidth*this.scale>=1&&!this.isRounded){this.innerNode.setAttribute("shape-rendering","optimizeSpeed");
}this.shadowNode=this.createSvgShadow(this.innerNode);
if(this.shadowNode!=null){b.appendChild(this.shadowNode);
}b.appendChild(this.innerNode);
return b;
};
mxShape.prototype.createSvgShadow=function(a){if(this.isShadow){var b=a.cloneNode(true);
b.setAttribute("opacity",mxConstants.SHADOW_OPACITY);
if(this.fill!=null&&this.fill!=mxConstants.NONE){b.setAttribute("fill",mxConstants.SHADOWCOLOR);
}if(this.stroke!=null&&this.stroke!=mxConstants.NONE){b.setAttribute("stroke",mxConstants.SHADOWCOLOR);
}return b;
}return null;
};
mxShape.prototype.configureHtmlShape=function(b){if(mxUtils.isVml(b)){this.configureVmlShape(b);
}else{b.style.position="absolute";
b.style.overflow="hidden";
var a=this.stroke;
if(a!=null&&a!=mxConstants.NONE){b.style.borderColor=a;
if(this.isDashed){b.style.borderStyle="dashed";
}else{if(this.strokewidth>0){b.style.borderStyle="solid";
}}b.style.borderWidth=Math.ceil(this.strokewidth*this.scale)+"px";
}else{b.style.borderWidth="0px";
}a=this.fill;
b.style.background="";
if(a!=null&&a!=mxConstants.NONE){b.style.backgroundColor=a;
}else{if(this.points==null){this.configureTransparentBackground(b);
}}if(this.opacity!=null){mxUtils.setOpacity(b,this.opacity);
}}};
mxShape.prototype.updateVmlFill=function(d,c,b,a,e){d.color=c;
if(e!=null&&e!=100){d.opacity=e+"%";
if(b!=null){d.setAttribute("o:opacity2",e+"%");
}}if(b!=null){d.type="gradient";
d.color2=b;
var f="180";
if(this.gradientDirection==mxConstants.DIRECTION_EAST){f="270";
}else{if(this.gradientDirection==mxConstants.DIRECTION_WEST){f="90";
}else{if(this.gradientDirection==mxConstants.DIRECTION_NORTH){f="0";
}}}d.angle=f;
}};
mxShape.prototype.updateVmlStrokeNode=function(a){if(this.strokeNode==null){this.strokeNode=document.createElement("v:stroke");
this.strokeNode.joinstyle="miter";
this.strokeNode.miterlimit=4;
a.appendChild(this.strokeNode);
}if(this.opacity!=null){this.strokeNode.opacity=this.opacity+"%";
}this.updateVmlDashStyle();
};
mxShape.prototype.updateVmlStrokeColor=function(b){var a=this.stroke;
if(a!=null&&a!=mxConstants.NONE){b.stroked="true";
b.strokecolor=a;
}else{b.stroked="false";
}};
mxShape.prototype.configureVmlShape=function(b){b.style.position="absolute";
this.updateVmlStrokeColor(b);
b.style.background="";
var a=this.fill;
if(a!=null&&a!=mxConstants.NONE){if(this.fillNode==null){this.fillNode=document.createElement("v:fill");
b.appendChild(this.fillNode);
}this.updateVmlFill(this.fillNode,a,this.gradient,this.gradientDirection,this.opacity);
}else{b.filled="false";
if(this.points==null){this.configureTransparentBackground(b);
}}this.updateVmlStrokeNode(b);
if(this.isShadow){this.createVmlShadow(b);
}if(b.nodeName=="roundrect"){try{var c=mxConstants.RECTANGLE_ROUNDING_FACTOR*100;
if(this.style!=null){c=mxUtils.getValue(this.style,mxConstants.STYLE_ARCSIZE,c);
}b.setAttribute("arcsize",String(c)+"%");
}catch(d){}}};
mxShape.prototype.createVmlShadow=function(a){if(this.shadowNode==null){this.shadowNode=document.createElement("v:shadow");
this.shadowNode.on="true";
this.shadowNode.color=mxConstants.SHADOWCOLOR;
this.shadowNode.opacity=(mxConstants.SHADOW_OPACITY*100)+"%";
this.shadowStrokeNode=document.createElement("v:stroke");
this.shadowNode.appendChild(this.shadowStrokeNode);
a.appendChild(this.shadowNode);
}};
mxShape.prototype.configureTransparentBackground=function(a){a.style.background="url('"+mxClient.imageBasePath+"/transparent.gif')";
};
mxShape.prototype.configureSvgShape=function(b){var a=this.stroke;
if(a!=null&&a!=mxConstants.NONE){b.setAttribute("stroke",a);
}else{b.setAttribute("stroke","none");
}a=this.fill;
if(a!=null&&a!=mxConstants.NONE){if(this.gradient!=null){var c=this.getGradientId(a,this.gradient);
if(this.gradientNode!=null&&this.gradientNode.getAttribute("id")!=c){this.gradientNode=null;
b.setAttribute("fill","");
}if(this.gradientNode==null){this.gradientNode=this.createSvgGradient(c,a,this.gradient,b);
b.setAttribute("fill","url(#"+c+")");
}}else{this.gradientNode=null;
b.setAttribute("fill",a);
}}else{if(b.nodeName=="ellipse"&&mxClient.IS_NS&&!mxClient.IS_GC&&!mxClient.IS_SF){b.setAttribute("fill","transparent");
}else{b.setAttribute("fill","none");
}}if(this.opacity!=null){b.setAttribute("fill-opacity",this.opacity/100);
b.setAttribute("stroke-opacity",this.opacity/100);
}};
mxShape.prototype.getGradientId=function(d,a){if(d.charAt(0)=="#"){d=d.substring(1);
}if(a.charAt(0)=="#"){a=a.substring(1);
}d=d.toLowerCase();
a=a.toLowerCase();
var b=null;
if(this.gradientDirection==null||this.gradientDirection==mxConstants.DIRECTION_SOUTH){b="south";
}else{if(this.gradientDirection==mxConstants.DIRECTION_EAST){b="east";
}else{var c=d;
d=a;
a=c;
if(this.gradientDirection==mxConstants.DIRECTION_NORTH){b="south";
}else{if(this.gradientDirection==mxConstants.DIRECTION_WEST){b="east";
}}}}return"mx-gradient-"+d+"-"+a+"-"+b;
};
mxShape.prototype.createSvgPipe=function(e,d,a,c){var b=document.createElementNS(mxConstants.NS_SVG,"path");
b.setAttribute("pointer-events","stroke");
b.setAttribute("fill","none");
b.setAttribute("visibility","hidden");
b.setAttribute("stroke",(mxClient.IS_OP)?"none":"white");
return b;
};
mxShape.prototype.createSvgGradient=function(f,e,a,c){var d=this.insertGradientNode;
if(d==null){d=document.createElementNS(mxConstants.NS_SVG,"linearGradient");
d.setAttribute("id",f);
d.setAttribute("x1","0%");
d.setAttribute("y1","0%");
d.setAttribute("x2","0%");
d.setAttribute("y2","0%");
if(this.gradientDirection==null||this.gradientDirection==mxConstants.DIRECTION_SOUTH){d.setAttribute("y2","100%");
}else{if(this.gradientDirection==mxConstants.DIRECTION_EAST){d.setAttribute("x2","100%");
}else{if(this.gradientDirection==mxConstants.DIRECTION_NORTH){d.setAttribute("y1","100%");
}else{if(this.gradientDirection==mxConstants.DIRECTION_WEST){d.setAttribute("x1","100%");
}}}}var b=document.createElementNS(mxConstants.NS_SVG,"stop");
b.setAttribute("offset","0%");
b.setAttribute("style","stop-color:"+e);
d.appendChild(b);
b=document.createElementNS(mxConstants.NS_SVG,"stop");
b.setAttribute("offset","100%");
b.setAttribute("style","stop-color:"+a);
d.appendChild(b);
}this.insertGradientNode=d;
return d;
};
mxShape.prototype.createPoints=function(u,b,n,h){var q=(h)?this.bounds.x:0;
var p=(h)?this.bounds.y:0;
var r=(this.crisp&&this.dialect==mxConstants.DIALECT_SVG&&mxClient.IS_IE)?0.5:0;
if(isNaN(this.points[0].x)||isNaN(this.points[0].y)){return null;
}var e=mxConstants.LINE_ARCSIZE*this.scale;
var a=this.points[0];
if(this.startOffset!=null){a=a.clone();
a.x+=this.startOffset.x;
a.y+=this.startOffset.y;
}var m=u+" "+(Math.round(a.x-q)+r)+" "+(Math.round(a.y-p)+r)+" ";
for(var o=1;
o<this.points.length;
o++){a=this.points[o-1];
var g=this.points[o];
if(isNaN(g.x)||isNaN(g.y)){return null;
}if(o==this.points.length-1&&this.endOffset!=null){g=g.clone();
g.x+=this.endOffset.x;
g.y+=this.endOffset.y;
}var d=a.x-g.x;
var c=a.y-g.y;
if((this.isRounded&&o<this.points.length-1)&&(d!=0||c!=0)&&this.scale>0.3){var k=Math.sqrt(d*d+c*c);
var l=d*Math.min(e,k/2)/k;
var v=c*Math.min(e,k/2)/k;
m+=b+" "+(Math.round(g.x+l-q)+r)+" "+(Math.round(g.y+v-p)+r)+" ";
var t=this.points[o+1];
d=t.x-g.x;
c=t.y-g.y;
k=Math.max(1,Math.sqrt(d*d+c*c));
if(k!=0){var f=d*Math.min(e,k/2)/k;
var s=c*Math.min(e,k/2)/k;
m+=n+" "+Math.round(g.x-q)+" "+Math.round(g.y-p)+" "+Math.round(g.x-q)+","+Math.round(g.y-p)+" "+(Math.round(g.x+f-q)+r)+" "+(Math.round(g.y+s-p)+r)+" ";
}}else{m+=b+" "+(Math.round(g.x-q)+r)+" "+(Math.round(g.y-p)+r)+" ";
}}return m;
};
mxShape.prototype.createCurvedPoints=function(o){var h=(this.crisp&&this.dialect==mxConstants.DIALECT_SVG&&mxClient.IS_IE)?0.5:0;
var g=(o)?this.bounds.x:0;
var f=(o)?this.bounds.y:0;
var m=this.points[0];
var c=this.points.length;
var k=((o)?"m":"M")+" "+(Math.round(m.x-g)+h)+" "+(Math.round(m.y-f)+h)+" ";
var b=0;
var a=0;
for(var e=1;
e<c-2;
e++){m=this.points[e];
var l=this.points[e+1];
b=(m.x+l.x)/2;
a=(m.y+l.y)/2;
if(o){var d=this.points[e-1];
k+=this.createVmlQuad(d.x-g,d.y-f,m.x-g,m.y-f,b-g,a-f);
}else{k+="Q "+Math.round(m.x-g)+" "+Math.round(m.y-f)+" "+(Math.round(b-g)+h)+" "+(Math.round(a-f)+h)+" ";
}}m=this.points[c-2];
var l=this.points[c-1];
if(o){k+=this.createVmlQuad(b-g,a-f,m.x-g,m.y-f,l.x-g,l.y-f);
}else{k+="Q "+Math.round(m.x-g)+" "+Math.round(m.y-f)+" "+(Math.round(l.x-g)+h)+" "+(Math.round(l.y-f)+h)+" ";
}return k;
};
mxShape.prototype.createVmlQuad=function(c,a,d,k,b,i){var h=c+2/3*(d-c);
var f=a+2/3*(k-a);
var g=b+2/3*(d-b);
var e=i+2/3*(k-i);
return"C "+Math.round(h)+" "+Math.round(f)+" "+Math.round(g)+" "+Math.round(e)+" "+Math.round(b)+" "+Math.round(i);
};
mxShape.prototype.updateHtmlShape=function(t){if(t!=null){if(mxUtils.isVml(t)){this.updateVmlShape(t);
}else{var p=Math.ceil(this.strokewidth*this.scale);
t.style.borderWidth=Math.max(1,p)+"px";
if(this.bounds!=null&&!isNaN(this.bounds.x)&&!isNaN(this.bounds.y)&&!isNaN(this.bounds.width)&&!isNaN(this.bounds.height)){t.style.left=Math.round(this.bounds.x-p/2)+"px";
t.style.top=Math.round(this.bounds.y-p/2)+"px";
if(document.compatMode=="CSS1Compat"){p=-p;
}t.style.width=Math.round(Math.max(0,this.bounds.width+p))+"px";
t.style.height=Math.round(Math.max(0,this.bounds.height+p))+"px";
if(this.bounds.width==0||this.bounds.height==0){t.style.visibility="hidden";
}else{t.style.visibility="visible";
}}}if(this.points!=null&&this.bounds!=null&&!mxUtils.isVml(t)){if(this.divContainer==null){this.divContainer=t;
}while(this.divContainer.firstChild!=null){mxEvent.release(this.divContainer.firstChild);
this.divContainer.removeChild(this.divContainer.firstChild);
}t.style.borderStyle="";
t.style.background="";
if(this.points.length==2){var a=this.points[0];
var E=this.points[1];
var m=E.x-a.x;
var l=E.y-a.y;
if(m==0||l==0){t.style.borderStyle="solid";
}else{t.style.width=Math.round(this.bounds.width+1)+"px";
t.style.height=Math.round(this.bounds.height+1)+"px";
var c=Math.sqrt(m*m+l*l);
var b=1+(c/(8*this.scale));
var B=m/b;
var A=l/b;
var g=a.x-this.bounds.x;
var f=a.y-this.bounds.y;
for(var u=0;
u<b;
u++){var C=document.createElement("DIV");
C.style.position="absolute";
C.style.overflow="hidden";
C.style.left=Math.round(g)+"px";
C.style.top=Math.round(f)+"px";
C.style.width=Math.max(1,2*this.scale)+"px";
C.style.height=Math.max(1,2*this.scale)+"px";
C.style.backgroundColor=this.stroke;
this.divContainer.appendChild(C);
g+=B;
f+=A;
}}}else{if(this.points.length==3){var D=this.points[1];
var r="0";
var o="1";
var k="0";
var z="1";
if(D.x==this.bounds.x){z="0";
k="1";
}if(D.y==this.bounds.y){r="1";
o="0";
}t.style.borderStyle="solid";
t.style.borderWidth=r+" "+z+" "+o+" "+k+"px";
}else{t.style.width=Math.round(this.bounds.width+1)+"px";
t.style.height=Math.round(this.bounds.height+1)+"px";
var d=this.points[0];
for(var u=1;
u<this.points.length;
u++){var q=this.points[u];
var C=document.createElement("DIV");
C.style.position="absolute";
C.style.overflow="hidden";
C.style.borderColor=this.stroke;
C.style.borderStyle="solid";
C.style.borderWidth="1 0 0 1px";
var g=Math.min(q.x,d.x)-this.bounds.x;
var f=Math.min(q.y,d.y)-this.bounds.y;
var k=Math.max(1,Math.abs(q.x-d.x));
var v=Math.max(1,Math.abs(q.y-d.y));
C.style.left=g+"px";
C.style.top=f+"px";
C.style.width=k+"px";
C.style.height=v+"px";
this.divContainer.appendChild(C);
d=q;
}}}}}};
mxShape.prototype.updateVmlDashStyle=function(){if(this.isDashed){if(this.strokeNode.dashstyle!="dash"){this.strokeNode.dashstyle="dash";
}}else{if(this.strokeNode.dashstyle!="solid"){this.strokeNode.dashstyle="solid";
}}};
mxShape.prototype.updateVmlShape=function(a){a.strokeweight=(this.strokewidth*this.scale)+"px";
if(this.strokeNode!=null){this.updateVmlDashStyle();
}if(this.shadowNode!=null){var m=Math.round(mxConstants.SHADOW_OFFSET_X*this.scale);
var l=Math.round(mxConstants.SHADOW_OFFSET_Y*this.scale);
this.shadowNode.offset=m+"px,"+l+"px";
}if(this.bounds!=null&&!isNaN(this.bounds.x)&&!isNaN(this.bounds.y)&&!isNaN(this.bounds.width)&&!isNaN(this.bounds.height)){var e=1;
var g=Math.max(0,Math.round(this.bounds.width));
var d=Math.max(0,Math.round(this.bounds.height));
if(this.points!=null||a.nodeName=="shape"||a.nodeName=="group"){var c=(a.parentNode.nodeName=="group")?1:this.vmlScale;
a.coordsize=(g*c)+","+(d*c);
}else{if(a.parentNode.nodeName=="group"){e=this.vmlScale;
}}if(a.parentNode!=this.node){a.style.left=Math.round(this.bounds.x*e)+"px";
a.style.top=Math.round(this.bounds.y*e)+"px";
if(this.points==null){if(this.rotation!=null&&this.rotation!=0){a.style.rotation=this.rotation;
}else{if(a.style.rotation!=null){a.style.rotation="";
}}}}a.style.width=(g*e)+"px";
a.style.height=(d*e)+"px";
}if(this.points!=null&&a.nodeName!="group"){if(a.nodeName=="polyline"&&a.points!=null){var k="";
for(var b=0;
b<this.points.length;
b++){k+=this.points[b].x+","+this.points[b].y+" ";
}a.points.value=k;
a.style.left=null;
a.style.top=null;
a.style.width=null;
a.style.height=null;
}else{if(this.bounds!=null){var k=(this.style==null||this.style[mxConstants.STYLE_CURVED]!=1)?this.createPoints("m","l","c",true):this.createCurvedPoints(true);
a.path=k+" e";
}}}};
mxShape.prototype.updateSvgBounds=function(e){var b=this.bounds.width;
var c=this.bounds.height;
if(this.isRounded&&!(this.crisp&&mxClient.IS_IE)){e.setAttribute("x",this.bounds.x);
e.setAttribute("y",this.bounds.y);
e.setAttribute("width",b);
e.setAttribute("height",c);
}else{var a=(this.crisp&&mxClient.IS_IE)?0.5:0;
e.setAttribute("x",Math.round(this.bounds.x)+a);
e.setAttribute("y",Math.round(this.bounds.y)+a);
b=Math.round(b);
c=Math.round(c);
e.setAttribute("width",b);
e.setAttribute("height",c);
}if(this.isRounded){var g=mxConstants.RECTANGLE_ROUNDING_FACTOR*100;
if(this.style!=null){g=mxUtils.getValue(this.style,mxConstants.STYLE_ARCSIZE,g)/100;
}var d=Math.min(b*g,c*g);
e.setAttribute("rx",d);
e.setAttribute("ry",d);
}this.updateSvgTransform(e,e==this.shadowNode);
};
mxShape.prototype.updateSvgPath=function(a){var b=(this.style==null||this.style[mxConstants.STYLE_CURVED]!=1)?this.createPoints("M","L","C",false):this.createCurvedPoints(false);
if(b!=null){a.setAttribute("d",b);
a.removeAttribute("x");
a.removeAttribute("y");
a.removeAttribute("width");
a.removeAttribute("height");
}};
mxShape.prototype.updateSvgScale=function(b){b.setAttribute("stroke-width",Math.round(Math.max(1,this.strokewidth*this.scale)));
if(this.isDashed){var a=Math.max(1,Math.round(3*this.scale*this.strokewidth));
b.setAttribute("stroke-dasharray",a+" "+a);
}if(this.crisp&&(this.roundedCrispSvg||this.isRounded!=true)&&(this.rotation==null||this.rotation==0)){b.setAttribute("shape-rendering","crispEdges");
}else{b.removeAttribute("shape-rendering");
}};
mxShape.prototype.updateSvgShape=function(a){if(this.points!=null&&this.points[0]!=null){this.updateSvgPath(a);
}else{if(this.bounds!=null){this.updateSvgBounds(a);
}}this.updateSvgScale(a);
};
mxShape.prototype.getSvgShadowTransform=function(c,d){var b=mxConstants.SHADOW_OFFSET_X*this.scale;
var a=mxConstants.SHADOW_OFFSET_Y*this.scale;
return"translate("+b+" "+a+")";
};
mxShape.prototype.updateSvgTransform=function(c,e){var b=(e)?this.getSvgShadowTransform():"";
if(this.rotation!=null&&this.rotation!=0){var a=this.bounds.x+this.bounds.width/2;
var d=this.bounds.y+this.bounds.height/2;
c.setAttribute("transform","rotate("+this.rotation+","+a+","+d+") "+b);
}else{if(e){c.setAttribute("transform",b);
}else{c.removeAttribute("transform");
}}};
mxShape.prototype.reconfigure=function(){if(this.dialect==mxConstants.DIALECT_SVG){if(this.innerNode!=null){this.configureSvgShape(this.innerNode);
}else{this.configureSvgShape(this.node);
}if(this.insertGradientNode!=null){this.insertGradient(this.insertGradientNode);
this.insertGradientNode=null;
}}else{if(mxUtils.isVml(this.node)){this.node.style.visibility="hidden";
this.configureVmlShape(this.node);
this.node.style.visibility="visible";
}else{this.node.style.visibility="hidden";
this.configureHtmlShape(this.node);
this.node.style.visibility="visible";
}}};
mxShape.prototype.redraw=function(){this.updateBoundingBox();
if(this.dialect==mxConstants.DIALECT_SVG){this.redrawSvg();
}else{if(mxUtils.isVml(this.node)){this.node.style.visibility="hidden";
this.redrawVml();
this.node.style.visibility="visible";
}else{this.redrawHtml();
}}};
mxShape.prototype.updateBoundingBox=function(){if(this.bounds!=null){var b=this.createBoundingBox();
this.augmentBoundingBox(b);
var a=Number(mxUtils.getValue(this.style,mxConstants.STYLE_ROTATION,0));
if(a!=0){b=mxUtils.getBoundingBox(b,a);
}b.x=Math.floor(b.x);
b.y=Math.floor(b.y);
b.width=Math.ceil(b.width);
b.height=Math.ceil(b.height);
this.boundingBox=b;
}};
mxShape.prototype.createBoundingBox=function(){return this.bounds.clone();
};
mxShape.prototype.augmentBoundingBox=function(b){if(this.isShadow){b.width+=Math.ceil(mxConstants.SHADOW_OFFSET_X*this.scale);
b.height+=Math.ceil(mxConstants.SHADOW_OFFSET_Y*this.scale);
}var a=Math.ceil(this.strokewidth*this.scale);
b.grow(Math.ceil(a/2));
};
mxShape.prototype.redrawSvg=function(){if(this.innerNode!=null){this.updateSvgShape(this.innerNode);
if(this.shadowNode!=null){this.updateSvgShape(this.shadowNode);
}}else{this.updateSvgShape(this.node);
if(this.shadowNode!=null){this.shadowNode.setAttribute("transform",this.getSvgShadowTransform());
}}this.updateSvgGlassPane();
};
mxShape.prototype.updateVmlGlassPane=function(){if(this.bounds!=null&&this.node.nodeName=="group"&&this.style!=null&&mxUtils.getValue(this.style,mxConstants.STYLE_GLASS,0)==1){if(this.node.glassOverlay==null){this.node.glassOverlay=document.createElement("v:shape");
this.node.glassOverlay.setAttribute("filled","true");
this.node.glassOverlay.setAttribute("fillcolor","white");
this.node.glassOverlay.setAttribute("stroked","false");
var e=document.createElement("v:fill");
e.setAttribute("type","gradient");
e.setAttribute("color","white");
e.setAttribute("color2","white");
e.setAttribute("opacity","90%");
e.setAttribute("o:opacity2","15%");
e.setAttribute("angle","180");
this.node.glassOverlay.appendChild(e);
this.node.appendChild(this.node.glassOverlay);
}var f=0.4;
var c=this.bounds;
var a=Math.ceil(this.strokewidth*this.scale/2+1);
var g="m "+(-a)+" "+(-a)+" l "+(-a)+" "+Math.round(c.height*f)+" c "+Math.round(c.width*0.3)+" "+Math.round(c.height*0.6)+" "+Math.round(c.width*0.7)+" "+Math.round(c.height*0.6)+" "+Math.round(c.width+a)+" "+Math.round(c.height*f)+" l "+Math.round(c.width+a)+" "+(-a)+" x e";
this.node.glassOverlay.style.position="absolute";
this.node.glassOverlay.style.width=c.width+"px";
this.node.glassOverlay.style.height=c.height+"px";
this.node.glassOverlay.setAttribute("coordsize",Math.round(this.bounds.width)+","+Math.round(this.bounds.height));
this.node.glassOverlay.setAttribute("path",g);
}else{if(this.node.glassOverlay!=null){this.node.glassOverlay.parentNode.removeChild(this.node.glassOverlay);
this.node.glassOverlay=null;
}}};
mxShape.prototype.updateSvgGlassPane=function(){if(this.node.nodeName=="g"&&this.style!=null&&mxUtils.getValue(this.style,mxConstants.STYLE_GLASS,0)==1){if(this.node.glassOverlay==null){if(this.node.ownerSVGElement.glassGradient==null){var e=document.createElementNS(mxConstants.NS_SVG,"linearGradient");
e.setAttribute("x1","0%");
e.setAttribute("y1","0%");
e.setAttribute("x2","0%");
e.setAttribute("y2","100%");
var k=document.createElementNS(mxConstants.NS_SVG,"stop");
k.setAttribute("offset","0%");
k.setAttribute("style","stop-color:#ffffff;stop-opacity:0.9");
e.appendChild(k);
var h=document.createElementNS(mxConstants.NS_SVG,"stop");
h.setAttribute("offset","100%");
h.setAttribute("style","stop-color:#ffffff;stop-opacity:0.1");
e.appendChild(h);
var f="mx-glass-gradient-";
var a=0;
while(document.getElementById(f+a)!=null){a++;
}e.setAttribute("id",f+a);
this.node.ownerSVGElement.appendChild(e);
this.node.ownerSVGElement.glassGradient=e;
}this.node.glassOverlay=document.createElementNS(mxConstants.NS_SVG,"path");
var c=this.node.ownerSVGElement.glassGradient.getAttribute("id");
this.node.glassOverlay.setAttribute("style","fill:url(#"+c+");");
this.node.appendChild(this.node.glassOverlay);
}var m=0.4;
var i=this.bounds;
var l=Math.ceil(this.strokewidth*this.scale/2);
var g="m "+(i.x-l)+","+(i.y-l)+" L "+(i.x-l)+","+(i.y+i.height*m)+" Q "+(i.x+i.width*0.5)+","+(i.y+i.height*0.7)+" "+(i.x+i.width+l)+","+(i.y+i.height*m)+" L "+(i.x+i.width+l)+","+(i.y-l)+" z";
this.node.glassOverlay.setAttribute("d",g);
}else{if(this.node.glassOverlay!=null){this.node.glassOverlay.parentNode.removeChild(this.node.glassOverlay);
this.node.glassOverlay=null;
}}};
mxShape.prototype.redrawVml=function(){this.node.style.visibility="hidden";
this.updateVmlShape(this.node);
this.updateVmlGlassPane();
this.node.style.visibility="visible";
};
mxShape.prototype.redrawHtml=function(){this.updateHtmlShape(this.node);
};
mxShape.prototype.getRotation=function(){var a=this.rotation||0;
if(this.direction!=null){if(this.direction=="north"){a+=270;
}else{if(this.direction=="west"){a+=180;
}else{if(this.direction=="south"){a+=90;
}}}}return a;
};
mxShape.prototype.createPath=function(m){var g=this.bounds.x;
var f=this.bounds.y;
var i=this.bounds.width;
var e=this.bounds.height;
var o=0;
var l=0;
if(this.direction=="north"||this.direction=="south"){o=(i-e)/2;
l=(e-i)/2;
g+=o;
f+=l;
var d=i;
i=e;
e=d;
}var k=this.getRotation();
var n=null;
if(this.dialect==mxConstants.DIALECT_SVG){n=new mxPath("svg");
n.setTranslate(g,f);
if(k!=0){var c=this.bounds.getCenterX();
var b=this.bounds.getCenterY();
var a="rotate("+k+" "+c+" "+b+")";
if(this.innerNode!=null){this.innerNode.setAttribute("transform",a);
}if(this.foreground!=null){this.foreground.setAttribute("transform",a);
}if(this.shadowNode!=null){this.shadowNode.setAttribute("transform",this.getSvgShadowTransform()+" "+a);
}}}else{n=new mxPath("vml");
n.setTranslate(o,-o);
n.scale=this.vmlScale;
if(k!=0){this.node.style.rotation=k;
}}this.redrawPath(n,g,f,i,e,m);
return n.getPath();
};
mxShape.prototype.redrawPath=function(d,a,e,b,c){};
function mxStencil(a){this.desc=a;
this.parseDescription();
this.parseConstraints();
}mxStencil.defaultLocalized=false;
mxStencil.prototype.desc=null;
mxStencil.prototype.constraints=null;
mxStencil.prototype.aspect=null;
mxStencil.prototype.w0=null;
mxStencil.prototype.h0=null;
mxStencil.prototype.bgNode=null;
mxStencil.prototype.fgNode=null;
mxStencil.prototype.strokewidth=null;
mxStencil.prototype.parseDescription=function(){this.fgNode=this.desc.getElementsByTagName("foreground")[0];
this.bgNode=this.desc.getElementsByTagName("background")[0];
this.w0=Number(this.desc.getAttribute("w")||100);
this.h0=Number(this.desc.getAttribute("h")||100);
var b=this.desc.getAttribute("aspect");
this.aspect=(b!=null)?b:"variable";
var a=this.desc.getAttribute("strokewidth");
this.strokewidth=(a!=null)?a:"1";
};
mxStencil.prototype.parseConstraints=function(){var a=this.desc.getElementsByTagName("connections")[0];
if(a!=null){var c=mxUtils.getChildNodes(a);
if(c!=null&&c.length>0){this.constraints=[];
for(var b=0;
b<c.length;
b++){this.constraints.push(this.parseConstraint(c[b]));
}}}};
mxStencil.prototype.parseConstraint=function(c){var a=Number(c.getAttribute("x"));
var d=Number(c.getAttribute("y"));
var b=c.getAttribute("perimeter")=="1";
return new mxConnectionConstraint(new mxPoint(a,d),b);
};
mxStencil.prototype.evaluateTextAttribute=function(c,b,d){var a=this.evaluateAttribute(c,b,d);
var e=c.getAttribute("localized");
if((mxStencil.defaultLocalized&&e==null)||e=="1"){a=mxResources.get(a);
}return a;
};
mxStencil.prototype.evaluateAttribute=function(node,attribute,state){var result=node.getAttribute(attribute);
if(result==null){var text=mxUtils.getTextContent(node);
if(text!=null){var funct=mxUtils.eval(text);
if(typeof(funct)=="function"){result=funct(state);
}}}return result;
};
mxStencil.prototype.renderDom=function(c,n,o,k){var d=c.dialect!=mxConstants.DIALECT_SVG;
var A=(document.documentMode==8)?1:c.vmlScale;
var v=c.rotation||0;
var g=false;
var w=c.style[mxConstants.STYLE_STENCIL_FLIPH];
var p=c.style[mxConstants.STYLE_STENCIL_FLIPV];
if(w?!p:p){v*=-1;
}if(c.direction!=null){if(c.direction=="north"){v+=270;
}else{if(c.direction=="west"){v+=180;
}else{if(c.direction=="south"){v+=90;
}}}g=(c.direction=="north"||c.direction=="south");
}if(w&&p){v+=180;
w=false;
p=false;
}var G="";
if(d){if(w){o.style.flip="x";
}else{if(p){o.style.flip="y";
}}if(v!=0){o.style.rotation=v;
}}else{if(w||p){var t=1;
var s=1;
var r=0;
var q=0;
if(w){t=-1;
r=-n.width-2*n.x;
}if(p){s=-1;
q=-n.height-2*n.y;
}G="scale("+t+" "+s+") translate("+r+" "+q+")";
}if(v!=0){var h=n.getCenterX();
var f=n.getCenterY();
G+=" rotate("+v+" "+h+" "+f+")";
}}var y=(k==null);
if(this.bgNode!=null||this.fgNode!=null){var z=(d&&k==null)?0:n.x;
var i=(d&&k==null)?0:n.y;
var t=n.width/this.w0;
var s=n.height/this.h0;
this.lastMoveX=0;
this.lastMoveY=0;
if(g){s=n.width/this.h0;
t=n.height/this.w0;
var E=(n.width-n.height)/2;
z+=E;
i-=E;
}if(this.aspect=="fixed"){s=Math.min(t,s);
t=s;
if(g){z+=(n.height-this.w0*t)/2;
i+=(n.width-this.h0*s)/2;
}else{z+=(n.width-this.w0*t)/2;
i+=(n.height-this.h0*s)/2;
}}if(d){t*=A;
s*=A;
z*=A;
i*=A;
}var B=Math.min(t,s);
var m=[];
var F=(k!=null)?k:{fillColorAssigned:false,fill:c.fill,stroke:c.stroke,strokeWidth:(this.strokewidth=="inherit")?Number(c.strokewidth)*c.scale:Number(this.strokewidth)*B/((d)?A:1),dashed:c.isDashed,dashpattern:[3,3],alpha:c.opacity||1,linejoin:"miter",fontColor:"#000000",fontSize:mxConstants.DEFAULT_FONTSIZE,fontFamily:mxConstants.DEFAULT_FONTFAMILY,fontStyle:0};
var e=null;
var x=null;
var a=function(L,I){var H=Math.max(1,I.strokeWidth);
if(d){L.strokeweight=Math.round(H)+"px";
if(I.fill!=null){var K=(!I.fillColorAssigned)?c.gradient:null;
var J=document.createElement("v:fill");
c.updateVmlFill(J,I.fill,K,c.gradientDirection,I.alpha*100);
L.appendChild(J);
}else{L.filled="false";
}if(I.stroke!=null){L.stroked="true";
L.strokecolor=I.stroke;
}else{L.stroked="false";
}L.style.position="absolute";
}else{L.setAttribute("stroke-width",H);
if(I.alpha!=1){L.setAttribute("opacity",I.alpha);
}if(I.fill!=null&&I.fillColorAssigned){L.setAttribute("fill",I.fill);
}if(I.stroke!=null){L.setAttribute("stroke",I.stroke);
}}};
var u=function(H){if(e!=null&&x!=null){x.push(H);
}};
var D=function(H){return(d)?Math.round(H):H;
};
var l=function(af){var U=af.nodeName;
var au=U=="fill";
var H=U=="stroke";
var ar=U=="fillstroke";
if(U=="save"){m.push(F);
F=mxUtils.clone(F);
}else{if(U=="restore"){F=m.pop();
}else{if(U=="path"){x=[];
if(d){e=document.createElement("v:shape");
a.call(this,e,F);
var ap=Math.round(n.width)*A;
var aC=Math.round(n.height)*A;
e.style.width=ap+"px";
e.style.height=aC+"px";
e.coordsize=ap+","+aC;
}else{e=document.createElementNS(mxConstants.NS_SVG,"path");
a.call(this,e,F);
if(G.length>0){e.setAttribute("transform",G);
}if(af.getAttribute("crisp")=="1"){e.setAttribute("shape-rendering","crispEdges");
}}var Z=af.firstChild;
while(Z!=null){if(Z.nodeType==mxConstants.NODETYPE_ELEMENT){l.call(this,Z);
}Z=Z.nextSibling;
}if(d){u("e");
e.path=x.join("");
}else{e.setAttribute("d",x.join(""));
}}else{if(U=="move"){var ae=(d)?"m":"M";
this.lastMoveX=D(z+Number(af.getAttribute("x"))*t);
this.lastMoveY=D(i+Number(af.getAttribute("y"))*s);
u(ae+" "+this.lastMoveX+" "+this.lastMoveY);
}else{if(U=="line"){var ae=(d)?"l":"L";
this.lastMoveX=D(z+Number(af.getAttribute("x"))*t);
this.lastMoveY=D(i+Number(af.getAttribute("y"))*s);
u(ae+" "+this.lastMoveX+" "+this.lastMoveY);
}else{if(U=="quad"){if(d){var I=this.lastMoveX;
var al=this.lastMoveY;
var ao=z+Number(af.getAttribute("x1"))*t;
var aa=i+Number(af.getAttribute("y1"))*s;
var aG=z+Number(af.getAttribute("x2"))*t;
var ai=i+Number(af.getAttribute("y2"))*s;
var aI=I+2/3*(ao-I);
var ak=al+2/3*(aa-al);
var aH=aG+2/3*(ao-aG);
var aj=ai+2/3*(aa-ai);
u("c "+Math.round(aI)+" "+Math.round(ak)+" "+Math.round(aH)+" "+Math.round(aj)+" "+Math.round(aG)+" "+Math.round(ai));
this.lastMoveX=aG;
this.lastMoveY=ai;
}else{this.lastMoveX=z+Number(af.getAttribute("x2"))*t;
this.lastMoveY=i+Number(af.getAttribute("y2"))*s;
u("Q "+(z+Number(af.getAttribute("x1"))*t)+" "+(i+Number(af.getAttribute("y1"))*s)+" "+this.lastMoveX+" "+this.lastMoveY);
}}else{if(U=="curve"){var ae=(d)?"c":"C";
this.lastMoveX=D(z+Number(af.getAttribute("x3"))*t);
this.lastMoveY=D(i+Number(af.getAttribute("y3"))*s);
u(ae+" "+D(z+Number(af.getAttribute("x1"))*t)+" "+D(i+Number(af.getAttribute("y1"))*s)+" "+D(z+Number(af.getAttribute("x2"))*t)+" "+D(i+Number(af.getAttribute("y2"))*s)+" "+this.lastMoveX+" "+this.lastMoveY);
}else{if(U=="close"){u((d)?"x":"Z");
}else{if(U=="rect"||U=="roundrect"){var O=U=="roundrect";
var an=D(z+Number(af.getAttribute("x"))*t);
var am=D(i+Number(af.getAttribute("y"))*s);
var ap=D(Number(af.getAttribute("w"))*t);
var aC=D(Number(af.getAttribute("h"))*s);
var R=af.getAttribute("arcsize");
if(R==0){R=mxConstants.RECTANGLE_ROUNDING_FACTOR*100;
}if(d){e=document.createElement((O)?"v:roundrect":"v:rect");
e.style.left=an+"px";
e.style.top=am+"px";
e.style.width=ap+"px";
e.style.height=aC+"px";
if(O){e.setAttribute("arcsize",String(R)+"%");
}}else{e=document.createElementNS(mxConstants.NS_SVG,"rect");
e.setAttribute("x",an);
e.setAttribute("y",am);
e.setAttribute("width",ap);
e.setAttribute("height",aC);
if(O){var aA=Number(R)/100;
var aw=Math.min(ap*aA,aC*aA);
e.setAttribute("rx",aw);
e.setAttribute("ry",aw);
}if(G.length>0){e.setAttribute("transform",G);
}if(af.getAttribute("crisp")=="1"){e.setAttribute("shape-rendering","crispEdges");
}}a.call(this,e,F);
}else{if(U=="ellipse"){var an=D(z+Number(af.getAttribute("x"))*t);
var am=D(i+Number(af.getAttribute("y"))*s);
var ap=D(Number(af.getAttribute("w"))*t);
var aC=D(Number(af.getAttribute("h"))*s);
if(d){e=document.createElement("v:arc");
e.startangle="0";
e.endangle="360";
e.style.left=an+"px";
e.style.top=am+"px";
e.style.width=ap+"px";
e.style.height=aC+"px";
}else{e=document.createElementNS(mxConstants.NS_SVG,"ellipse");
e.setAttribute("cx",an+ap/2);
e.setAttribute("cy",am+aC/2);
e.setAttribute("rx",ap/2);
e.setAttribute("ry",aC/2);
if(G.length>0){e.setAttribute("transform",G);
}}a.call(this,e,F);
}else{if(U=="arc"){var T=Number(af.getAttribute("rx"))*t;
var S=Number(af.getAttribute("ry"))*s;
var X=Number(af.getAttribute("x-axis-rotation"));
var Y=Number(af.getAttribute("large-arc-flag"));
var ac=Number(af.getAttribute("sweep-flag"));
var an=z+Number(af.getAttribute("x"))*t;
var am=i+Number(af.getAttribute("y"))*s;
if(d){var J=mxUtils.arcToCurves(this.lastMoveX,this.lastMoveY,T,S,X,Y,ac,an,am);
for(var aB=0;
aB<J.length;
aB+=6){u("c "+Math.round(J[aB])+" "+Math.round(J[aB+1])+" "+Math.round(J[aB+2])+" "+Math.round(J[aB+3])+" "+Math.round(J[aB+4])+" "+Math.round(J[aB+5]));
this.lastMoveX=J[aB+4];
this.lastMoveY=J[aB+5];
}}else{u("A "+T+","+S+" "+X+" "+Y+","+ac+" "+an+","+am);
this.lastMoveX=z+an;
this.lastMoveY=i+am;
}}else{if(U=="image"){var ab=this.evaluateAttribute(af,"src",c.state);
if(ab!=null){var an=D(z+Number(af.getAttribute("x"))*t);
var am=D(i+Number(af.getAttribute("y"))*s);
var ap=D(Number(af.getAttribute("w"))*t);
var aC=D(Number(af.getAttribute("h"))*s);
var W=false;
var aE=af.getAttribute("flipH")=="1";
var ax=af.getAttribute("flipV")=="1";
if(d){e=document.createElement("v:image");
e.style.filter="alpha(opacity="+F.alpha+")";
e.style.left=an+"px";
e.style.top=am+"px";
e.style.width=ap+"px";
e.style.height=aC+"px";
e.src=ab;
if(aE&&ax){e.style.rotation="180";
}else{if(aE){e.style.flip="x";
}else{if(ax){e.style.flip="y";
}}}}else{e=document.createElementNS(mxConstants.NS_SVG,"image");
e.setAttributeNS(mxConstants.NS_XLINK,"xlink:href",ab);
e.setAttribute("opacity",F.alpha/100);
e.setAttribute("x",an);
e.setAttribute("y",am);
e.setAttribute("width",ap);
e.setAttribute("height",aC);
if(!W){e.setAttribute("preserveAspectRatio","none");
}if(aE||ax){var N=1;
var M=1;
var L=0;
var K=0;
if(aE){N=-1;
L=-ap-2*an;
}if(ax){M=-1;
K=-aC-2*am;
}e.setAttribute("transform",G+"scale("+N+" "+M+") translate("+L+" "+K+") ");
}else{e.setAttribute("transform",G);
}}o.appendChild(e);
}}else{if(U=="include-shape"){var ay=mxStencilRegistry.getStencil(af.getAttribute("name"));
if(ay!=null){var an=z+Number(af.getAttribute("x"))*t;
var am=i+Number(af.getAttribute("y"))*s;
var ap=Number(af.getAttribute("w"))*t;
var aC=Number(af.getAttribute("h"))*s;
ay.renderDom(c,new mxRectangle(an,am,ap,aC),o,F);
}}else{if(U=="text"){var ag=this.evaluateTextAttribute(af,"str",c.state);
if(ag!=null){var an=D(z+Number(af.getAttribute("x"))*t);
var am=D(i+Number(af.getAttribute("y"))*s);
var az=af.getAttribute("align")||"left";
var aq=af.getAttribute("valign")||"top";
if(d){e=document.createElement("v:shape");
e.style.position="absolute";
e.style.width="1px";
e.style.height="1px";
e.style.left=an+"px";
e.style.top=am+"px";
var V=document.createElement("v:fill");
V.color=F.fontColor;
V.on="true";
e.appendChild(V);
var ad=document.createElement("v:stroke");
ad.on="false";
e.appendChild(ad);
var av=document.createElement("v:path");
av.textpathok="true";
av.v="m "+an+" "+am+" l "+(an+1)+" "+am;
e.appendChild(av);
var aF=document.createElement("v:textpath");
aF.style.cssText="v-text-align:"+az;
aF.style.fontSize=Math.round(F.fontSize/A)+"px";
aF.style.fontFamily=F.fontFamily;
aF.string=ag;
aF.on="true";
if((F.fontStyle&mxConstants.FONT_BOLD)==mxConstants.FONT_BOLD){aF.style.fontWeight="bold";
}if((F.fontStyle&mxConstants.FONT_ITALIC)==mxConstants.FONT_ITALIC){aF.style.fontStyle="italic";
}if((F.fontStyle&mxConstants.FONT_UNDERLINE)==mxConstants.FONT_UNDERLINE){aF.style.textDecoration="underline";
}if(aq=="top"){e.style.top=(am+F.fontSize/2)+"px";
}else{if(aq=="bottom"){e.style.top=(am-F.fontSize/3)+"px";
}}e.appendChild(aF);
}else{e=document.createElementNS(mxConstants.NS_SVG,"text");
e.setAttribute("fill",F.fontColor);
e.setAttribute("font-family",F.fontFamily);
e.setAttribute("font-size",F.fontSize);
e.setAttribute("stroke","none");
e.setAttribute("x",an);
e.appendChild(document.createTextNode(ag));
if((F.fontStyle&mxConstants.FONT_BOLD)==mxConstants.FONT_BOLD){e.setAttribute("font-weight","bold");
}if((F.fontStyle&mxConstants.FONT_ITALIC)==mxConstants.FONT_ITALIC){e.setAttribute("font-style","italic");
}if((F.fontStyle&mxConstants.FONT_UNDERLINE)==mxConstants.FONT_UNDERLINE){e.setAttribute("text-decoration",uline);
}if(az=="left"){az="start";
}else{if(az=="center"){az="middle";
}else{if(az=="right"){az="end";
}}}e.setAttribute("text-anchor",az);
if(aq=="top"){e.setAttribute("y",am+F.fontSize/5);
e.setAttribute("dy","1ex");
}else{if(aq=="middle"){e.setAttribute("y",am+F.fontSize/8);
e.setAttribute("dy","0.5ex");
}else{e.setAttribute("y",am);
}}if(G.length>0){e.setAttribute("transform",G);
}}o.appendChild(e);
}}else{if(au||H||ar){if(e!=null){var Q=null;
if(F.dashed){var aD=(d)?B:Number(e.getAttribute("stroke-width"));
var P=[];
for(var aB=0;
aB<F.dashpattern.length;
aB++){P.push(Math.max(1,Math.round(Number(F.dashpattern[aB])*aD)));
}Q=P.join(" ");
}if(H||ar){if(d){var ad=document.createElement("v:stroke");
ad.endcap=F.linecap||"flat";
ad.joinstyle=F.linejoin||"miter";
ad.miterlimit=F.miterlimit||"10";
e.appendChild(ad);
if(Q!=null){ad.dashstyle=Q;
}}else{if(F.linejoin!=null){e.setAttribute("stroke-linejoin",F.linejoin);
}if(F.linecap!=null){var at=F.linecap;
if(at=="flat"){at="butt";
}e.setAttribute("stroke-linecap",at);
}if(F.miterlimit!=null){e.setAttribute("stroke-miterlimit",F.miterlimit);
}if(Q!=null){e.setAttribute("stroke-dasharray",Q);
}}}if(y&&c.isShadow){var L=mxConstants.SHADOW_OFFSET_X*c.scale;
var K=mxConstants.SHADOW_OFFSET_Y*c.scale;
if(d){var ah=document.createElement("v:shadow");
ah.setAttribute("on","true");
ah.setAttribute("color",mxConstants.SHADOWCOLOR);
ah.setAttribute("offset",Math.round(L)+"px,"+Math.round(K)+"px");
ah.setAttribute("opacity",(mxConstants.SHADOW_OPACITY*100)+"%");
var ad=document.createElement("v:stroke");
ad.endcap=F.linecap||"flat";
ad.joinstyle=F.linejoin||"miter";
ad.miterlimit=F.miterlimit||"10";
if(Q!=null){ad.dashstyle=Q;
}ah.appendChild(ad);
e.appendChild(ah);
}else{var ah=e.cloneNode(true);
ah.setAttribute("stroke",mxConstants.SHADOWCOLOR);
if(F.fill!=null&&(au||ar)){ah.setAttribute("fill",mxConstants.SHADOWCOLOR);
}else{ah.setAttribute("fill","none");
}ah.setAttribute("transform","translate("+L+" "+K+") "+(ah.getAttribute("transform")||""));
ah.setAttribute("opacity",mxConstants.SHADOW_OPACITY);
o.appendChild(ah);
}}if(au){if(d){e.stroked="false";
}else{e.setAttribute("stroke","none");
}}else{if(H){if(d){e.filled="false";
}else{e.setAttribute("fill","none");
}}}o.appendChild(e);
}if(y){y=false;
}}else{if(U=="linecap"){F.linecap=af.getAttribute("cap");
}else{if(U=="linejoin"){F.linejoin=af.getAttribute("join");
}else{if(U=="miterlimit"){F.miterlimit=af.getAttribute("limit");
}else{if(U=="dashed"){F.dashed=af.getAttribute("dashed")=="1";
}else{if(U=="dashpattern"){var at=af.getAttribute("pattern");
if(at!=null&&at.length>0){F.dashpattern=at.split(" ");
}}else{if(U=="strokewidth"){F.strokeWidth=af.getAttribute("width")*B;
if(d){F.strokeWidth/=A;
}}else{if(U=="strokecolor"){F.stroke=af.getAttribute("color");
}else{if(U=="fillcolor"){F.fill=af.getAttribute("color");
F.fillColorAssigned=true;
}else{if(U=="alpha"){F.alpha=Number(af.getAttribute("alpha"));
}else{if(U=="fontcolor"){F.fontColor=af.getAttribute("color");
}else{if(U=="fontsize"){F.fontSize=Number(af.getAttribute("size"))*B;
}else{if(U=="fontfamily"){F.fontFamily=af.getAttribute("family");
}else{if(U=="fontstyle"){F.fontStyle=Number(af.getAttribute("style"));
}}}}}}}}}}}}}}}}}}}}}}}}}}}}};
if(!d){var b=document.createElementNS(mxConstants.NS_SVG,"rect");
b.setAttribute("x",n.x);
b.setAttribute("y",n.y);
b.setAttribute("width",n.width);
b.setAttribute("height",n.height);
b.setAttribute("fill","none");
b.setAttribute("stroke","none");
o.appendChild(b);
}if(this.bgNode!=null){var C=this.bgNode.firstChild;
while(C!=null){if(C.nodeType==mxConstants.NODETYPE_ELEMENT){l.call(this,C);
}C=C.nextSibling;
}}else{y=false;
}if(this.fgNode!=null){var C=this.fgNode.firstChild;
while(C!=null){if(C.nodeType==mxConstants.NODETYPE_ELEMENT){l.call(this,C);
}C=C.nextSibling;
}}}};
mxStencil.prototype.drawShape=function(e,c,a,d){var g=(d)?this.bgNode:this.fgNode;
if(g!=null){var i=mxUtils.getValue(c.style,mxConstants.STYLE_DIRECTION,null);
var b=this.computeAspect(c,a,i);
var f=Math.min(b.width,b.height);
var k=(this.strokewidth=="inherit")?Number(mxUtils.getNumber(c.style,mxConstants.STYLE_STROKEWIDTH,1))*c.view.scale:Number(this.strokewidth)*f;
this.lastMoveX=0;
this.lastMoveY=0;
e.setStrokeWidth(k);
var h=g.firstChild;
while(h!=null){if(h.nodeType==mxConstants.NODETYPE_ELEMENT){this.drawNode(e,c,h,b);
}h=h.nextSibling;
}return true;
}return false;
};
mxStencil.prototype.computeAspect=function(b,a,g){var c=a.x;
var h=a.y;
var f=a.width/this.w0;
var e=a.height/this.h0;
var d=(g=="north"||g=="south");
if(d){e=a.width/this.h0;
f=a.height/this.w0;
var i=(a.width-a.height)/2;
c+=i;
h-=i;
}if(this.aspect=="fixed"){e=Math.min(f,e);
f=e;
if(d){c+=(a.height-this.w0*f)/2;
h+=(a.width-this.h0*e)/2;
}else{c+=(a.width-this.w0*f)/2;
h+=(a.height-this.h0*e)/2;
}}return new mxRectangle(c,h,f,e);
};
mxStencil.prototype.drawNode=function(c,e,B,t){var L=B.nodeName;
var I=t.x;
var b=t.y;
var v=t.width;
var s=t.height;
var J=Math.min(v,s);
if(L=="save"){c.save();
}else{if(L=="restore"){c.restore();
}else{if(L=="path"){c.begin();
var a=B.firstChild;
while(a!=null){if(a.nodeType==mxConstants.NODETYPE_ELEMENT){this.drawNode(c,e,a,t);
}a=a.nextSibling;
}}else{if(L=="close"){c.close();
}else{if(L=="move"){this.lastMoveX=I+Number(B.getAttribute("x"))*v;
this.lastMoveY=b+Number(B.getAttribute("y"))*s;
c.moveTo(this.lastMoveX,this.lastMoveY);
}else{if(L=="line"){this.lastMoveX=I+Number(B.getAttribute("x"))*v;
this.lastMoveY=b+Number(B.getAttribute("y"))*s;
c.lineTo(this.lastMoveX,this.lastMoveY);
}else{if(L=="quad"){this.lastMoveX=I+Number(B.getAttribute("x2"))*v;
this.lastMoveY=b+Number(B.getAttribute("y2"))*s;
c.quadTo(I+Number(B.getAttribute("x1"))*v,b+Number(B.getAttribute("y1"))*s,this.lastMoveX,this.lastMoveY);
}else{if(L=="curve"){this.lastMoveX=I+Number(B.getAttribute("x3"))*v;
this.lastMoveY=b+Number(B.getAttribute("y3"))*s;
c.curveTo(I+Number(B.getAttribute("x1"))*v,b+Number(B.getAttribute("y1"))*s,I+Number(B.getAttribute("x2"))*v,b+Number(B.getAttribute("y2"))*s,this.lastMoveX,this.lastMoveY);
}else{if(L=="arc"){var F=Number(B.getAttribute("rx"))*v;
var D=Number(B.getAttribute("ry"))*s;
var H=Number(B.getAttribute("x-axis-rotation"));
var f=Number(B.getAttribute("large-arc-flag"));
var d=Number(B.getAttribute("sweep-flag"));
var m=I+Number(B.getAttribute("x"))*v;
var l=b+Number(B.getAttribute("y"))*s;
var o=mxUtils.arcToCurves(this.lastMoveX,this.lastMoveY,F,D,H,f,d,m,l);
for(var E=0;
E<o.length;
E+=6){c.curveTo(o[E],o[E+1],o[E+2],o[E+3],o[E+4],o[E+5]);
this.lastMoveX=o[E+4];
this.lastMoveY=o[E+5];
}}else{if(L=="rect"){c.rect(I+Number(B.getAttribute("x"))*v,b+Number(B.getAttribute("y"))*s,Number(B.getAttribute("w"))*v,Number(B.getAttribute("h"))*s);
}else{if(L=="roundrect"){var k=B.getAttribute("arcsize");
if(k==0){k=mxConstants.RECTANGLE_ROUNDING_FACTOR*100;
}var n=Number(B.getAttribute("w"))*v;
var G=Number(B.getAttribute("h"))*s;
var u=Number(k)/100;
var q=Math.min(n*u,G*u);
c.roundrect(I+Number(B.getAttribute("x"))*v,b+Number(B.getAttribute("y"))*s,n,G,q,q);
}else{if(L=="ellipse"){c.ellipse(I+Number(B.getAttribute("x"))*v,b+Number(B.getAttribute("y"))*s,Number(B.getAttribute("w"))*v,Number(B.getAttribute("h"))*s);
}else{if(L=="image"){var g=this.evaluateAttribute(B,"src",e);
c.image(I+Number(B.getAttribute("x"))*v,b+Number(B.getAttribute("y"))*s,Number(B.getAttribute("w"))*v,Number(B.getAttribute("h"))*s,g,false,B.getAttribute("flipH")=="1",B.getAttribute("flipV")=="1");
}else{if(L=="text"){var A=this.evaluateTextAttribute(B,"str",e);
c.text(I+Number(B.getAttribute("x"))*v,b+Number(B.getAttribute("y"))*s,0,0,A,B.getAttribute("align"),B.getAttribute("valign"),B.getAttribute("vertical"));
}else{if(L=="include-shape"){var C=mxStencilRegistry.getStencil(B.getAttribute("name"));
if(C!=null){var m=I+Number(B.getAttribute("x"))*v;
var l=b+Number(B.getAttribute("y"))*s;
var n=Number(B.getAttribute("w"))*v;
var G=Number(B.getAttribute("h"))*s;
var K=new mxRectangle(m,l,n,G);
C.drawShape(c,e,K,true);
C.drawShape(c,e,K,false);
}}else{if(L=="fillstroke"){c.fillAndStroke();
}else{if(L=="fill"){c.fill();
}else{if(L=="stroke"){c.stroke();
}else{if(L=="strokewidth"){c.setStrokeWidth(Number(B.getAttribute("width"))*J);
}else{if(L=="dashed"){c.setDashed(B.getAttribute("dashed")=="1");
}else{if(L=="dashpattern"){var z=B.getAttribute("pattern");
if(z!=null){var K=z.split(" ");
var p=[];
for(var E=0;
E<K.length;
E++){if(K[E].length>0){p.push(Number(K[E])*J);
}}z=p.join(" ");
c.setDashPattern(z);
}}else{if(L=="strokecolor"){c.setStrokeColor(B.getAttribute("color"));
}else{if(L=="linecap"){c.setLineCap(B.getAttribute("cap"));
}else{if(L=="linejoin"){c.setLineJoin(B.getAttribute("join"));
}else{if(L=="miterlimit"){c.setMiterLimit(Number(B.getAttribute("limit")));
}else{if(L=="fillcolor"){c.setFillColor(B.getAttribute("color"));
}else{if(L=="alpha"){c.setAlpha(B.getAttribute("alpha"));
}else{if(L=="fontcolor"){c.setFontColor(B.getAttribute("color"));
}else{if(L=="fontstyle"){c.setFontStyle(B.getAttribute("style"));
}else{if(L=="fontfamily"){c.setFontFamily(B.getAttribute("family"));
}else{if(L=="fontsize"){c.setFontSize(Number(B.getAttribute("size"))*J);
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}};
var mxStencilRegistry={stencils:[],addStencil:function(a,b){mxStencilRegistry.stencils[a]=b;
},getStencil:function(a){return mxStencilRegistry.stencils[a];
}};
function mxStencilShape(a){this.stencil=a;
}mxStencilShape.prototype=new mxShape();
mxStencilShape.prototype.constructor=mxStencilShape;
mxStencilShape.prototype.mixedModeHtml=false;
mxStencilShape.prototype.preferModeHtml=false;
mxStencilShape.prototype.stencil=null;
mxStencilShape.prototype.state=null;
mxStencilShape.prototype.vmlScale=4;
mxStencilShape.prototype.apply=function(a){this.state=a;
mxShape.prototype.apply.apply(this,arguments);
};
mxStencilShape.prototype.createSvg=function(){var a=document.createElementNS(mxConstants.NS_SVG,"g");
this.configureSvgShape(a);
return a;
};
mxStencilShape.prototype.configureHtmlShape=function(a){mxShape.prototype.configureHtmlShape.apply(this,arguments);
if(!mxUtils.isVml(a)){a.style.overflow="visible";
}};
mxStencilShape.prototype.createVml=function(){var a=(document.documentMode==8)?"div":"v:group";
var b=document.createElement(a);
this.configureTransparentBackground(b);
b.style.position="absolute";
return b;
};
mxStencilShape.prototype.configureVmlShape=function(a){};
mxStencilShape.prototype.redraw=function(){this.updateBoundingBox();
if(this.dialect==mxConstants.DIALECT_SVG){this.redrawShape();
}else{this.node.style.visibility="hidden";
this.redrawShape();
this.node.style.visibility="visible";
}};
mxStencilShape.prototype.redrawShape=function(){if(this.dialect!=mxConstants.DIALECT_SVG){this.node.style.left=Math.round(this.bounds.x)+"px";
this.node.style.top=Math.round(this.bounds.y)+"px";
var a=Math.round(this.bounds.width);
var c=Math.round(this.bounds.height);
this.node.style.width=a+"px";
this.node.style.height=c+"px";
var d=this.node;
if(this.node.nodeName=="DIV"){d=document.createElement("v:group");
d.style.position="absolute";
d.style.left="0px";
d.style.top="0px";
d.style.width=a+"px";
d.style.height=c+"px";
}else{d.innerHTML="";
}if(mxUtils.isVml(d)){var b=(document.documentMode!=8)?this.vmlScale:1;
d.coordsize=(a*b)+","+(c*b);
}this.stencil.renderDom(this,this.bounds,d);
if(this.node!=d){this.node.innerHTML=d.outerHTML;
}}else{while(this.node.firstChild!=null){this.node.removeChild(this.node.firstChild);
}this.stencil.renderDom(this,this.bounds,this.node);
}};
var mxMarker={markers:[],paintMarker:function(p,c,a,v,q,g,m,w,s,b,o,r){var f=mxMarker.markers[c];
var i=null;
if(f!=null){var d=mxUtils.isVml(p);
var l=v.x-a.x;
var k=v.y-a.y;
if(isNaN(l)||isNaN(k)){return;
}var n=Math.max(1,Math.sqrt(l*l+k*k));
var u=l*w/n;
var t=k*w/n;
v=v.clone();
if(d){v.x-=s;
v.y-=b;
}var e=true;
var x=(o)?mxConstants.STYLE_STARTFILL:mxConstants.STYLE_ENDFILL;
if(r[x]==0){e=false;
}if(d){p.strokecolor=q;
if(e){p.fillcolor=q;
}else{p.filled="false";
}}else{p.setAttribute("stroke",q);
var h=(r.opacity!=null)?r.opacity/100:1;
p.setAttribute("stroke-opacity",h);
if(e){p.setAttribute("fill",q);
p.setAttribute("fill-opacity",h);
}else{p.setAttribute("fill","none");
}}i=f.call(this,p,c,v,u,t,g,m,w,d);
}return i;
}};
(function(){var a=function(d,l,k,h,g,n,o,e,m){var c=h*n*1.118;
var b=g*n*1.118;
k.x-=c;
k.y-=b;
h=h*(o+n);
g=g*(o+n);
if(m){d.path="m"+Math.round(k.x)+","+Math.round(k.y)+" l"+Math.round(k.x-h-g/2)+" "+Math.round(k.y-g+h/2)+((l!=mxConstants.ARROW_CLASSIC)?"":" "+Math.round(k.x-h*3/4)+" "+Math.round(k.y-g*3/4))+" "+Math.round(k.x+g/2-h)+" "+Math.round(k.y-g-h/2)+" x e";
d.setAttribute("strokeweight",(n*e)+"px");
}else{d.setAttribute("d","M "+k.x+" "+k.y+" L "+(k.x-h-g/2)+" "+(k.y-g+h/2)+((l!=mxConstants.ARROW_CLASSIC)?"":" L "+(k.x-h*3/4)+" "+(k.y-g*3/4))+" L "+(k.x+g/2-h)+" "+(k.y-g-h/2)+" z");
d.setAttribute("stroke-width",n*e);
}var i=(l!=mxConstants.ARROW_CLASSIC)?1:3/4;
return new mxPoint(-h*i-c,-g*i-b);
};
mxMarker.markers[mxConstants.ARROW_CLASSIC]=a;
mxMarker.markers[mxConstants.ARROW_BLOCK]=a;
}());
mxMarker.markers[mxConstants.ARROW_OPEN]=function(c,h,g,f,e,k,l,d,i){var b=f*k*1.118;
var a=e*k*1.118;
g.x-=b;
g.y-=a;
f=f*(l+k);
e=e*(l+k);
if(i){c.path="m"+Math.round(g.x-f-e/2)+" "+Math.round(g.y-e+f/2)+" l"+Math.round(g.x)+" "+Math.round(g.y)+" "+Math.round(g.x+e/2-f)+" "+Math.round(g.y-e-f/2)+" e nf";
c.setAttribute("strokeweight",(k*d)+"px");
}else{c.setAttribute("d","M "+(g.x-f-e/2)+" "+(g.y-e+f/2)+" L "+(g.x)+" "+(g.y)+" L "+(g.x+e/2-f)+" "+(g.y-e-f/2));
c.setAttribute("stroke-width",k*d);
c.setAttribute("fill","none");
}return new mxPoint(-b*2,-a*2);
};
mxMarker.markers[mxConstants.ARROW_OVAL]=function(b,h,g,e,d,k,l,c,i){e*=l;
d*=l;
e*=0.5+k/2;
d*=0.5+k/2;
var a=l*c;
var f=a/2;
if(i){b.path="m"+Math.round(g.x+f)+" "+Math.round(g.y)+" at "+Math.round(g.x-f)+" "+Math.round(g.y-f)+" "+Math.round(g.x+f)+" "+Math.round(g.y+f)+" "+Math.round(g.x+f)+" "+Math.round(g.y)+" "+Math.round(g.x+f)+" "+Math.round(g.y)+" x e";
b.setAttribute("strokeweight",(k*c)+"px");
}else{b.setAttribute("d","M "+(g.x-f)+" "+(g.y)+" a "+(f)+" "+(f)+" 0  1,1 "+(a)+" 0 a "+(f)+" "+(f)+" 0  1,1 "+(-a)+" 0 z");
b.setAttribute("stroke-width",k*c);
}return new mxPoint(-e/(2+k),-d/(2+k));
};
(function(){var a=function(d,i,h,g,f,n,o,e,l){var k=(i==mxConstants.ARROW_DIAMOND)?0.7071:0.9862;
var c=g*n*k;
var b=f*n*k;
g=g*(o+n);
f=f*(o+n);
h.x-=c+g/2;
h.y-=b+f/2;
var m=((i==mxConstants.ARROW_DIAMOND)?2:3.4);
if(l){d.path="m"+Math.round(h.x+g/2)+" "+Math.round(h.y+f/2)+" l"+Math.round(h.x-f/m)+" "+Math.round(h.y+g/m)+" "+Math.round(h.x-g/2)+" "+Math.round(h.y-f/2)+" "+Math.round(h.x+f/m)+" "+Math.round(h.y-g/m)+" x e";
d.setAttribute("strokeweight",(n*e)+"px");
}else{d.setAttribute("d","M "+(h.x+g/2)+" "+(h.y+f/2)+" L "+(h.x-f/m)+" "+(h.y+g/m)+" L "+(h.x-g/2)+" "+(h.y-f/2)+" L "+(h.x+f/m)+" "+(h.y-g/m)+" z");
d.setAttribute("stroke-width",n*e);
}return new mxPoint(-c-g,-b-f);
};
mxMarker.markers[mxConstants.ARROW_DIAMOND]=a;
mxMarker.markers[mxConstants.ARROW_DIAMOND_THIN]=a;
}());
function mxActor(b,d,c,a){this.bounds=b;
this.fill=d;
this.stroke=c;
this.strokewidth=(a!=null)?a:1;
}mxActor.prototype=new mxShape();
mxActor.prototype.constructor=mxActor;
mxActor.prototype.mixedModeHtml=false;
mxActor.prototype.preferModeHtml=false;
mxActor.prototype.vmlScale=2;
mxActor.prototype.createVml=function(){var a=document.createElement("v:shape");
a.style.position="absolute";
this.configureVmlShape(a);
return a;
};
mxActor.prototype.redrawVml=function(){this.updateVmlShape(this.node);
this.node.path=this.createPath();
};
mxActor.prototype.createSvg=function(){return this.createSvgGroup("path");
};
mxActor.prototype.redrawSvg=function(){var c=Math.round(Math.max(1,this.strokewidth*this.scale));
this.innerNode.setAttribute("stroke-width",c);
this.innerNode.setAttribute("stroke-linejoin","round");
if(this.crisp&&(this.rotation==null||this.rotation==0)){this.innerNode.setAttribute("shape-rendering","crispEdges");
}else{this.innerNode.removeAttribute("shape-rendering");
}var b=this.createPath();
if(b.length>0){this.innerNode.setAttribute("d",b);
if(this.shadowNode!=null){this.shadowNode.setAttribute("transform",this.getSvgShadowTransform()+(this.innerNode.getAttribute("transform")||""));
this.shadowNode.setAttribute("stroke-width",c);
this.shadowNode.setAttribute("d",b);
}}else{this.innerNode.removeAttribute("d");
if(this.shadowNode!=null){this.shadowNode.removeAttribute("d");
}}if(this.isDashed){var a=Math.max(1,Math.round(3*this.scale*this.strokewidth));
this.innerNode.setAttribute("stroke-dasharray",a+" "+a);
}};
mxActor.prototype.redrawPath=function(e,a,f,b,d){var c=b/3;
e.moveTo(0,d);
e.curveTo(0,3*d/5,0,2*d/5,b/2,2*d/5);
e.curveTo(b/2-c,2*d/5,b/2-c,0,b/2,0);
e.curveTo(b/2+c,0,b/2+c,2*d/5,b/2,2*d/5);
e.curveTo(b,2*d/5,b,3*d/5,b,d);
e.close();
};
function mxCloud(b,d,c,a){this.bounds=b;
this.fill=d;
this.stroke=c;
this.strokewidth=(a!=null)?a:1;
}mxCloud.prototype=new mxActor();
mxCloud.prototype.constructor=mxActor;
mxCloud.prototype.redrawPath=function(d,a,e,b,c){d.moveTo(0.25*b,0.25*c);
d.curveTo(0.05*b,0.25*c,0,0.5*c,0.16*b,0.55*c);
d.curveTo(0,0.66*c,0.18*b,0.9*c,0.31*b,0.8*c);
d.curveTo(0.4*b,c,0.7*b,c,0.8*b,0.8*c);
d.curveTo(b,0.8*c,b,0.6*c,0.875*b,0.5*c);
d.curveTo(b,0.3*c,0.8*b,0.1*c,0.625*b,0.2*c);
d.curveTo(0.5*b,0.05*c,0.3*b,0.05*c,0.25*b,0.25*c);
d.close();
};
function mxRectangleShape(b,d,c,a){this.bounds=b;
this.fill=d;
this.stroke=c;
this.strokewidth=(a!=null)?a:1;
}mxRectangleShape.prototype=new mxShape();
mxRectangleShape.prototype.constructor=mxRectangleShape;
mxRectangleShape.prototype.createVml=function(){var a=(this.isRounded)?"v:roundrect":"v:rect";
var b=document.createElement(a);
this.configureVmlShape(b);
return b;
};
mxRectangleShape.prototype.createSvg=function(){return this.createSvgGroup("rect");
};
function mxEllipse(b,d,c,a){this.bounds=b;
this.fill=d;
this.stroke=c;
this.strokewidth=(a!=null)?a:1;
}mxEllipse.prototype=new mxShape();
mxEllipse.prototype.constructor=mxEllipse;
mxEllipse.prototype.mixedModeHtml=false;
mxEllipse.prototype.preferModeHtml=false;
mxEllipse.prototype.createVml=function(){var a=document.createElement("v:arc");
a.startangle="0";
a.endangle="360";
this.configureVmlShape(a);
return a;
};
mxEllipse.prototype.createSvg=function(){return this.createSvgGroup("ellipse");
};
mxEllipse.prototype.redrawSvg=function(){if(this.crisp){this.innerNode.setAttribute("shape-rendering","crispEdges");
}else{this.innerNode.removeAttribute("shape-rendering");
}this.updateSvgNode(this.innerNode);
this.updateSvgNode(this.shadowNode);
};
mxEllipse.prototype.updateSvgNode=function(b){if(b!=null){var c=Math.round(Math.max(1,this.strokewidth*this.scale));
b.setAttribute("stroke-width",c);
b.setAttribute("cx",this.bounds.x+this.bounds.width/2);
b.setAttribute("cy",this.bounds.y+this.bounds.height/2);
b.setAttribute("rx",this.bounds.width/2);
b.setAttribute("ry",this.bounds.height/2);
if(this.shadowNode!=null){this.shadowNode.setAttribute("transform",this.getSvgShadowTransform());
}if(this.isDashed){var a=Math.max(1,Math.round(3*this.scale*this.strokewidth));
b.setAttribute("stroke-dasharray",a+" "+a);
}}};
function mxDoubleEllipse(b,d,c,a){this.bounds=b;
this.fill=d;
this.stroke=c;
this.strokewidth=(a!=null)?a:1;
}mxDoubleEllipse.prototype=new mxShape();
mxDoubleEllipse.prototype.constructor=mxDoubleEllipse;
mxDoubleEllipse.prototype.vmlNodes=mxDoubleEllipse.prototype.vmlNodes.concat(["background","foreground"]);
mxDoubleEllipse.prototype.mixedModeHtml=false;
mxDoubleEllipse.prototype.preferModeHtml=false;
mxDoubleEllipse.prototype.vmlScale=2;
mxDoubleEllipse.prototype.createVml=function(){var a=document.createElement("v:group");
this.background=document.createElement("v:arc");
this.background.startangle="0";
this.background.endangle="360";
this.configureVmlShape(this.background);
a.appendChild(this.background);
this.label=this.background;
this.isShadow=false;
this.fill=null;
this.foreground=document.createElement("v:oval");
this.configureVmlShape(this.foreground);
a.appendChild(this.foreground);
this.stroke=null;
this.configureVmlShape(a);
return a;
};
mxDoubleEllipse.prototype.redrawVml=function(){this.updateVmlShape(this.node);
this.updateVmlShape(this.background);
this.updateVmlShape(this.foreground);
var b=Math.round((this.strokewidth+3)*this.scale)*this.vmlScale;
var a=Math.round(this.bounds.width*this.vmlScale);
var c=Math.round(this.bounds.height*this.vmlScale);
this.foreground.style.top=b+"px";
this.foreground.style.left=b+"px";
this.foreground.style.width=Math.max(0,a-2*b)+"px";
this.foreground.style.height=Math.max(0,c-2*b)+"px";
};
mxDoubleEllipse.prototype.createSvg=function(){var a=this.createSvgGroup("ellipse");
this.foreground=document.createElementNS(mxConstants.NS_SVG,"ellipse");
if(this.stroke!=null){this.foreground.setAttribute("stroke",this.stroke);
}else{this.foreground.setAttribute("stroke","none");
}if(mxClient.IS_NS&&!mxClient.IS_GC&&!mxClient.IS_SF){this.foreground.setAttribute("fill","transparent");
}else{this.foreground.setAttribute("fill","none");
}a.appendChild(this.foreground);
return a;
};
mxDoubleEllipse.prototype.redrawSvg=function(){if(this.crisp){this.innerNode.setAttribute("shape-rendering","crispEdges");
this.foreground.setAttribute("shape-rendering","crispEdges");
}else{this.innerNode.removeAttribute("shape-rendering");
this.foreground.removeAttribute("shape-rendering");
}this.updateSvgNode(this.innerNode);
this.updateSvgNode(this.shadowNode);
this.updateSvgNode(this.foreground,(this.strokewidth+3)*this.scale);
if(this.isDashed){var a=Math.max(1,Math.round(3*this.scale*this.strokewidth));
this.innerNode.setAttribute("stroke-dasharray",a+" "+a);
}};
mxDoubleEllipse.prototype.updateSvgNode=function(b,a){a=(a!=null)?a:0;
if(b!=null){var c=Math.round(Math.max(1,this.strokewidth*this.scale));
b.setAttribute("stroke-width",c);
b.setAttribute("cx",this.bounds.x+this.bounds.width/2);
b.setAttribute("cy",this.bounds.y+this.bounds.height/2);
b.setAttribute("rx",Math.max(0,this.bounds.width/2-a));
b.setAttribute("ry",Math.max(0,this.bounds.height/2-a));
if(this.shadowNode!=null){this.shadowNode.setAttribute("transform",this.getSvgShadowTransform());
}}};
function mxRhombus(b,d,c,a){this.bounds=b;
this.fill=d;
this.stroke=c;
this.strokewidth=(a!=null)?a:1;
}mxRhombus.prototype=new mxShape();
mxRhombus.prototype.constructor=mxRhombus;
mxRhombus.prototype.mixedModeHtml=false;
mxRhombus.prototype.preferModeHtml=false;
mxRhombus.prototype.createHtml=function(){var a=document.createElement("DIV");
this.configureHtmlShape(a);
return a;
};
mxRhombus.prototype.createVml=function(){var a=document.createElement("v:shape");
this.configureVmlShape(a);
return a;
};
mxRhombus.prototype.createSvg=function(){return this.createSvgGroup("path");
};
mxRhombus.prototype.redrawVml=function(){this.updateVmlShape(this.node);
var a=0;
var d=0;
var b=Math.round(this.bounds.width);
var c=Math.round(this.bounds.height);
this.node.path="m "+Math.round(a+b/2)+" "+d+" l "+(a+b)+" "+Math.round(d+c/2)+" l "+Math.round(a+b/2)+" "+(d+c)+" l "+a+" "+Math.round(d+c/2)+" x e";
};
mxRhombus.prototype.redrawHtml=function(){this.updateHtmlShape(this.node);
};
mxRhombus.prototype.redrawSvg=function(){this.updateSvgNode(this.innerNode);
if(this.shadowNode!=null){this.updateSvgNode(this.shadowNode);
}};
mxRhombus.prototype.updateSvgNode=function(f){var k=Math.round(Math.max(1,this.strokewidth*this.scale));
f.setAttribute("stroke-width",k);
var a=this.bounds.x;
var i=this.bounds.y;
var c=this.bounds.width;
var e=this.bounds.height;
var g="M "+Math.round(a+c/2)+" "+Math.round(i)+" L "+Math.round(a+c)+" "+Math.round(i+e/2)+" L "+Math.round(a+c/2)+" "+Math.round(i+e)+" L "+Math.round(a)+" "+Math.round(i+e/2)+" Z ";
f.setAttribute("d",g);
this.updateSvgTransform(f,f==this.shadowNode);
if(this.isDashed){var b=Math.max(1,Math.round(3*this.scale*this.strokewidth));
f.setAttribute("stroke-dasharray",b+" "+b);
}};
function mxPolyline(b,c,a){this.points=b;
this.stroke=c;
this.strokewidth=(a!=null)?a:1;
}mxPolyline.prototype=new mxShape();
mxPolyline.prototype.constructor=mxPolyline;
mxPolyline.prototype.addPipe=true;
mxPolyline.prototype.create=function(){var a=null;
if(this.dialect==mxConstants.DIALECT_SVG){a=this.createSvg();
}else{if(this.dialect==mxConstants.DIALECT_STRICTHTML||(this.dialect==mxConstants.DIALECT_PREFERHTML&&this.points!=null&&this.points.length>0)){a=document.createElement("DIV");
this.configureHtmlShape(a);
a.style.borderStyle="";
a.style.background="";
}else{a=document.createElement("v:shape");
this.configureVmlShape(a);
var b=document.createElement("v:stroke");
if(this.opacity!=null){b.opacity=this.opacity+"%";
}a.appendChild(b);
}}return a;
};
mxPolyline.prototype.redrawVml=function(){if(this.points!=null&&this.points.length>0&&this.points[0]!=null){this.bounds=new mxRectangle(this.points[0].x,this.points[0].y,0,0);
for(var a=1;
a<this.points.length;
a++){this.bounds.add(new mxRectangle(this.points[a].x,this.points[a].y,0,0));
}}mxShape.prototype.redrawVml.apply(this,arguments);
};
mxPolyline.prototype.createSvg=function(){var a=this.createSvgGroup("path");
if(this.addPipe){this.pipe=this.createSvgPipe();
a.appendChild(this.pipe);
}return a;
};
mxPolyline.prototype.redrawSvg=function(){this.updateSvgShape(this.innerNode);
var a=this.innerNode.getAttribute("d");
if(a!=null&&this.pipe!=null){this.pipe.setAttribute("d",a);
var b=Math.round(Math.max(1,this.strokewidth*this.scale));
this.pipe.setAttribute("stroke-width",b+mxShape.prototype.SVG_STROKE_TOLERANCE);
}};
function mxArrow(c,e,d,b,a,g,f){this.points=c;
this.fill=e;
this.stroke=d;
this.strokewidth=(b!=null)?b:1;
this.arrowWidth=(a!=null)?a:mxConstants.ARROW_WIDTH;
this.spacing=(g!=null)?g:mxConstants.ARROW_SPACING;
this.endSize=(f!=null)?f:mxConstants.ARROW_SIZE;
}mxArrow.prototype=new mxActor();
mxArrow.prototype.constructor=mxArrow;
mxArrow.prototype.addPipe=false;
mxArrow.prototype.enableFill=true;
mxArrow.prototype.configureTransparentBackground=function(a){};
mxArrow.prototype.augmentBoundingBox=function(a){a.grow(Math.max(this.arrowWidth/2,this.endSize/2)*this.scale);
mxShape.prototype.augmentBoundingBox.apply(this,arguments);
};
mxArrow.prototype.createVml=function(){if(!this.enableFill){this.fill=null;
}return mxActor.prototype.createVml.apply(this,arguments);
};
mxArrow.prototype.createSvg=function(){if(!this.enableFill){this.fill=null;
}var a=mxActor.prototype.createSvg.apply(this,arguments);
if(this.addPipe){this.pipe=this.createSvgPipe();
a.appendChild(this.pipe);
}return a;
};
mxArrow.prototype.reconfigure=function(){if(!this.enableFill){this.fill=null;
}mxActor.prototype.reconfigure.apply(this,arguments);
};
mxArrow.prototype.redrawSvg=function(){mxActor.prototype.redrawSvg.apply(this,arguments);
if(this.pipe!=null){var a=this.innerNode.getAttribute("d");
if(a!=null){this.pipe.setAttribute("d",this.innerNode.getAttribute("d"));
var b=Math.round(this.strokewidth*this.scale);
this.pipe.setAttribute("stroke-width",b+mxShape.prototype.SVG_STROKE_TOLERANCE);
}}};
mxArrow.prototype.redrawPath=function(v,r,p,t,F){v.translate.x-=r;
v.translate.y-=p;
var f=this.spacing*this.scale;
var A=this.arrowWidth*this.scale;
var d=this.endSize*this.scale;
var c=this.points[0];
var I=this.points[this.points.length-1];
var u=I.x-c.x;
var s=I.y-c.y;
var z=Math.sqrt(u*u+s*s);
var e=z-2*f-d;
var H=u/z;
var G=s/z;
var l=e*H;
var k=e*G;
var i=A*G/3;
var g=-A*H/3;
var D=c.x-i/2+f*H;
var B=c.y-g/2+f*G;
var b=D+i;
var a=B+g;
var o=b+l;
var m=a+k;
var E=o+i;
var C=m+g;
var q=E-3*i;
var n=C-3*g;
v.moveTo(D,B);
v.lineTo(b,a);
v.lineTo(o,m);
v.lineTo(E,C);
v.lineTo(I.x-f*H,I.y-f*G);
v.lineTo(q,n);
v.lineTo(q+i,n+g);
v.lineTo(D,B);
v.close();
};
function mxText(m,g,p,f,o,r,k,d,e,t,b,h,c,s,q,n,i,a,l,u){this.value=m;
this.bounds=g;
this.color=(o!=null)?o:"black";
this.align=(p!=null)?p:"";
this.valign=(f!=null)?f:"";
this.family=(r!=null)?r:mxConstants.DEFAULT_FONTFAMILY;
this.size=(k!=null)?k:mxConstants.DEFAULT_FONTSIZE;
this.fontStyle=(d!=null)?d:0;
this.spacing=parseInt(e||2);
this.spacingTop=this.spacing+parseInt(t||0);
this.spacingRight=this.spacing+parseInt(b||0);
this.spacingBottom=this.spacing+parseInt(h||0);
this.spacingLeft=this.spacing+parseInt(c||0);
this.horizontal=(s!=null)?s:true;
this.background=q;
this.border=n;
this.wrap=(i!=null)?i:false;
this.clipped=(a!=null)?a:false;
this.overflow=(l!=null)?l:"visible";
this.labelPadding=(u!=null)?u:0;
}mxText.prototype=new mxShape();
mxText.prototype.constructor=mxText;
mxText.prototype.replaceLinefeeds=true;
mxText.prototype.ieVerticalFilter="progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";
mxText.prototype.verticalTextDegree=-90;
mxText.prototype.forceIgnoreStringSize=false;
mxText.prototype.isStyleSet=function(a){return(this.fontStyle&a)==a;
};
mxText.prototype.create=function(a){var b=null;
if(this.dialect==mxConstants.DIALECT_SVG){b=this.createSvg();
}else{if(this.dialect==mxConstants.DIALECT_STRICTHTML||this.dialect==mxConstants.DIALECT_PREFERHTML||!mxUtils.isVml(a)){if(mxClient.IS_SVG&&!mxClient.NO_FO){b=this.createForeignObject();
}else{b=this.createHtml();
}}else{b=this.createVml();
}}return b;
};
mxText.prototype.updateBoundingBox=function(){};
mxText.prototype.createForeignObject=function(){var c=document.createElementNS(mxConstants.NS_SVG,"g");
var b=document.createElementNS(mxConstants.NS_SVG,"foreignObject");
b.setAttribute("pointer-events","fill");
if(this.overflow=="hidden"){b.style.overflow="hidden";
}else{b.style.overflow="visible";
}var a=document.createElement("div");
a.style.margin="0px";
a.style.height="100%";
b.appendChild(a);
c.appendChild(b);
return c;
};
mxText.prototype.createHtml=function(){var a=this.createHtmlTable();
a.style.position="absolute";
return a;
};
mxText.prototype.createVml=function(){return document.createElement("v:textbox");
};
mxText.prototype.redrawHtml=function(){this.redrawVml();
};
mxText.prototype.getOffset=function(h,f,a,e,b){b=(b!=null)?b:this.horizontal;
var d=(b)?this.align:this.valign;
var c=(b)?this.valign:this.align;
var i=a-h;
var g=e-f;
if(d==mxConstants.ALIGN_CENTER||d==mxConstants.ALIGN_MIDDLE){i=Math.round(i/2);
}else{if(d==mxConstants.ALIGN_LEFT||d===mxConstants.ALIGN_TOP){i=(b)?0:(a-e)/2;
}else{if(!b){i=(a+e)/2-h;
}}}if(c==mxConstants.ALIGN_MIDDLE||c==mxConstants.ALIGN_CENTER){g=Math.round(g/2);
}else{if(c==mxConstants.ALIGN_TOP||c==mxConstants.ALIGN_LEFT){g=(b)?0:(e+a)/2-f;
}else{if(!b){g=(e-a)/2;
}}}return new mxPoint(i,g);
};
mxText.prototype.getSpacing=function(b){b=(b!=null)?b:this.horizontal;
var c=0;
var a=0;
if(this.align==mxConstants.ALIGN_CENTER){c=(this.spacingLeft-this.spacingRight)/2;
}else{if(this.align==mxConstants.ALIGN_RIGHT){c=-this.spacingRight;
}else{c=this.spacingLeft;
}}if(this.valign==mxConstants.ALIGN_MIDDLE){a=(this.spacingTop-this.spacingBottom)/2;
}else{if(this.valign==mxConstants.ALIGN_BOTTOM){a=-this.spacingBottom;
}else{a=this.spacingTop;
}}return(b)?new mxPoint(c,a):new mxPoint(a,c);
};
mxText.prototype.createHtmlTable=function(){var b=document.createElement("table");
b.style.borderCollapse="collapse";
var a=document.createElement("tbody");
var c=document.createElement("tr");
var d=document.createElement("td");
if(document.documentMode>=9){d.style.height="100%";
}c.appendChild(d);
a.appendChild(c);
b.appendChild(a);
return b;
};
mxText.prototype.updateHtmlTable=function(a,c){c=(c!=null)?c:1;
var d=a.firstChild.firstChild.firstChild;
if(this.wrap){a.style.width="";
}if(mxUtils.isNode(this.value)){if(d.firstChild!=this.value){if(d.firstChild!=null){d.removeChild(d.firstChild);
}d.appendChild(this.value);
}}else{if(this.lastValue!=this.value){d.innerHTML=(this.replaceLinefeeds)?this.value.replace(/\n/g,"<br/>"):this.value;
this.lastValue=this.value;
}}var b=Math.round(this.size*c);
if(b<=0){a.style.visibility="hidden";
}else{a.style.visibility="";
}a.style.fontSize=b+"px";
a.style.color=this.color;
a.style.fontFamily=this.family;
if(this.isStyleSet(mxConstants.FONT_BOLD)){a.style.fontWeight="bold";
}else{a.style.fontWeight="normal";
}if(this.isStyleSet(mxConstants.FONT_ITALIC)){a.style.fontStyle="italic";
}else{a.style.fontStyle="";
}if(this.isStyleSet(mxConstants.FONT_UNDERLINE)){a.style.textDecoration="underline";
}else{a.style.textDecoration="";
}if(mxClient.IS_IE){if(this.isStyleSet(mxConstants.FONT_SHADOW)){d.style.filter="Shadow(Color=#666666,Direction=135,Strength=%)";
}else{d.style.removeAttribute("filter");
}}d.style.textAlign=(this.align==mxConstants.ALIGN_RIGHT)?"right":((this.align==mxConstants.ALIGN_CENTER)?"center":"left");
d.style.verticalAlign=(this.valign==mxConstants.ALIGN_BOTTOM)?"bottom":((this.valign==mxConstants.ALIGN_MIDDLE)?"middle":"top");
if(this.value.length>0&&this.background!=null){d.style.background=this.background;
}else{d.style.background="";
}d.style.padding=this.labelPadding+"px";
if(this.value.length>0&&this.border!=null){a.style.borderColor=this.border;
a.style.borderWidth="1px";
a.style.borderStyle="solid";
}else{a.style.borderStyle="none";
}};
mxText.prototype.getTableSize=function(a){return new mxRectangle(0,0,a.offsetWidth,a.offsetHeight);
};
mxText.prototype.updateTableWidth=function(b){var d=b.firstChild.firstChild.firstChild;
if(this.wrap&&this.bounds.width>0&&this.dialect!=mxConstants.DIALECT_SVG){d.style.whiteSpace="nowrap";
var a=this.getTableSize(b);
var c=Math.min(a.width,((this.horizontal||mxUtils.isVml(this.node))?this.bounds.width:this.bounds.height)/this.scale);
if(mxClient.IS_OP){c*=this.scale;
}b.style.width=Math.round(c)+"px";
d.style.whiteSpace="normal";
}else{b.style.width="";
}if(!this.wrap||this.bounds.width==0){d.style.whiteSpace="nowrap";
}else{d.style.whiteSpace="normal";
}};
mxText.prototype.redrawVml=function(){if(this.node.nodeName=="g"){this.redrawForeignObject();
}else{if(mxUtils.isVml(this.node)){this.redrawTextbox();
}else{this.redrawHtmlTable();
}}};
mxText.prototype.redrawTextbox=function(){var s=this.node;
if(s.firstChild==null){s.appendChild(this.createHtmlTable());
}var A=s.firstChild;
this.updateHtmlTable(A);
this.updateTableWidth(A);
if(this.opacity!=null){mxUtils.setOpacity(A,this.opacity);
}A.style.filter="";
s.inset="0px,0px,0px,0px";
if(this.overflow!="fill"){var q=this.getTableSize(A);
var k=q.width*this.scale;
var v=q.height*this.scale;
var e=this.getOffset(this.bounds.width,this.bounds.height,k,v);
if(!this.horizontal){A.style.filter=this.ieVerticalFilter;
}var c=this.getSpacing();
var g=this.bounds.x-e.x+c.x*this.scale;
var f=this.bounds.y-e.y+c.y*this.scale;
var z=this.bounds.x;
var a=this.bounds.y;
var d=this.bounds.width;
var o=this.bounds.height;
if(this.horizontal){var D=Math.round(g-z);
var C=Math.round(f-a);
var p=Math.min(0,Math.round(z+d-g-k-1));
var B=Math.min(0,Math.round(a+o-f-v-1));
s.inset=D+"px,"+C+"px,"+p+"px,"+B+"px";
}else{var n=0;
var u=0;
var p=0;
var B=0;
if(this.align==mxConstants.ALIGN_CENTER){n=(o-k)/2;
B=n;
}else{if(this.align==mxConstants.ALIGN_LEFT){n=o-k;
}else{B=o-k;
}}if(this.valign==mxConstants.ALIGN_MIDDLE){u=(d-v)/2;
p=u;
}else{if(this.valign==mxConstants.ALIGN_BOTTOM){u=d-v;
}else{p=d-v;
}}s.inset=u+"px,"+n+"px,"+p+"px,"+B+"px";
}s.style.zoom=this.scale;
if(this.clipped&&this.bounds.width>0&&this.bounds.height>0){this.boundingBox=this.bounds.clone();
var m=Math.round(z-g);
var i=Math.round(a-f);
s.style.clip="rect("+(i/this.scale)+" "+((m+this.bounds.width)/this.scale)+" "+((i+this.bounds.height)/this.scale)+" "+(m/this.scale)+")";
}else{this.boundingBox=new mxRectangle(g,f,k,v);
}}else{this.boundingBox=this.bounds.clone();
}};
mxText.prototype.redrawHtmlTable=function(){if(isNaN(this.bounds.x)||isNaN(this.bounds.y)||isNaN(this.bounds.width)||isNaN(this.bounds.height)){return;
}var B=this.node;
var i=B.firstChild.firstChild.firstChild;
var g=false;
var z=1;
if(mxClient.IS_IE){B.style.removeAttribute("filter");
}else{if(mxClient.IS_SF||mxClient.IS_GC){B.style.WebkitTransform="";
}else{if(mxClient.IS_MT){B.style.MozTransform="";
i.style.MozTransform="";
}else{if(mxClient.IS_OT){B.style.OTransform="";
}z=this.scale;
g=true;
}}}i.style.zoom="";
this.updateHtmlTable(B,z);
this.updateTableWidth(B);
if(this.opacity!=null){mxUtils.setOpacity(B,this.opacity);
}B.style.left="";
B.style.top="";
B.style.height="";
var q=parseFloat(i.style.zoom)||1;
var o=this.bounds.width;
var A=this.bounds.height;
var f=this.forceIgnoreStringSize||this.overflow=="fill"||(this.align==mxConstants.ALIGN_LEFT&&this.background==null&&this.border==null);
if(!f){var t=this.getTableSize(B);
o=t.width/q;
A=t.height/q;
}var d=this.getOffset(this.bounds.width/this.scale,this.bounds.height/this.scale,o,A,g||this.horizontal);
var c=this.getSpacing(g||this.horizontal);
var l=this.bounds.x/this.scale-d.x+c.x;
var k=this.bounds.y/this.scale-d.y+c.y;
var r=this.scale;
var b=1;
var D=0;
var C=0;
if(!this.horizontal){if(mxClient.IS_IE&&mxClient.IS_SVG){B.style.msTransform="rotate("+this.verticalTextDegree+"deg)";
}else{if(mxClient.IS_IE){B.style.filter=this.ieVerticalFilter;
D=(o-A)/2;
C=-D;
}else{if(mxClient.IS_SF||mxClient.IS_GC){B.style.WebkitTransform="rotate("+this.verticalTextDegree+"deg)";
}else{if(mxClient.IS_OT){B.style.OTransform="rotate("+this.verticalTextDegree+"deg)";
}else{if(mxClient.IS_MT){B.style.MozTransform="rotate("+this.verticalTextDegree+"deg)";
i.style.MozTransform="rotate(0deg)";
b=1/this.scale;
r=1;
}}}}}}var v=true;
if(mxClient.IS_MT||g){if(mxClient.IS_MT){B.style.MozTransform+=" scale("+this.scale+")";
b=1/this.scale;
}else{if(mxClient.IS_OT){i.style.OTransform="scale("+this.scale+")";
B.style.borderWidth=Math.round(this.scale*parseInt(B.style.borderWidth))+"px";
}}}else{if(!g){if(document.documentMode>=9){i.style.msTransform="scale("+this.scale+")";
}else{if(mxClient.IS_SF||mxClient.IS_GC){i.style.WebkitTransform="scale("+this.scale+")";
}else{i.style.zoom=this.scale;
if(B.style.borderWidth!=""&&document.documentMode!=8){B.style.borderWidth=Math.round(this.scale*parseInt(B.style.borderWidth))+"px";
}if(document.documentMode==8||!mxClient.IS_IE){r=1;
}v=false;
}}}}if(v){D=(this.scale-1)*o/(2*this.scale);
C=(this.scale-1)*A/(2*this.scale);
r=1;
}if(this.overflow!="fill"){var a=new mxRectangle(Math.round((l+D)*this.scale),Math.round((k+C)*this.scale),Math.round(o*r),Math.round(A*r));
B.style.left=a.x+"px";
B.style.top=a.y+"px";
B.style.width=a.width+"px";
B.style.height=a.height+"px";
if((this.background!=null||this.border!=null)&&document.documentMode>=8){var n=(this.replaceLinefeeds)?this.value.replace(/\n/g,"<br/>"):this.value;
i.innerHTML='<div style="padding:'+this.labelPadding+"px;background:"+i.style.background+";border:"+B.style.border+'">'+n+"</div>";
i.style.padding="0px";
i.style.background="";
B.style.border="";
}if(this.clipped&&this.bounds.width>0&&this.bounds.height>0){this.boundingBox=this.bounds.clone();
if(this.horizontal||(g&&!mxClient.IS_OT)){var p=Math.max(0,d.x*r);
var m=Math.max(0,d.y*r);
B.style.clip="rect("+(m)+"px "+(p+this.bounds.width*b)+"px "+(m+this.bounds.height*b)+"px "+(p)+"px)";
}else{if(mxClient.IS_IE){var e=this.bounds.width;
var u=this.bounds.height;
var p=0;
var m=0;
if(this.align==mxConstants.ALIGN_LEFT){p=Math.max(0,o-u/this.scale)*this.scale;
}else{if(this.align==mxConstants.ALIGN_CENTER){p=Math.max(0,o-u/this.scale)*this.scale/2;
}}if(this.valign==mxConstants.ALIGN_BOTTOM){m=Math.max(0,A-e/this.scale)*this.scale;
}else{if(this.valign==mxConstants.ALIGN_MIDDLE){m=Math.max(0,A-e/this.scale)*this.scale/2;
}}B.style.clip="rect("+(p)+"px "+(m+e-1)+"px "+(p+u-1)+"px "+(m)+"px)";
}else{var e=this.bounds.width/this.scale;
var u=this.bounds.height/this.scale;
if(mxClient.IS_OT){e=this.bounds.width;
u=this.bounds.height;
}var p=0;
var m=0;
if(this.align==mxConstants.ALIGN_RIGHT){p=Math.max(0,o-u);
}else{if(this.align==mxConstants.ALIGN_CENTER){p=Math.max(0,o-u)/2;
}}if(this.valign==mxConstants.ALIGN_BOTTOM){m=Math.max(0,A-e);
}else{if(this.valign==mxConstants.ALIGN_MIDDLE){m=Math.max(0,A-e)/2;
}}if(mxClient.IS_GC||mxClient.IS_SF){p*=this.scale;
m*=this.scale;
e*=this.scale;
u*=this.scale;
}B.style.clip="rect("+(m)+" "+(p+u)+" "+(m+e)+" "+(p)+")";
}}}else{this.boundingBox=a;
}}else{this.boundingBox=this.bounds.clone();
if(document.documentMode>=9||mxClient.IS_SVG){B.style.left=Math.round(this.bounds.x+this.scale/2+D)+"px";
B.style.top=Math.round(this.bounds.y+this.scale/2+C)+"px";
B.style.width=Math.round((this.bounds.width-this.scale)/this.scale)+"px";
B.style.height=Math.round((this.bounds.height-this.scale)/this.scale)+"px";
}else{r=(document.documentMode==8)?this.scale:1;
B.style.left=Math.round(this.bounds.x+this.scale/2)+"px";
B.style.top=Math.round(this.bounds.y+this.scale/2)+"px";
B.style.width=Math.round((this.bounds.width-this.scale)/r)+"px";
B.style.height=Math.round((this.bounds.height-this.scale)/r)+"px";
}}};
mxText.prototype.getVerticalOffset=function(a){return new mxPoint(a.y,-a.x);
};
mxText.prototype.redrawForeignObject=function(){var i=this.node;
var g=i.firstChild;
while(g==this.backgroundNode){g=g.nextSibling;
}var o=g.firstChild;
if(o.firstChild==null){o.appendChild(this.createHtmlTable());
}var A=o.firstChild;
this.updateHtmlTable(A);
if(this.opacity!=null){g.setAttribute("opacity",this.opacity/100);
}if(mxClient.IS_SF){A.style.borderStyle="none";
A.firstChild.firstChild.firstChild.style.background="";
if(this.backgroundNode==null&&(this.background!=null||this.border!=null)){this.backgroundNode=document.createElementNS(mxConstants.NS_SVG,"rect");
i.insertBefore(this.backgroundNode,i.firstChild);
}else{if(this.backgroundNode!=null&&this.background==null&&this.border==null){this.backgroundNode.parentNode.removeChild(this.backgroundNode);
this.backgroundNode=null;
}}if(this.backgroundNode!=null){if(this.background!=null){this.backgroundNode.setAttribute("fill",this.background);
}else{this.backgroundNode.setAttribute("fill","none");
}if(this.border!=null){this.backgroundNode.setAttribute("stroke",this.border);
}else{this.backgroundNode.setAttribute("stroke","none");
}}}var a="";
if(this.overflow!="fill"){g.removeAttribute("width");
g.removeAttribute("height");
g.style.width="";
g.style.height="";
g.style.clip="";
if(this.wrap||(!mxClient.IS_GC&&!mxClient.IS_SF)){document.body.appendChild(A);
}this.updateTableWidth(A);
var r=this.getTableSize(A);
var n=r.width;
var u=r.height;
if(A.parentNode!=o){o.appendChild(A);
}var c=this.getSpacing();
var l=this.bounds.x/this.scale+c.x;
var k=this.bounds.y/this.scale+c.y;
var e=this.bounds.width/this.scale;
var t=this.bounds.height/this.scale;
var d=this.getOffset(e,t,n,u);
if(this.horizontal){l-=d.x;
k-=d.y;
a="scale("+this.scale+")";
}else{var v=l+n/2;
var b=k+u/2;
a="scale("+this.scale+") rotate("+this.verticalTextDegree+" "+v+" "+b+")";
var B=this.getVerticalOffset(d);
l+=B.x;
k+=B.y;
}a+=" translate("+l+" "+k+")";
if(this.backgroundNode!=null){this.backgroundNode.setAttribute("width",n);
this.backgroundNode.setAttribute("height",u);
}g.setAttribute("width",n);
g.setAttribute("height",u);
if(this.clipped&&this.bounds.width>0&&this.bounds.height>0){this.boundingBox=this.bounds.clone();
var p=Math.max(0,d.x);
var m=Math.max(0,d.y);
if(this.horizontal){g.style.clip="rect("+m+"px,"+(p+e)+"px,"+(m+t)+"px,"+(p)+"px)";
}else{var p=0;
var m=0;
if(this.align==mxConstants.ALIGN_RIGHT){p=Math.max(0,n-t);
}else{if(this.align==mxConstants.ALIGN_CENTER){p=Math.max(0,n-t)/2;
}}if(this.valign==mxConstants.ALIGN_BOTTOM){m=Math.max(0,u-e);
}else{if(this.valign==mxConstants.ALIGN_MIDDLE){m=Math.max(0,u-e)/2;
}}g.style.clip="rect("+(m)+"px,"+(p+t)+"px,"+(m+e)+"px,"+(p)+"px)";
}if(this.backgroundNode!=null){l=this.bounds.x/this.scale;
k=this.bounds.y/this.scale;
if(!this.horizontal){l+=(u+n)/2-t;
k+=(u-n)/2;
var B=e;
e=t;
t=B;
}if(!mxClient.IS_GC){var z=this.getSvgClip(this.node.ownerSVGElement,l,k,e,t);
if(z!=this.clip){this.releaseSvgClip();
this.clip=z;
z.refCount++;
}this.backgroundNode.setAttribute("clip-path","url(#"+z.getAttribute("id")+")");
}}}else{this.releaseSvgClip();
if(this.backgroundNode!=null){this.backgroundNode.removeAttribute("clip-path");
}if(this.horizontal){this.boundingBox=new mxRectangle(l*this.scale,k*this.scale,n*this.scale,u*this.scale);
}else{this.boundingBox=new mxRectangle(l*this.scale,k*this.scale,u*this.scale,n*this.scale);
}}}else{this.boundingBox=this.bounds.clone();
var q=this.scale;
var n=this.bounds.width/q;
var u=this.bounds.height/q;
g.setAttribute("width",n);
g.setAttribute("height",u);
A.style.width=n+"px";
A.style.height=u+"px";
if(this.backgroundNode!=null){this.backgroundNode.setAttribute("width",A.clientWidth);
this.backgroundNode.setAttribute("height",A.offsetHeight);
}a="scale("+q+") translate("+(this.bounds.x/q)+" "+(this.bounds.y/q)+")";
if(!this.wrap){var f=A.firstChild.firstChild.firstChild;
f.style.whiteSpace="nowrap";
}}i.setAttribute("transform",a);
};
mxText.prototype.createSvg=function(){var b=document.createElementNS(mxConstants.NS_SVG,"g");
var e=this.isStyleSet(mxConstants.FONT_UNDERLINE)?"underline":"none";
var c=this.isStyleSet(mxConstants.FONT_BOLD)?"bold":"normal";
var a=this.isStyleSet(mxConstants.FONT_ITALIC)?"italic":null;
b.setAttribute("text-decoration",e);
b.setAttribute("font-family",this.family);
b.setAttribute("font-weight",c);
b.setAttribute("font-size",Math.round(this.size*this.scale)+"px");
b.setAttribute("fill",this.color);
var d=(this.align==mxConstants.ALIGN_RIGHT)?"end":(this.align==mxConstants.ALIGN_CENTER)?"middle":"start";
b.setAttribute("text-anchor",d);
if(a!=null){b.setAttribute("font-style",a);
}if(this.background!=null||this.border!=null){this.backgroundNode=document.createElementNS(mxConstants.NS_SVG,"rect");
this.backgroundNode.setAttribute("shape-rendering","crispEdges");
if(this.background!=null){this.backgroundNode.setAttribute("fill",this.background);
}else{this.backgroundNode.setAttribute("fill","none");
}if(this.border!=null){this.backgroundNode.setAttribute("stroke",this.border);
}else{this.backgroundNode.setAttribute("stroke","none");
}}this.updateSvgValue(b);
return b;
};
mxText.prototype.updateSvgValue=function(c){if(this.currentValue!=this.value){while(c.firstChild!=null){c.removeChild(c.firstChild);
}if(this.value!=null){var e=this.isStyleSet(mxConstants.FONT_UNDERLINE)?"underline":"none";
var a=this.value.split("\n");
this.textNodes=new Array(a.length);
for(var b=0;
b<a.length;
b++){if(!this.isEmptyString(a[b])){var d=this.createSvgSpan(a[b]);
c.appendChild(d);
this.textNodes[b]=d;
d.setAttribute("text-decoration",e);
}else{this.textNodes[b]=null;
}}}this.currentValue=this.value;
}};
mxText.prototype.redrawSvg=function(){if(this.node.nodeName=="foreignObject"){this.redrawHtml();
return;
}var r=Math.round(this.size*this.scale);
if(r<=0){this.node.setAttribute("visibility","hidden");
}else{this.node.removeAttribute("visibility");
}this.updateSvgValue(this.node);
this.node.setAttribute("font-size",r+"px");
if(this.opacity!=null){this.node.setAttribute("fill-opacity",this.opacity/100);
this.node.setAttribute("stroke-opacity",this.opacity/100);
}var i=this.value;
var p=this.createHtmlTable();
this.lastValue=null;
this.value=mxUtils.htmlEntities(this.value,false);
this.updateHtmlTable(p);
document.body.appendChild(p);
var n=p.offsetWidth*this.scale;
var g=p.offsetHeight*this.scale;
p.parentNode.removeChild(p);
this.value=i;
var s=2*this.scale;
if(this.align==mxConstants.ALIGN_CENTER){s+=n/2;
}else{if(this.align==mxConstants.ALIGN_RIGHT){s+=n;
}}var q=Math.round(r*1.3);
var d=this.node.childNodes.length;
var o=(this.textNodes!=null)?this.textNodes.length:0;
if(this.backgroundNode!=null){d--;
}var m=this.bounds.x;
var k=this.bounds.y;
m+=(this.align==mxConstants.ALIGN_RIGHT)?((this.horizontal)?this.bounds.width:this.bounds.height)-this.spacingRight*this.scale:(this.align==mxConstants.ALIGN_CENTER)?this.spacingLeft*this.scale+(((this.horizontal)?this.bounds.width:this.bounds.height)-this.spacingLeft*this.scale-this.spacingRight*this.scale)/2:this.spacingLeft*this.scale+1;
k+=(this.valign==mxConstants.ALIGN_BOTTOM)?((this.horizontal)?this.bounds.height:this.bounds.width)-(o-1)*q-this.spacingBottom*this.scale-4:(this.valign==mxConstants.ALIGN_MIDDLE)?(this.spacingTop*this.scale+((this.horizontal)?this.bounds.height:this.bounds.width)-this.spacingBottom*this.scale-(o-1.5)*q)/2:this.spacingTop*this.scale+q;
if(this.overflow=="fill"){if(this.align==mxConstants.ALIGN_CENTER){m=Math.max(this.bounds.x+n/2,m);
}k=Math.max(this.bounds.y+r,k);
this.boundingBox=new mxRectangle(m-s,k-q,n+4*this.scale,g+1*this.scale);
this.boundingBox.x=Math.min(this.bounds.x,this.boundingBox.x);
this.boundingBox.y=Math.min(this.bounds.y,this.boundingBox.y);
this.boundingBox.width=Math.max(this.bounds.width,this.boundingBox.width);
this.boundingBox.height=Math.max(this.bounds.height,this.boundingBox.height);
}else{this.boundingBox=new mxRectangle(m-s,k-q,n+4*this.scale,g+1*this.scale);
}if(!this.horizontal){var c=this.bounds.x+this.bounds.width/2;
var b=this.bounds.y+this.bounds.height/2;
var f=(this.bounds.width-this.bounds.height)/2;
var e=(this.bounds.height-this.bounds.width)/2;
this.node.setAttribute("transform","rotate("+this.verticalTextDegree+" "+c+" "+b+") translate("+(-e)+" "+(-f)+")");
}this.redrawSvgTextNodes(m,k,q);
if(this.value.length>0&&this.backgroundNode!=null&&this.node.firstChild!=null){if(this.node.firstChild!=this.backgroundNode){this.node.insertBefore(this.backgroundNode,this.node.firstChild);
}this.backgroundNode.setAttribute("x",this.boundingBox.x+this.scale/2+1*this.scale);
this.backgroundNode.setAttribute("y",this.boundingBox.y+this.scale/2+2*this.scale-this.labelPadding);
this.backgroundNode.setAttribute("width",this.boundingBox.width-this.scale-2*this.scale);
this.backgroundNode.setAttribute("height",this.boundingBox.height-this.scale);
var l=Math.round(Math.max(1,this.scale));
this.backgroundNode.setAttribute("stroke-width",l);
}if(this.clipped&&this.bounds.width>0&&this.bounds.height>0){this.boundingBox=this.bounds.clone();
if(!this.horizontal){this.boundingBox.width=this.bounds.height;
this.boundingBox.height=this.bounds.width;
}m=this.bounds.x;
k=this.bounds.y;
if(this.horizontal){n=this.bounds.width;
g=this.bounds.height;
}else{n=this.bounds.height;
g=this.bounds.width;
}var a=this.getSvgClip(this.node.ownerSVGElement,m,k,n,g);
if(a!=this.clip){this.releaseSvgClip();
this.clip=a;
a.refCount++;
}this.node.setAttribute("clip-path","url(#"+a.getAttribute("id")+")");
}else{this.releaseSvgClip();
this.node.removeAttribute("clip-path");
}};
mxText.prototype.redrawSvgTextNodes=function(a,f,c){if(this.textNodes!=null){var b=f;
for(var d=0;
d<this.textNodes.length;
d++){var e=this.textNodes[d];
if(e!=null){e.setAttribute("x",a);
e.setAttribute("y",b);
e.setAttribute("style","pointer-events: all");
}b+=c;
}}};
mxText.prototype.releaseSvgClip=function(){if(this.clip!=null){this.clip.refCount--;
if(this.clip.refCount==0){this.clip.parentNode.removeChild(this.clip);
}this.clip=null;
}};
mxText.prototype.getSvgClip=function(f,k,i,l,e){k=Math.round(k);
i=Math.round(i);
l=Math.round(l);
e=Math.round(e);
var b="mx-clip-"+k+"-"+i+"-"+l+"-"+e;
if(this.clip!=null&&this.clip.ident==b){return this.clip;
}var a=0;
var d=b+"-"+a;
var c=document.getElementById(d);
while(c!=null){if(c.ownerSVGElement==f){return c;
}a++;
d=b+"-"+a;
c=document.getElementById(d);
}if(c!=null){c=c.cloneNode(true);
a++;
}else{c=document.createElementNS(mxConstants.NS_SVG,"clipPath");
var g=document.createElementNS(mxConstants.NS_SVG,"rect");
g.setAttribute("x",k);
g.setAttribute("y",i);
g.setAttribute("width",l);
g.setAttribute("height",e);
c.appendChild(g);
}c.setAttribute("id",b+"-"+a);
c.ident=b;
f.appendChild(c);
c.refCount=0;
return c;
};
mxText.prototype.isEmptyString=function(a){return a.replace(/ /g,"").length==0;
};
mxText.prototype.createSvgSpan=function(b){var a=document.createElementNS(mxConstants.NS_SVG,"text");
mxUtils.write(a,b);
return a;
};
mxText.prototype.destroy=function(){this.releaseSvgClip();
mxShape.prototype.destroy.apply(this,arguments);
};
function mxTriangle(){}mxTriangle.prototype=new mxActor();
mxTriangle.prototype.constructor=mxTriangle;
mxTriangle.prototype.redrawPath=function(d,a,e,b,c){d.moveTo(0,0);
d.lineTo(b,0.5*c);
d.lineTo(0,c);
d.close();
};
function mxHexagon(){}mxHexagon.prototype=new mxActor();
mxHexagon.prototype.constructor=mxHexagon;
mxHexagon.prototype.redrawPath=function(d,a,e,b,c){d.moveTo(0.25*b,0);
d.lineTo(0.75*b,0);
d.lineTo(b,0.5*c);
d.lineTo(0.75*b,c);
d.lineTo(0.25*b,c);
d.lineTo(0,0.5*c);
d.close();
};
function mxLine(b,c,a){this.bounds=b;
this.stroke=c;
this.strokewidth=(a!=null)?a:1;
}mxLine.prototype=new mxShape();
mxLine.prototype.constructor=mxLine;
mxLine.prototype.vmlNodes=mxLine.prototype.vmlNodes.concat(["label","innerNode"]);
mxLine.prototype.mixedModeHtml=false;
mxLine.prototype.preferModeHtml=false;
mxLine.prototype.clone=function(){var a=new mxLine(this.bounds,this.stroke,this.strokewidth);
a.isDashed=this.isDashed;
return a;
};
mxLine.prototype.createVml=function(){var a=document.createElement("v:group");
a.style.position="absolute";
this.label=document.createElement("v:rect");
this.label.style.position="absolute";
this.label.stroked="false";
this.label.filled="false";
a.appendChild(this.label);
this.innerNode=document.createElement("v:shape");
this.configureVmlShape(this.innerNode);
a.appendChild(this.innerNode);
return a;
};
mxLine.prototype.reconfigure=function(){if(mxUtils.isVml(this.node)){this.configureVmlShape(this.innerNode);
}else{mxShape.prototype.reconfigure.apply(this,arguments);
}};
mxLine.prototype.redrawVml=function(){this.updateVmlShape(this.node);
this.updateVmlShape(this.label);
this.innerNode.coordsize=this.node.coordsize;
this.innerNode.strokeweight=(this.strokewidth*this.scale)+"px";
this.innerNode.style.width=this.node.style.width;
this.innerNode.style.height=this.node.style.height;
var a=this.bounds.width;
var b=this.bounds.height;
if(this.direction==mxConstants.DIRECTION_NORTH||this.direction==mxConstants.DIRECTION_SOUTH){this.innerNode.path="m "+Math.round(a/2)+" 0 l "+Math.round(a/2)+" "+Math.round(b)+" e";
}else{this.innerNode.path="m 0 "+Math.round(b/2)+" l "+Math.round(a)+" "+Math.round(b/2)+" e";
}};
mxLine.prototype.createSvg=function(){var a=this.createSvgGroup("path");
this.pipe=this.createSvgPipe();
a.appendChild(this.pipe);
return a;
};
mxLine.prototype.redrawSvg=function(){var i=Math.round(Math.max(1,this.strokewidth*this.scale));
this.innerNode.setAttribute("stroke-width",i);
if(this.bounds!=null){var a=this.bounds.x;
var g=this.bounds.y;
var c=this.bounds.width;
var e=this.bounds.height;
var f=null;
if(this.direction==mxConstants.DIRECTION_NORTH||this.direction==mxConstants.DIRECTION_SOUTH){f="M "+Math.round(a+c/2)+" "+Math.round(g)+" L "+Math.round(a+c/2)+" "+Math.round(g+e);
}else{f="M "+Math.round(a)+" "+Math.round(g+e/2)+" L "+Math.round(a+c)+" "+Math.round(g+e/2);
}this.innerNode.setAttribute("d",f);
this.pipe.setAttribute("d",f);
this.pipe.setAttribute("stroke-width",this.strokewidth+mxShape.prototype.SVG_STROKE_TOLERANCE);
this.updateSvgTransform(this.innerNode,false);
this.updateSvgTransform(this.pipe,false);
if(this.crisp){this.innerNode.setAttribute("shape-rendering","crispEdges");
}else{this.innerNode.removeAttribute("shape-rendering");
}if(this.isDashed){var b=Math.max(1,Math.round(3*this.scale*this.strokewidth));
this.innerNode.setAttribute("stroke-dasharray",b+" "+b);
}}};
function mxImageShape(b,e,d,c,a){this.bounds=b;
this.image=(e!=null)?e:"";
this.fill=d;
this.stroke=c;
this.strokewidth=(a!=null)?a:1;
this.isShadow=false;
}mxImageShape.prototype=new mxShape();
mxImageShape.prototype.constructor=mxImageShape;
mxImageShape.prototype.crisp=false;
mxImageShape.prototype.preserveImageAspect=true;
mxImageShape.prototype.apply=function(a){mxShape.prototype.apply.apply(this,arguments);
this.fill=null;
this.stroke=null;
if(this.style!=null){this.fill=mxUtils.getValue(this.style,mxConstants.STYLE_IMAGE_BACKGROUND);
this.stroke=mxUtils.getValue(this.style,mxConstants.STYLE_IMAGE_BORDER);
this.preserveImageAspect=mxUtils.getNumber(this.style,mxConstants.STYLE_IMAGE_ASPECT,1)==1;
this.gradient=null;
}};
mxImageShape.prototype.create=function(){var c=null;
if(this.dialect==mxConstants.DIALECT_SVG){c=this.createSvgGroup("rect");
this.innerNode.setAttribute("visibility","hidden");
this.innerNode.setAttribute("pointer-events","fill");
this.imageNode=document.createElementNS(mxConstants.NS_SVG,"image");
this.imageNode.setAttributeNS(mxConstants.NS_XLINK,"xlink:href",this.image);
this.imageNode.setAttribute("style","pointer-events:none");
this.configureSvgShape(this.imageNode);
this.imageNode.removeAttribute("stroke");
this.imageNode.removeAttribute("fill");
c.insertBefore(this.imageNode,this.innerNode);
if((this.fill!=null&&this.fill!=mxConstants.NONE)||(this.stroke!=null&&this.stroke!=mxConstants.NONE)){this.bg=document.createElementNS(mxConstants.NS_SVG,"rect");
c.insertBefore(this.bg,c.firstChild);
}if(!this.preserveImageAspect){this.imageNode.setAttribute("preserveAspectRatio","none");
}}else{var d=mxUtils.getValue(this.style,mxConstants.STYLE_IMAGE_FLIPH,0)==1;
var b=mxUtils.getValue(this.style,mxConstants.STYLE_IMAGE_FLIPV,0)==1;
var a=this.image.toUpperCase();
if(mxClient.IS_IE&&!d&&!b&&a.substring(0,6)=="MHTML:"){this.imageNode=document.createElement("DIV");
this.imageNode.style.filter="progid:DXImageTransform.Microsoft.AlphaImageLoader (src='"+this.image+"', sizingMethod='scale')";
c=document.createElement("DIV");
this.configureHtmlShape(c);
c.appendChild(this.imageNode);
}else{if(!mxClient.IS_IE||a.substring(0,5)=="DATA:"||document.documentMode>=9){this.imageNode=document.createElement("img");
this.imageNode.setAttribute("src",this.image);
this.imageNode.setAttribute("border","0");
this.imageNode.style.position="absolute";
this.imageNode.style.width="100%";
this.imageNode.style.height="100%";
c=document.createElement("DIV");
this.configureHtmlShape(c);
c.appendChild(this.imageNode);
}else{this.imageNode=document.createElement("v:image");
this.imageNode.style.position="absolute";
this.imageNode.src=this.image;
c=document.createElement("DIV");
this.configureHtmlShape(c);
c.style.overflow="visible";
c.appendChild(this.imageNode);
}}}return c;
};
mxImageShape.prototype.updateAspect=function(a,e){var d=Math.min(this.bounds.width/a,this.bounds.height/e);
a=Math.max(0,Math.round(a*d));
e=Math.max(0,Math.round(e*d));
var c=Math.max(0,Math.round((this.bounds.width-a)/2));
var f=Math.max(0,Math.round((this.bounds.height-e)/2));
var b=this.imageNode.style;
if(this.imageNode.parentNode==this.node){this.node.style.paddingLeft=c+"px";
this.node.style.paddingTop=f+"px";
}else{b.left=(Math.round(this.bounds.x)+c)+"px";
b.top=(Math.round(this.bounds.y)+f)+"px";
}b.width=a+"px";
b.height=e+"px";
};
mxImageShape.prototype.scheduleUpdateAspect=function(){var a=new Image();
a.onload=mxUtils.bind(this,function(){mxImageShape.prototype.updateAspect.call(this,a.width,a.height);
});
a.src=this.image;
};
mxImageShape.prototype.redraw=function(){mxShape.prototype.redraw.apply(this,arguments);
if(this.imageNode!=null&&this.bounds!=null){var f=mxUtils.getValue(this.style,mxConstants.STYLE_IMAGE_FLIPH,0)==1;
var e=mxUtils.getValue(this.style,mxConstants.STYLE_IMAGE_FLIPV,0)==1;
if(this.dialect==mxConstants.DIALECT_SVG){var h=1;
var g=1;
var b=0;
var a=0;
if(f){h=-1;
b=-this.bounds.width-2*this.bounds.x;
}if(e){g=-1;
a=-this.bounds.height-2*this.bounds.y;
}var c=(this.imageNode.getAttribute("transform")||"")+" scale("+h+" "+g+") translate("+b+" "+a+")";
this.imageNode.setAttribute("transform",c);
}else{if(this.imageNode.nodeName!="DIV"){this.imageNode.style.width=Math.max(0,Math.round(this.bounds.width))+"px";
this.imageNode.style.height=Math.max(0,Math.round(this.bounds.height))+"px";
}if(this.preserveImageAspect){this.scheduleUpdateAspect();
}if(f||e){if(mxUtils.isVml(this.imageNode)){if(f&&e){this.imageNode.style.rotation="180";
}else{if(f){this.imageNode.style.flip="x";
}else{this.imageNode.style.flip="y";
}}}else{var d=(this.imageNode.nodeName=="DIV")?"progid:DXImageTransform.Microsoft.AlphaImageLoader (src='"+this.image+"', sizingMethod='scale')":"";
if(f&&e){d+="progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";
}else{if(f){d+="progid:DXImageTransform.Microsoft.BasicImage(mirror=1)";
}else{d+="progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";
}}if(this.imageNode.style.filter!=d){this.imageNode.style.filter=d;
}}}}}};
mxImageShape.prototype.configureTransparentBackground=function(a){};
mxImageShape.prototype.redrawSvg=function(){this.updateSvgShape(this.innerNode);
this.updateSvgShape(this.imageNode);
if(this.bg!=null){this.updateSvgShape(this.bg);
if(this.fill!=null){this.bg.setAttribute("fill",this.fill);
}else{this.bg.setAttribute("fill","none");
}if(this.stroke!=null){this.bg.setAttribute("stroke",this.stroke);
}else{this.bg.setAttribute("stroke","none");
}this.bg.setAttribute("shape-rendering","crispEdges");
}};
mxImageShape.prototype.configureSvgShape=function(a){mxShape.prototype.configureSvgShape.apply(this,arguments);
if(this.imageNode!=null){if(this.opacity!=null){this.imageNode.setAttribute("opacity",this.opacity/100);
}else{this.imageNode.removeAttribute("opacity");
}}};
function mxLabel(b,d,c,a){this.bounds=b;
this.fill=d;
this.stroke=c;
this.strokewidth=(a!=null)?a:1;
}mxLabel.prototype=new mxShape();
mxLabel.prototype.constructor=mxLabel;
mxLabel.prototype.vmlNodes=mxLabel.prototype.vmlNodes.concat(["label","imageNode","indicatorImageNode","rectNode"]);
mxLabel.prototype.imageSize=mxConstants.DEFAULT_IMAGESIZE;
mxLabel.prototype.spacing=2;
mxLabel.prototype.indicatorSize=10;
mxLabel.prototype.indicatorSpacing=2;
mxLabel.prototype.opaqueVmlImages=false;
mxLabel.prototype.init=function(a){mxShape.prototype.init.apply(this,arguments);
if(this.indicatorColor!=null&&this.indicatorShape!=null){this.indicator=new this.indicatorShape();
this.indicator.dialect=this.dialect;
this.indicator.bounds=this.bounds;
this.indicator.fill=this.indicatorColor;
this.indicator.stroke=this.indicatorColor;
this.indicator.gradient=this.indicatorGradientColor;
this.indicator.direction=this.indicatorDirection;
this.indicator.init(this.node);
this.indicatorShape=null;
}};
mxLabel.prototype.reconfigure=function(){mxShape.prototype.reconfigure.apply(this);
if(this.indicator!=null){this.indicator.fill=this.indicatorColor;
this.indicator.stroke=this.indicatorColor;
this.indicator.gradient=this.indicatorGradientColor;
this.indicator.direction=this.indicatorDirection;
this.indicator.reconfigure();
}};
mxLabel.prototype.createHtml=function(){var a="DIV";
var b=document.createElement(a);
this.configureHtmlShape(b);
if(this.indicatorImage!=null){this.indicatorImageNode=mxUtils.createImage(this.indicatorImage);
this.indicatorImageNode.style.position="absolute";
b.appendChild(this.indicatorImageNode);
}if(this.image!=null){this.imageNode=mxUtils.createImage(this.image);
this.stroke=null;
this.configureHtmlShape(this.imageNode);
mxUtils.setOpacity(this.imageNode,"100");
b.appendChild(this.imageNode);
}return b;
};
mxLabel.prototype.createVml=function(){var b=document.createElement("v:group");
var a=(this.isRounded)?"v:roundrect":"v:rect";
this.rectNode=document.createElement(a);
this.configureVmlShape(this.rectNode);
this.isShadow=false;
this.configureVmlShape(b);
b.coordorigin="0,0";
b.appendChild(this.rectNode);
if(this.indicatorImage!=null){this.indicatorImageNode=this.createVmlImage(this.indicatorImage,(this.opaqueVmlImages)?null:this.opacity);
b.appendChild(this.indicatorImageNode);
}if(this.image!=null){this.imageNode=this.createVmlImage(this.image,(this.opaqueVmlImages)?null:this.opacity);
b.appendChild(this.imageNode);
}this.label=document.createElement("v:rect");
this.label.style.top="0px";
this.label.style.left="0px";
this.label.filled="false";
this.label.stroked="false";
b.appendChild(this.label);
return b;
};
mxLabel.prototype.createVmlImage=function(c,b){var a=null;
if(c.substring(0,5)=="data:"||b!=null){a=document.createElement("img");
mxUtils.setOpacity(a,b);
a.setAttribute("border","0");
a.style.position="absolute";
a.setAttribute("src",c);
}else{a=document.createElement("v:image");
a.src=c;
}return a;
};
mxLabel.prototype.createSvg=function(){var a=this.createSvgGroup("rect");
if(this.indicatorImage!=null){this.indicatorImageNode=document.createElementNS(mxConstants.NS_SVG,"image");
this.indicatorImageNode.setAttributeNS(mxConstants.NS_XLINK,"href",this.indicatorImage);
a.appendChild(this.indicatorImageNode);
if(this.opacity!=null){this.indicatorImageNode.setAttribute("opacity",this.opacity/100);
}}if(this.image!=null){this.imageNode=document.createElementNS(mxConstants.NS_SVG,"image");
this.imageNode.setAttributeNS(mxConstants.NS_XLINK,"href",this.image);
if(this.opacity!=null){this.imageNode.setAttribute("opacity",this.opacity/100);
}this.imageNode.setAttribute("style","pointer-events:none");
this.configureSvgShape(this.imageNode);
a.appendChild(this.imageNode);
}return a;
};
mxLabel.prototype.redraw=function(){this.updateBoundingBox();
var c=(this.dialect==mxConstants.DIALECT_SVG);
var n=mxUtils.isVml(this.node);
if(c){this.updateSvgShape(this.innerNode);
if(this.shadowNode!=null){this.updateSvgShape(this.shadowNode);
}this.updateSvgGlassPane();
}else{if(n){this.updateVmlShape(this.node);
this.updateVmlShape(this.rectNode);
this.label.style.width=this.node.style.width;
this.label.style.height=this.node.style.height;
this.updateVmlGlassPane();
}else{this.updateHtmlShape(this.node);
}}var g=0;
var e=0;
if(this.imageNode!=null){g=(this.style[mxConstants.STYLE_IMAGE_WIDTH]||this.imageSize)*this.scale;
e=(this.style[mxConstants.STYLE_IMAGE_HEIGHT]||this.imageSize)*this.scale;
}var i=0;
var d=0;
var b=0;
if(this.indicator!=null||this.indicatorImageNode!=null){i=(this.style[mxConstants.STYLE_INDICATOR_SPACING]||this.indicatorSpacing)*this.scale;
d=(this.style[mxConstants.STYLE_INDICATOR_WIDTH]||this.indicatorSize)*this.scale;
b=(this.style[mxConstants.STYLE_INDICATOR_HEIGHT]||this.indicatorSize)*this.scale;
}var f=this.style[mxConstants.STYLE_IMAGE_ALIGN];
var l=this.style[mxConstants.STYLE_IMAGE_VERTICAL_ALIGN];
var o=this.spacing*this.scale+5;
var a=Math.max(g,d);
var m=e+i+b;
var k=(c)?this.bounds.x:0;
if(f==mxConstants.ALIGN_RIGHT){k+=this.bounds.width-a-o;
}else{if(f==mxConstants.ALIGN_CENTER){k+=(this.bounds.width-a)/2;
}else{k+=o;
}}var h=(c)?this.bounds.y:0;
if(l==mxConstants.ALIGN_BOTTOM){h+=this.bounds.height-m-o;
}else{if(l==mxConstants.ALIGN_TOP){h+=o;
}else{h+=(this.bounds.height-m)/2;
}}if(this.imageNode!=null){if(c){this.imageNode.setAttribute("x",(k+(a-g)/2)+"px");
this.imageNode.setAttribute("y",h+"px");
this.imageNode.setAttribute("width",g+"px");
this.imageNode.setAttribute("height",e+"px");
}else{this.imageNode.style.left=(k+a-g)+"px";
this.imageNode.style.top=h+"px";
this.imageNode.style.width=g+"px";
this.imageNode.style.height=e+"px";
this.imageNode.stroked="false";
}}if(this.indicator!=null){this.indicator.bounds=new mxRectangle(k+(a-d)/2,h+e+i,d,b);
this.indicator.redraw();
}else{if(this.indicatorImageNode!=null){if(c){this.indicatorImageNode.setAttribute("x",(k+(a-d)/2)+"px");
this.indicatorImageNode.setAttribute("y",(h+e+i)+"px");
this.indicatorImageNode.setAttribute("width",d+"px");
this.indicatorImageNode.setAttribute("height",b+"px");
}else{this.indicatorImageNode.style.left=(k+(a-d)/2)+"px";
this.indicatorImageNode.style.top=(h+e+i)+"px";
this.indicatorImageNode.style.width=d+"px";
this.indicatorImageNode.style.height=b+"px";
}}}};
function mxCylinder(b,d,c,a){this.bounds=b;
this.fill=d;
this.stroke=c;
this.strokewidth=(a!=null)?a:1;
}mxCylinder.prototype=new mxShape();
mxCylinder.prototype.constructor=mxCylinder;
mxCylinder.prototype.vmlNodes=mxCylinder.prototype.vmlNodes.concat(["background","foreground"]);
mxCylinder.prototype.mixedModeHtml=false;
mxCylinder.prototype.preferModeHtml=false;
mxCylinder.prototype.addPipe=false;
mxCylinder.prototype.strokedBackground=true;
mxCylinder.prototype.maxHeight=40;
mxCylinder.prototype.vmlScale=2;
mxCylinder.prototype.create=function(a){if(this.stroke==null){this.stroke=this.fill;
}return mxShape.prototype.create.apply(this,arguments);
};
mxCylinder.prototype.reconfigure=function(){if(this.dialect==mxConstants.DIALECT_SVG){this.configureSvgShape(this.foreground);
this.foreground.setAttribute("fill","none");
}else{if(mxUtils.isVml(this.node)){this.configureVmlShape(this.background);
this.configureVmlShape(this.foreground);
}}mxShape.prototype.reconfigure.apply(this);
};
mxCylinder.prototype.createVml=function(){var a=document.createElement("v:group");
this.background=document.createElement("v:shape");
this.label=this.background;
this.configureVmlShape(this.background);
a.appendChild(this.background);
this.fill=null;
this.isShadow=false;
this.configureVmlShape(a);
this.foreground=document.createElement("v:shape");
this.configureVmlShape(this.foreground);
this.fgStrokeNode=document.createElement("v:stroke");
this.fgStrokeNode.joinstyle="miter";
this.fgStrokeNode.miterlimit=4;
this.foreground.appendChild(this.fgStrokeNode);
a.appendChild(this.foreground);
return a;
};
mxCylinder.prototype.redrawVml=function(){this.updateVmlShape(this.node);
this.updateVmlShape(this.background);
this.updateVmlShape(this.foreground);
this.background.path=this.createPath(false);
this.foreground.path=this.createPath(true);
this.fgStrokeNode.dashstyle=this.strokeNode.dashstyle;
};
mxCylinder.prototype.createSvg=function(){var a=this.createSvgGroup("path");
this.foreground=document.createElementNS(mxConstants.NS_SVG,"path");
if(this.stroke!=null&&this.stroke!=mxConstants.NONE){this.foreground.setAttribute("stroke",this.stroke);
}else{this.foreground.setAttribute("stroke","none");
}this.foreground.setAttribute("fill","none");
a.appendChild(this.foreground);
if(this.addPipe){this.pipe=this.createSvgPipe();
a.appendChild(this.pipe);
}return a;
};
mxCylinder.prototype.redrawSvg=function(){var c=Math.round(Math.max(1,this.strokewidth*this.scale));
this.innerNode.setAttribute("stroke-width",c);
if(this.crisp&&(this.rotation==null||this.rotation==0)){this.innerNode.setAttribute("shape-rendering","crispEdges");
this.foreground.setAttribute("shape-rendering","crispEdges");
}else{this.innerNode.removeAttribute("shape-rendering");
this.foreground.removeAttribute("shape-rendering");
}var b=this.createPath(false);
if(b.length>0){this.innerNode.setAttribute("d",b);
if(this.pipe!=null){this.pipe.setAttribute("d",b);
this.pipe.setAttribute("stroke-width",c+mxShape.prototype.SVG_STROKE_TOLERANCE);
this.pipe.setAttribute("transform",(this.innerNode.getAttribute("transform")||""));
}}else{this.innerNode.removeAttribute("d");
if(this.pipe!=null){this.pipe.removeAttribute("d");
}}if(!this.strokedBackground){this.innerNode.setAttribute("stroke","none");
}if(this.shadowNode!=null){this.shadowNode.setAttribute("stroke-width",c);
this.shadowNode.setAttribute("d",b);
this.shadowNode.setAttribute("transform",this.getSvgShadowTransform());
}b=this.createPath(true);
if(b.length>0){this.foreground.setAttribute("stroke-width",c);
this.foreground.setAttribute("d",b);
}else{this.foreground.removeAttribute("d");
}if(this.isDashed){var a=Math.max(1,Math.round(3*this.scale*this.strokewidth));
this.innerNode.setAttribute("stroke-dasharray",a+" "+a);
this.foreground.setAttribute("stroke-dasharray",a+" "+a);
}};
mxCylinder.prototype.redrawPath=function(f,a,g,c,e,d){var b=Math.min(this.maxHeight,Math.round(e/5));
if(d){f.moveTo(0,b);
f.curveTo(0,2*b,c,2*b,c,b);
}else{f.moveTo(0,b);
f.curveTo(0,-b/3,c,-b/3,c,b);
f.lineTo(c,e-b);
f.curveTo(c,e+b/3,0,e+b/3,0,e-b);
f.close();
}};
function mxConnector(b,c,a){this.points=b;
this.stroke=c;
this.strokewidth=(a!=null)?a:1;
}mxConnector.prototype=new mxShape();
mxConnector.prototype.constructor=mxConnector;
mxConnector.prototype.vmlNodes=mxConnector.prototype.vmlNodes.concat(["shapeNode","start","end","startStroke","endStroke","startFill","endFill"]);
mxConnector.prototype.mixedModeHtml=false;
mxConnector.prototype.preferModeHtml=false;
mxConnector.prototype.allowCrispMarkers=false;
mxConnector.prototype.addPipe=true;
mxConnector.prototype.configureHtmlShape=function(a){mxShape.prototype.configureHtmlShape.apply(this,arguments);
a.style.borderStyle="";
a.style.background="";
};
mxConnector.prototype.createVml=function(){var a=document.createElement("v:group");
a.style.position="absolute";
this.shapeNode=document.createElement("v:shape");
this.updateVmlStrokeColor(this.shapeNode);
this.updateVmlStrokeNode(this.shapeNode);
a.appendChild(this.shapeNode);
this.shapeNode.filled="false";
if(this.isShadow){this.createVmlShadow(this.shapeNode);
}if(this.startArrow!=null){this.start=document.createElement("v:shape");
this.start.style.position="absolute";
this.startStroke=document.createElement("v:stroke");
this.startStroke.joinstyle="miter";
this.start.appendChild(this.startStroke);
this.startFill=document.createElement("v:fill");
this.start.appendChild(this.startFill);
a.appendChild(this.start);
}if(this.endArrow!=null){this.end=document.createElement("v:shape");
this.end.style.position="absolute";
this.endStroke=document.createElement("v:stroke");
this.endStroke.joinstyle="miter";
this.end.appendChild(this.endStroke);
this.endFill=document.createElement("v:fill");
this.end.appendChild(this.endFill);
a.appendChild(this.end);
}this.updateVmlMarkerOpacity();
return a;
};
mxConnector.prototype.updateVmlMarkerOpacity=function(){var a=(this.opacity!=null)?(this.opacity+"%"):"100%";
if(this.start!=null){this.startFill.opacity=a;
this.startStroke.opacity=a;
}if(this.end!=null){this.endFill.opacity=a;
this.endStroke.opacity=a;
}};
mxConnector.prototype.reconfigure=function(){this.fill=null;
if(mxUtils.isVml(this.node)){this.node.style.visibility="hidden";
this.configureVmlShape(this.shapeNode);
this.updateVmlMarkerOpacity();
this.node.style.visibility="visible";
}else{mxShape.prototype.reconfigure.apply(this,arguments);
}};
mxConnector.prototype.redrawVml=function(){if(this.node!=null&&this.points!=null&&this.bounds!=null&&!isNaN(this.bounds.x)&&!isNaN(this.bounds.y)&&!isNaN(this.bounds.width)&&!isNaN(this.bounds.height)){var b=Math.max(0,Math.round(this.bounds.width));
var f=Math.max(0,Math.round(this.bounds.height));
var e=b+","+f;
b+="px";
f+="px";
if(this.start!=null){this.start.style.width=b;
this.start.style.height=f;
this.start.coordsize=e;
var i=this.points[1];
var a=this.points[0];
var d=mxUtils.getNumber(this.style,mxConstants.STYLE_STARTSIZE,mxConstants.DEFAULT_MARKERSIZE);
this.startOffset=this.redrawMarker(this.start,this.startArrow,i,a,this.stroke,d);
}if(this.end!=null){this.end.style.width=b;
this.end.style.height=f;
this.end.coordsize=e;
var g=this.points.length;
var i=this.points[g-2];
var a=this.points[g-1];
var d=mxUtils.getNumber(this.style,mxConstants.STYLE_ENDSIZE,mxConstants.DEFAULT_MARKERSIZE);
this.endOffset=this.redrawMarker(this.end,this.endArrow,i,a,this.stroke,d);
}this.updateVmlShape(this.node);
this.updateVmlShape(this.shapeNode);
this.shapeNode.filled="false";
if(this.isDashed){var c=mxUtils.getValue(this.style,"dashStyle",null);
if(c!=null){this.strokeNode.dashstyle=c;
}if(this.shadowStrokeNode!=null){this.shadowStrokeNode.dashstyle=this.strokeNode.dashstyle;
}}}};
mxConnector.prototype.createSvg=function(){this.fill=null;
var a=this.createSvgGroup("path");
if(this.startArrow!=null){this.start=document.createElementNS(mxConstants.NS_SVG,"path");
a.appendChild(this.start);
}if(this.endArrow!=null){this.end=document.createElementNS(mxConstants.NS_SVG,"path");
a.appendChild(this.end);
}if(this.addPipe){this.pipe=this.createSvgPipe();
a.appendChild(this.pipe);
}return a;
};
mxConnector.prototype.redrawSvg=function(){if(this.points!=null&&this.points[0]!=null){var b=this.innerNode.getAttribute("stroke");
if(this.start!=null){var i=this.points[1];
var a=this.points[0];
var e=mxUtils.getNumber(this.style,mxConstants.STYLE_STARTSIZE,mxConstants.DEFAULT_MARKERSIZE);
this.startOffset=this.redrawMarker(this.start,this.startArrow,i,a,b,e);
if(this.allowCrispMarkers&&this.crisp){this.start.setAttribute("shape-rendering","crispEdges");
}else{this.start.removeAttribute("shape-rendering");
}}if(this.end!=null){var h=this.points.length;
var i=this.points[h-2];
var a=this.points[h-1];
var e=mxUtils.getNumber(this.style,mxConstants.STYLE_ENDSIZE,mxConstants.DEFAULT_MARKERSIZE);
this.endOffset=this.redrawMarker(this.end,this.endArrow,i,a,b,e);
if(this.allowCrispMarkers&&this.crisp){this.end.setAttribute("shape-rendering","crispEdges");
}else{this.end.removeAttribute("shape-rendering");
}}}this.updateSvgShape(this.innerNode);
var f=this.innerNode.getAttribute("d");
if(f!=null){var g=Math.round(this.strokewidth*this.scale);
if(this.pipe!=null){this.pipe.setAttribute("d",this.innerNode.getAttribute("d"));
this.pipe.setAttribute("stroke-width",g+mxShape.prototype.SVG_STROKE_TOLERANCE);
}if(this.shadowNode!=null){this.shadowNode.setAttribute("transform",this.getSvgShadowTransform());
this.shadowNode.setAttribute("d",f);
this.shadowNode.setAttribute("stroke-width",g);
}}if(this.isDashed){var c=this.createDashPattern(this.scale*this.strokewidth);
if(c!=null){this.innerNode.setAttribute("stroke-dasharray",c);
}}if(this.shadowNode!=null){var c=this.innerNode.getAttribute("stroke-dasharray");
if(c!=null){this.shadowNode.setAttribute("stroke-dasharray",c);
}}};
mxConnector.prototype.createDashPattern=function(d){var e=mxUtils.getValue(this.style,"dashPattern",null);
if(e!=null){var c=e.split(" ");
var a=[];
for(var b=0;
b<c.length;
b++){if(c[b].length>0){a.push(Math.round(Number(c[b])*d));
}}return a.join(" ");
}return null;
};
mxConnector.prototype.redrawMarker=function(e,d,f,a,b,c){return mxMarker.paintMarker(e,d,f,a,b,this.strokewidth,c,this.scale,this.bounds.x,this.bounds.y,this.start==e,this.style);
};
function mxSwimlane(b,d,c,a){this.bounds=b;
this.fill=d;
this.stroke=c;
this.strokewidth=(a!=null)?a:1;
}mxSwimlane.prototype=new mxShape();
mxSwimlane.prototype.constructor=mxSwimlane;
mxSwimlane.prototype.vmlNodes=mxSwimlane.prototype.vmlNodes.concat(["label","content","imageNode","separator"]);
mxSwimlane.prototype.imageSize=16;
mxSwimlane.prototype.mixedModeHtml=false;
mxRhombus.prototype.preferModeHtml=false;
mxSwimlane.prototype.createHtml=function(){var b=document.createElement("DIV");
this.configureHtmlShape(b);
b.style.background="";
b.style.backgroundColor="";
b.style.borderStyle="none";
this.label=document.createElement("DIV");
this.configureHtmlShape(this.label);
b.appendChild(this.label);
this.content=document.createElement("DIV");
this.configureHtmlShape(this.content);
this.content.style.backgroundColor="";
if(mxUtils.getValue(this.style,mxConstants.STYLE_HORIZONTAL,true)){this.content.style.borderTopStyle="none";
}else{this.content.style.borderLeftStyle="none";
}this.content.style.cursor="default";
b.appendChild(this.content);
var a=this.style[mxConstants.STYLE_SEPARATORCOLOR];
if(a!=null){this.separator=document.createElement("DIV");
this.separator.style.borderColor=a;
this.separator.style.borderLeftStyle="dashed";
b.appendChild(this.separator);
}if(this.image!=null){this.imageNode=mxUtils.createImage(this.image);
this.configureHtmlShape(this.imageNode);
this.imageNode.style.borderStyle="none";
b.appendChild(this.imageNode);
}return b;
};
mxSwimlane.prototype.reconfigure=function(a){mxShape.prototype.reconfigure.apply(this,arguments);
if(this.dialect==mxConstants.DIALECT_SVG){if(this.shadowNode!=null){this.updateSvgShape(this.shadowNode);
if(mxUtils.getValue(this.style,mxConstants.STYLE_HORIZONTAL,true)){this.shadowNode.setAttribute("height",this.startSize*this.scale);
}else{this.shadowNode.setAttribute("width",this.startSize*this.scale);
}}}else{if(!mxUtils.isVml(this.node)){this.node.style.background="";
this.node.style.backgroundColor="";
}}};
mxSwimlane.prototype.redrawHtml=function(){this.updateHtmlShape(this.node);
this.node.style.background="";
this.node.style.backgroundColor="";
this.startSize=parseInt(mxUtils.getValue(this.style,mxConstants.STYLE_STARTSIZE,mxConstants.DEFAULT_STARTSIZE));
this.updateHtmlShape(this.label);
this.label.style.top="0px";
this.label.style.left="0px";
if(mxUtils.getValue(this.style,mxConstants.STYLE_HORIZONTAL,true)){this.startSize=Math.min(this.startSize,this.bounds.height);
this.label.style.height=(this.startSize*this.scale)+"px";
this.updateHtmlShape(this.content);
this.content.style.background="";
this.content.style.backgroundColor="";
var b=this.startSize*this.scale;
this.content.style.top=b+"px";
this.content.style.left="0px";
this.content.style.height=Math.max(1,this.bounds.height-b)+"px";
if(this.separator!=null){this.separator.style.left=Math.round(this.bounds.width)+"px";
this.separator.style.top=Math.round(this.startSize*this.scale)+"px";
this.separator.style.width="1px";
this.separator.style.height=Math.round(this.bounds.height)+"px";
this.separator.style.borderWidth=Math.round(this.scale)+"px";
}if(this.imageNode!=null){this.imageNode.style.left=(this.bounds.width-this.imageSize-4)+"px";
this.imageNode.style.top="0px";
this.imageNode.style.width=Math.round(this.imageSize*this.scale)+"px";
this.imageNode.style.height=Math.round(this.imageSize*this.scale)+"px";
}}else{this.startSize=Math.min(this.startSize,this.bounds.width);
this.label.style.width=(this.startSize*this.scale)+"px";
this.updateHtmlShape(this.content);
this.content.style.background="";
this.content.style.backgroundColor="";
var a=this.startSize*this.scale;
this.content.style.top="0px";
this.content.style.left=a+"px";
this.content.style.width=Math.max(0,this.bounds.width-a)+"px";
if(this.separator!=null){this.separator.style.left=Math.round(this.startSize*this.scale)+"px";
this.separator.style.top=Math.round(this.bounds.height)+"px";
this.separator.style.width=Math.round(this.bounds.width)+"px";
this.separator.style.height="1px";
}if(this.imageNode!=null){this.imageNode.style.left=(this.bounds.width-this.imageSize-4)+"px";
this.imageNode.style.top="0px";
this.imageNode.style.width=this.imageSize*this.scale+"px";
this.imageNode.style.height=this.imageSize*this.scale+"px";
}}};
mxSwimlane.prototype.createVml=function(){var d=document.createElement("v:group");
var b=(this.isRounded)?"v:roundrect":"v:rect";
this.label=document.createElement(b);
this.configureVmlShape(this.label);
if(this.isRounded){this.label.setAttribute("arcsize","20%");
}this.isShadow=false;
this.configureVmlShape(d);
d.coordorigin="0,0";
d.appendChild(this.label);
this.content=document.createElement(b);
var c=this.fill;
this.fill=null;
this.configureVmlShape(this.content);
d.style.background="";
if(this.isRounded){this.content.setAttribute("arcsize","4%");
}this.fill=c;
this.content.style.borderBottom="0px";
d.appendChild(this.content);
var a=this.style[mxConstants.STYLE_SEPARATORCOLOR];
if(a!=null){this.separator=document.createElement("v:shape");
this.separator.style.position="absolute";
this.separator.strokecolor=a;
var e=document.createElement("v:stroke");
e.dashstyle="2 2";
this.separator.appendChild(e);
d.appendChild(this.separator);
}if(this.image!=null){this.imageNode=document.createElement("v:image");
this.imageNode.src=this.image;
this.configureVmlShape(this.imageNode);
this.imageNode.stroked="false";
d.appendChild(this.imageNode);
}return d;
};
mxSwimlane.prototype.redrawVml=function(){var a=Math.round(this.bounds.x);
var i=Math.round(this.bounds.y);
var b=Math.round(this.bounds.width);
var e=Math.round(this.bounds.height);
this.updateVmlShape(this.node);
this.node.coordsize=b+","+e;
this.updateVmlShape(this.label);
this.label.style.top="0px";
this.label.style.left="0px";
this.label.style.rotation=null;
this.startSize=parseInt(mxUtils.getValue(this.style,mxConstants.STYLE_STARTSIZE,mxConstants.DEFAULT_STARTSIZE));
var g=Math.round(this.startSize*this.scale);
if(this.separator!=null){this.separator.coordsize=b+","+e;
this.separator.style.left=a+"px";
this.separator.style.top=i+"px";
this.separator.style.width=b+"px";
this.separator.style.height=e+"px";
}if(mxUtils.getValue(this.style,mxConstants.STYLE_HORIZONTAL,true)){g=Math.min(g,this.bounds.height);
this.label.style.height=g+"px";
this.updateVmlShape(this.content);
this.content.style.background="";
this.content.style.top=g+"px";
this.content.style.left="0px";
this.content.style.height=Math.max(0,e-g)+"px";
if(this.separator!=null){var f="m "+(b-a)+" "+(g-i)+" l "+(b-a)+" "+(e-i)+" e";
this.separator.path=f;
}if(this.imageNode!=null){var c=Math.round(this.imageSize*this.scale);
this.imageNode.style.left=(b-c-4)+"px";
this.imageNode.style.top="0px";
this.imageNode.style.width=c+"px";
this.imageNode.style.height=c+"px";
}}else{g=Math.min(g,this.bounds.width);
this.label.style.width=g+"px";
this.updateVmlShape(this.content);
this.content.style.background="";
this.content.style.top="0px";
this.content.style.left=g+"px";
this.content.style.width=Math.max(0,b-g)+"px";
if(this.separator!=null){var f="m "+(g-a)+" "+(e-i)+" l "+(b-a)+" "+(e-i)+" e";
this.separator.path=f;
}if(this.imageNode!=null){var c=Math.round(this.imageSize*this.scale);
this.imageNode.style.left=(b-c-4)+"px";
this.imageNode.style.top="0px";
this.imageNode.style.width=c+"px";
this.imageNode.style.height=c+"px";
}}this.content.style.rotation=null;
};
mxSwimlane.prototype.createSvg=function(){var b=this.createSvgGroup("rect");
if(this.isRounded){this.innerNode.setAttribute("rx",10);
this.innerNode.setAttribute("ry",10);
}this.content=document.createElementNS(mxConstants.NS_SVG,"path");
this.configureSvgShape(this.content);
this.content.setAttribute("fill","none");
if(this.isRounded){this.content.setAttribute("rx",10);
this.content.setAttribute("ry",10);
}b.appendChild(this.content);
var a=this.style[mxConstants.STYLE_SEPARATORCOLOR];
if(a!=null){this.separator=document.createElementNS(mxConstants.NS_SVG,"line");
this.separator.setAttribute("stroke",a);
this.separator.setAttribute("fill","none");
this.separator.setAttribute("stroke-dasharray","2, 2");
b.appendChild(this.separator);
}if(this.image!=null){this.imageNode=document.createElementNS(mxConstants.NS_SVG,"image");
this.imageNode.setAttributeNS(mxConstants.NS_XLINK,"href",this.image);
this.configureSvgShape(this.imageNode);
b.appendChild(this.imageNode);
}return b;
};
mxSwimlane.prototype.redrawSvg=function(){var b=this.isRounded;
this.isRounded=false;
this.updateSvgShape(this.innerNode);
this.updateSvgShape(this.content);
var a=mxUtils.getValue(this.style,mxConstants.STYLE_HORIZONTAL,true);
this.startSize=parseInt(mxUtils.getValue(this.style,mxConstants.STYLE_STARTSIZE,mxConstants.DEFAULT_STARTSIZE));
var k=this.startSize*this.scale;
if(this.shadowNode!=null){this.updateSvgShape(this.shadowNode);
if(a){this.shadowNode.setAttribute("height",k);
}else{this.shadowNode.setAttribute("width",k);
}}this.isRounded=b;
this.content.removeAttribute("x");
this.content.removeAttribute("y");
this.content.removeAttribute("width");
this.content.removeAttribute("height");
var d=(this.crisp&&mxClient.IS_IE)?0.5:0;
var f=Math.round(this.bounds.x)+d;
var e=Math.round(this.bounds.y)+d;
var g=Math.round(this.bounds.width);
var c=Math.round(this.bounds.height);
if(a){k=Math.min(k,c);
this.innerNode.setAttribute("height",k);
var i="M "+f+" "+(e+k)+" l 0 "+(c-k)+" l "+g+" 0 l 0 "+(k-c);
this.content.setAttribute("d",i);
if(this.separator!=null){this.separator.setAttribute("x1",f+g);
this.separator.setAttribute("y1",e+k);
this.separator.setAttribute("x2",f+g);
this.separator.setAttribute("y2",e+c);
}if(this.imageNode!=null){this.imageNode.setAttribute("x",f+g-this.imageSize-4);
this.imageNode.setAttribute("y",e);
this.imageNode.setAttribute("width",this.imageSize*this.scale+"px");
this.imageNode.setAttribute("height",this.imageSize*this.scale+"px");
}}else{k=Math.min(k,g);
this.innerNode.setAttribute("width",k);
var i="M "+(f+k)+" "+e+" l "+(g-k)+" 0 l 0 "+c+" l "+(k-g)+" 0";
this.content.setAttribute("d",i);
if(this.separator!=null){this.separator.setAttribute("x1",f+k);
this.separator.setAttribute("y1",e+c);
this.separator.setAttribute("x2",f+g);
this.separator.setAttribute("y2",e+c);
}if(this.imageNode!=null){this.imageNode.setAttribute("x",f+g-this.imageSize-4);
this.imageNode.setAttribute("y",e);
this.imageNode.setAttribute("width",this.imageSize*this.scale+"px");
this.imageNode.setAttribute("height",this.imageSize*this.scale+"px");
}}};
function mxGraphLayout(a){this.graph=a;
}mxGraphLayout.prototype.graph=null;
mxGraphLayout.prototype.useBoundingBox=true;
mxGraphLayout.prototype.parent=null;
mxGraphLayout.prototype.moveCell=function(b,a,c){};
mxGraphLayout.prototype.execute=function(a){};
mxGraphLayout.prototype.getGraph=function(){return this.graph;
};
mxGraphLayout.prototype.getConstraint=function(b,a,d,f){var e=this.graph.view.getState(a);
var c=(e!=null)?e.style:this.graph.getCellStyle(a);
return(c!=null)?c[b]:null;
};
mxGraphLayout.traverse=function(k,d,f,c,n){if(f!=null&&k!=null){d=(d!=null)?d:true;
n=n||[];
var b=mxCellPath.create(k);
if(n[b]==null){n[b]=k;
var o=f(k,c);
if(o==null||o){var a=this.graph.model.getEdgeCount(k);
if(a>0){for(var g=0;
g<a;
g++){var l=this.graph.model.getEdgeAt(k,g);
var m=this.graph.model.getTerminal(l,true)==k;
if(!d||m){var h=this.graph.view.getVisibleTerminal(l,!m);
this.traverse(h,d,f,l,n);
}}}}}}};
mxGraphLayout.prototype.isVertexMovable=function(a){return this.graph.isCellMovable(a);
};
mxGraphLayout.prototype.isVertexIgnored=function(a){return !this.graph.getModel().isVertex(a)||!this.graph.isCellVisible(a);
};
mxGraphLayout.prototype.isEdgeIgnored=function(b){var a=this.graph.getModel();
return !a.isEdge(b)||!this.graph.isCellVisible(b)||a.getTerminal(b,true)==null||a.getTerminal(b,false)==null;
};
mxGraphLayout.prototype.setEdgeStyleEnabled=function(a,b){this.graph.setCellStyles(mxConstants.STYLE_NOEDGESTYLE,(b)?"0":"1",[a]);
};
mxGraphLayout.prototype.setOrthogonalEdge=function(a,b){this.graph.setCellStyles(mxConstants.STYLE_ORTHOGONAL,(b)?"1":"0",[a]);
};
mxGraphLayout.prototype.getParentOffset=function(c){var a=new mxPoint();
if(c!=null&&c!=this.parent){var b=this.graph.getModel();
if(b.isAncestor(this.parent,c)){var d=b.getGeometry(c);
while(c!=this.parent){a.x=a.x+d.x;
a.y=a.y+d.y;
c=b.getParent(c);
d=b.getGeometry(c);
}}}return a;
};
mxGraphLayout.prototype.setEdgePoints=function(f,e){if(f!=null){var b=this.graph.model;
var g=b.getGeometry(f);
if(g==null){g=new mxGeometry();
g.setRelative(true);
}else{g=g.clone();
}if(this.parent!=null&&e!=null){var d=b.getParent(f);
var a=this.getParentOffset(d);
for(var c=0;
c<e.length;
c++){e[c].x=e[c].x-a.x;
e[c].y=e[c].y-a.y;
}}g.points=e;
b.setGeometry(f,g);
}};
mxGraphLayout.prototype.setVertexLocation=function(k,h,f){var e=this.graph.getModel();
var g=e.getGeometry(k);
var l=null;
if(g!=null){l=new mxRectangle(h,f,g.width,g.height);
if(this.useBoundingBox){var b=this.graph.getView().getState(k);
if(b!=null&&b.text!=null&&b.text.boundingBox!=null){var c=this.graph.getView().scale;
var d=b.text.boundingBox;
if(b.text.boundingBox.x<b.x){h+=(b.x-d.x)/c;
l.width=d.width;
}if(b.text.boundingBox.y<b.y){f+=(b.y-d.y)/c;
l.height=d.height;
}}}if(this.parent!=null){var i=e.getParent(k);
if(i!=null&&i!=this.parent){var a=this.getParentOffset(i);
h=h-a.x;
f=f-a.y;
}}if(g.x!=h||g.y!=f){g=g.clone();
g.x=h;
g.y=f;
e.setGeometry(k,g);
}}return l;
};
mxGraphLayout.prototype.getVertexBounds=function(k){var d=this.graph.getModel().getGeometry(k);
if(this.useBoundingBox){var b=this.graph.getView().getState(k);
if(b!=null&&b.text!=null&&b.text.boundingBox!=null){var c=this.graph.getView().scale;
var e=b.text.boundingBox;
var l=Math.max(b.x-e.x,0)/c;
var g=Math.max(b.y-e.y,0)/c;
var i=Math.max((e.x+e.width)-(b.x+b.width),0)/c;
var f=Math.max((e.y+e.height)-(b.y+b.height),0)/c;
d=new mxRectangle(d.x-l,d.y-g,d.width+l+i,d.height+g+f);
}}if(this.parent!=null){var h=this.graph.getModel().getParent(k);
d=d.clone();
if(h!=null&&h!=this.parent){var a=this.getParentOffset(h);
d.x=d.x+a.x;
d.y=d.y+a.y;
}}return new mxRectangle(d.x,d.y,d.width,d.height);
};
mxGraphLayout.prototype.arrangeGroups=function(c,e){this.graph.getModel().beginUpdate();
try{for(var f=c.length-1;
f>=0;
f--){var k=c[f];
var b=this.graph.getChildVertices(k);
var a=this.graph.getBoundingBoxFromGeometry(b);
var h=this.graph.getCellGeometry(k);
var d=0;
var g=0;
if(this.graph.isSwimlane(k)){var l=this.graph.getStartSize(k);
d=l.width;
g=l.height;
}if(a!=null&&h!=null){h=h.clone();
h.x=h.x+a.x-e-d;
h.y=h.y+a.y-e-g;
h.width=a.width+2*e+d;
h.height=a.height+2*e+g;
this.graph.getModel().setGeometry(k,h);
this.graph.moveCells(b,e+d-a.x,e+g-a.y);
}}}finally{this.graph.getModel().endUpdate();
}};
function mxStackLayout(e,a,f,c,d,b){mxGraphLayout.call(this,e);
this.horizontal=(a!=null)?a:true;
this.spacing=(f!=null)?f:0;
this.x0=(c!=null)?c:0;
this.y0=(d!=null)?d:0;
this.border=(b!=null)?b:0;
}mxStackLayout.prototype=new mxGraphLayout();
mxStackLayout.prototype.constructor=mxStackLayout;
mxStackLayout.prototype.horizontal=null;
mxStackLayout.prototype.spacing=null;
mxStackLayout.prototype.x0=null;
mxStackLayout.prototype.y0=null;
mxStackLayout.prototype.border=0;
mxStackLayout.prototype.keepFirstLocation=false;
mxStackLayout.prototype.fill=false;
mxStackLayout.prototype.resizeParent=false;
mxStackLayout.prototype.resizeLast=false;
mxStackLayout.prototype.wrap=null;
mxStackLayout.prototype.isHorizontal=function(){return this.horizontal;
};
mxStackLayout.prototype.moveCell=function(q,l,k){var h=this.graph.getModel();
var o=h.getParent(q);
var b=this.isHorizontal();
if(q!=null&&o!=null){var g=0;
var p=0;
var d=h.getChildCount(o);
var n=(b)?l:k;
var f=this.graph.getView().getState(o);
if(f!=null){n-=(b)?f.x:f.y;
}for(g=0;
g<d;
g++){var c=h.getChildAt(o,g);
if(c!=q){var a=h.getGeometry(c);
if(a!=null){var e=(b)?a.x+a.width/2:a.y+a.height/2;
if(p<n&&e>n){break;
}p=e;
}}}var m=o.getIndex(q);
m=Math.max(0,g-((g>m)?1:0));
h.add(o,q,m);
}};
mxStackLayout.prototype.getParentSize=function(e){var c=this.graph.getModel();
var b=c.getGeometry(e);
if(this.graph.container!=null&&((b==null&&c.isLayer(e))||e==this.graph.getView().currentRoot)){var d=this.graph.container.offsetWidth-1;
var a=this.graph.container.offsetHeight-1;
b=new mxRectangle(0,0,d,a);
}return b;
};
mxStackLayout.prototype.execute=function(q){if(q!=null){var c=this.isHorizontal();
var n=this.graph.getModel();
var g=this.getParentSize(q);
var o=null;
if(g!=null){o=(c)?g.height:g.width;
}o-=2*this.spacing+2*this.border;
var f=this.x0+this.border;
var p=this.y0+this.border;
if(this.graph.isSwimlane(q)){var b=this.graph.getCellStyle(q);
var d=mxUtils.getNumber(b,mxConstants.STYLE_STARTSIZE,mxConstants.DEFAULT_STARTSIZE);
var a=mxUtils.getValue(b,mxConstants.STYLE_HORIZONTAL,true)==1;
if(g!=null){if(a){d=Math.min(d,g.height);
}else{d=Math.min(d,g.width);
}}if(c==a){o-=d;
}if(a){p+=d;
}else{f+=d;
}}n.beginUpdate();
try{var m=0;
var r=null;
var h=n.getChildCount(q);
for(var l=0;
l<h;
l++){var e=n.getChildAt(q,l);
if(!this.isVertexIgnored(e)&&this.isVertexMovable(e)){var k=n.getGeometry(e);
if(k!=null){k=k.clone();
if(this.wrap!=null&&r!=null){if((c&&r.x+r.width+k.width+2*this.spacing>this.wrap)||(!c&&r.y+r.height+k.height+2*this.spacing>this.wrap)){r=null;
if(c){p+=m+this.spacing;
}else{f+=m+this.spacing;
}m=0;
}}m=Math.max(m,(c)?k.height:k.width);
if(r!=null){if(c){k.x=r.x+r.width+this.spacing;
}else{k.y=r.y+r.height+this.spacing;
}}else{if(!this.keepFirstLocation){if(c){k.x=f;
}else{k.y=p;
}}}if(c){k.y=p;
}else{k.x=f;
}if(this.fill&&o!=null){if(c){k.height=o;
}else{k.width=o;
}}n.setGeometry(e,k);
r=k;
}}}if(this.resizeParent&&g!=null&&r!=null&&!this.graph.isCellCollapsed(q)){g=g.clone();
if(c){g.width=r.x+r.width+this.spacing;
}else{g.height=r.y+r.height+this.spacing;
}n.setGeometry(q,g);
}else{if(this.resizeLast&&g!=null&&r!=null){if(c){r.width=g.width-r.x-this.spacing;
}else{r.height=g.height-r.y-this.spacing;
}}}}finally{n.endUpdate();
}}};
function mxPartitionLayout(c,a,d,b){mxGraphLayout.call(this,c);
this.horizontal=(a!=null)?a:true;
this.spacing=d||0;
this.border=b||0;
}mxPartitionLayout.prototype=new mxGraphLayout();
mxPartitionLayout.prototype.constructor=mxPartitionLayout;
mxPartitionLayout.prototype.horizontal=null;
mxPartitionLayout.prototype.spacing=null;
mxPartitionLayout.prototype.border=null;
mxPartitionLayout.prototype.resizeVertices=true;
mxPartitionLayout.prototype.isHorizontal=function(){return this.horizontal;
};
mxPartitionLayout.prototype.moveCell=function(n,h,g){var f=this.graph.getModel();
var l=f.getParent(n);
if(n!=null&&l!=null){var e=0;
var m=0;
var c=f.getChildCount(l);
for(e=0;
e<c;
e++){var b=f.getChildAt(l,e);
var a=this.getVertexBounds(b);
if(a!=null){var d=a.x+a.width/2;
if(m<h&&d>h){break;
}m=d;
}}var k=l.getIndex(n);
k=Math.max(0,e-((e>k)?1:0));
f.add(l,n,k);
}};
mxPartitionLayout.prototype.execute=function(f){var s=this.isHorizontal();
var b=this.graph.getModel();
var o=b.getGeometry(f);
if(this.graph.container!=null&&((o==null&&b.isLayer(f))||f==this.graph.getView().currentRoot)){var l=this.graph.container.offsetWidth-1;
var h=this.graph.container.offsetHeight-1;
o=new mxRectangle(0,0,l,h);
}if(o!=null){var c=[];
var q=b.getChildCount(f);
for(var p=0;
p<q;
p++){var e=b.getChildAt(f,p);
if(!this.isVertexIgnored(e)&&this.isVertexMovable(e)){c.push(e);
}}var k=c.length;
if(k>0){var r=this.border;
var a=this.border;
var d=(s)?o.height:o.width;
d-=2*this.border;
var g=(this.graph.isSwimlane(f))?this.graph.getStartSize(f):new mxRectangle();
d-=(s)?g.height:g.width;
r=r+g.width;
a=a+g.height;
var t=this.border+(k-1)*this.spacing;
var m=(s)?((o.width-r-t)/k):((o.height-a-t)/k);
if(m>0){b.beginUpdate();
try{for(var p=0;
p<k;
p++){var e=c[p];
var u=b.getGeometry(e);
if(u!=null){u=u.clone();
u.x=r;
u.y=a;
if(s){if(this.resizeVertices){u.width=m;
u.height=d;
}r+=m+this.spacing;
}else{if(this.resizeVertices){u.height=m;
u.width=d;
}a+=m+this.spacing;
}b.setGeometry(e,u);
}}}finally{b.endUpdate();
}}}}};
function mxCompactTreeLayout(b,a,c){mxGraphLayout.call(this,b);
this.horizontal=(a!=null)?a:true;
this.invert=(c!=null)?c:false;
}mxCompactTreeLayout.prototype=new mxGraphLayout();
mxCompactTreeLayout.prototype.constructor=mxCompactTreeLayout;
mxCompactTreeLayout.prototype.horizontal=null;
mxCompactTreeLayout.prototype.invert=null;
mxCompactTreeLayout.prototype.resizeParent=true;
mxCompactTreeLayout.prototype.groupPadding=10;
mxCompactTreeLayout.prototype.parentsChanged=null;
mxCompactTreeLayout.prototype.moveTree=false;
mxCompactTreeLayout.prototype.levelDistance=10;
mxCompactTreeLayout.prototype.nodeDistance=20;
mxCompactTreeLayout.prototype.resetEdges=true;
mxCompactTreeLayout.prototype.prefHozEdgeSep=5;
mxCompactTreeLayout.prototype.prefVertEdgeOff=4;
mxCompactTreeLayout.prototype.minEdgeJetty=8;
mxCompactTreeLayout.prototype.channelBuffer=4;
mxCompactTreeLayout.prototype.edgeRouting=true;
mxCompactTreeLayout.prototype.isVertexIgnored=function(a){return mxGraphLayout.prototype.isVertexIgnored.apply(this,arguments)||this.graph.getConnections(a).length==0;
};
mxCompactTreeLayout.prototype.isHorizontal=function(){return this.horizontal;
};
mxCompactTreeLayout.prototype.execute=function(l,h){this.parent=l;
var e=this.graph.getModel();
if(h==null){if(this.graph.getEdges(l,e.getParent(l),this.invert,!this.invert,false).length>0){h=l;
}else{var m=this.graph.findTreeRoots(l,true,this.invert);
if(m.length>0){for(var d=0;
d<m.length;
d++){if(!this.isVertexIgnored(m[d])&&this.graph.getEdges(m[d],null,this.invert,!this.invert,false).length>0){h=m[d];
break;
}}}}}if(h!=null){if(this.resizeParent){this.parentsChanged=new Object();
}else{this.parentsChanged=null;
}e.beginUpdate();
try{var c=this.dfs(h,l);
if(c!=null){this.layout(c);
var b=this.graph.gridSize;
var k=b;
if(!this.moveTree){var f=this.getVertexBounds(h);
if(f!=null){b=f.x;
k=f.y;
}}var a=null;
if(this.isHorizontal()){a=this.horizontalLayout(c,b,k);
}else{a=this.verticalLayout(c,null,b,k);
}if(a!=null){var o=0;
var n=0;
if(a.x<0){o=Math.abs(b-a.x);
}if(a.y<0){n=Math.abs(k-a.y);
}if(o!=0||n!=0){this.moveNode(c,o,n);
}if(this.resizeParent){this.adjustParents();
}if(this.edgeRouting){this.localEdgeProcessing(c);
}}}}finally{e.endUpdate();
}}};
mxCompactTreeLayout.prototype.moveNode=function(c,b,a){c.x+=b;
c.y+=a;
this.apply(c);
var d=c.child;
while(d!=null){this.moveNode(d,b,a);
d=d.next;
}};
mxCompactTreeLayout.prototype.dfs=function(p,o,m){m=(m!=null)?m:[];
var b=mxCellPath.create(p);
var d=null;
if(p!=null&&m[b]==null&&!this.isVertexIgnored(p)){m[b]=p;
d=this.createNode(p);
var k=this.graph.getModel();
var e=null;
var f=this.graph.getEdges(p,o,this.invert,!this.invert,false,true);
var n=this.graph.getView();
for(var h=0;
h<f.length;
h++){var c=f[h];
if(!this.isEdgeIgnored(c)){if(this.resetEdges){this.setEdgePoints(c,null);
}if(this.edgeRouting){this.setEdgeStyleEnabled(c,false);
this.setEdgePoints(c,null);
}var a=n.getState(c);
var l=(a!=null)?a.getVisibleTerminal(this.invert):n.getVisibleTerminal(c,this.invert);
var g=this.dfs(l,o,m);
if(g!=null&&k.getGeometry(l)!=null){if(e==null){d.child=g;
}else{e.next=g;
}e=g;
}}}}return d;
};
mxCompactTreeLayout.prototype.layout=function(a){if(a!=null){var b=a.child;
while(b!=null){this.layout(b);
b=b.next;
}if(a.child!=null){this.attachParent(a,this.join(a));
}else{this.layoutLeaf(a);
}}};
mxCompactTreeLayout.prototype.horizontalLayout=function(f,b,e,d){f.x+=b+f.offsetX;
f.y+=e+f.offsetY;
d=this.apply(f,d);
var g=f.child;
if(g!=null){d=this.horizontalLayout(g,f.x,f.y,d);
var a=f.y+g.offsetY;
var c=g.next;
while(c!=null){d=this.horizontalLayout(c,f.x+g.offsetX,a,d);
a+=c.offsetY;
c=c.next;
}}return d;
};
mxCompactTreeLayout.prototype.verticalLayout=function(g,d,b,f,e){g.x+=b+g.offsetY;
g.y+=f+g.offsetX;
e=this.apply(g,e);
var h=g.child;
if(h!=null){e=this.verticalLayout(h,g,g.x,g.y,e);
var a=g.x+h.offsetY;
var c=h.next;
while(c!=null){e=this.verticalLayout(c,g,a,g.y+h.offsetX,e);
a+=c.offsetY;
c=c.next;
}}return e;
};
mxCompactTreeLayout.prototype.attachParent=function(e,b){var a=this.nodeDistance+this.levelDistance;
var c=(b-e.width)/2-this.nodeDistance;
var d=c+e.width+2*this.nodeDistance-b;
e.child.offsetX=a+e.height;
e.child.offsetY=d;
e.contour.upperHead=this.createLine(e.height,0,this.createLine(a,d,e.contour.upperHead));
e.contour.lowerHead=this.createLine(e.height,0,this.createLine(a,c,e.contour.lowerHead));
};
mxCompactTreeLayout.prototype.layoutLeaf=function(a){var b=2*this.nodeDistance;
a.contour.upperTail=this.createLine(a.height+b,0);
a.contour.upperHead=a.contour.upperTail;
a.contour.lowerTail=this.createLine(0,-a.width-b);
a.contour.lowerHead=this.createLine(a.height+b,0,a.contour.lowerTail);
};
mxCompactTreeLayout.prototype.join=function(c){var f=2*this.nodeDistance;
var g=c.child;
c.contour=g.contour;
var b=g.width+f;
var a=b;
g=g.next;
while(g!=null){var e=this.merge(c.contour,g.contour);
g.offsetY=e+b;
g.offsetX=0;
b=g.width+f;
a+=e+b;
g=g.next;
}return a;
};
mxCompactTreeLayout.prototype.merge=function(l,i){var h=0;
var f=0;
var g=0;
var k=l.lowerHead;
var a=i.upperHead;
while(a!=null&&k!=null){var c=this.offset(h,f,a.dx,a.dy,k.dx,k.dy);
f+=c;
g+=c;
if(h+a.dx<=k.dx){h+=a.dx;
f+=a.dy;
a=a.next;
}else{h-=k.dx;
f-=k.dy;
k=k.next;
}}if(a!=null){var e=this.bridge(l.upperTail,0,0,a,h,f);
l.upperTail=(e.next!=null)?i.upperTail:e;
l.lowerTail=i.lowerTail;
}else{var e=this.bridge(i.lowerTail,h,f,k,0,0);
if(e.next==null){l.lowerTail=e;
}}l.lowerHead=i.lowerHead;
return g;
};
mxCompactTreeLayout.prototype.offset=function(h,g,b,a,f,e){var c=0;
if(f<=h||h+b<=0){return 0;
}var i=f*a-b*e;
if(i>0){if(h<0){var k=h*a;
c=k/b-g;
}else{if(h>0){var k=h*e;
c=k/f-g;
}else{c=-g;
}}}else{if(f<h+b){var k=(f-h)*a;
c=e-(g+k/b);
}else{if(f>h+b){var k=(b+h)*e;
c=k/f-(g+a);
}else{c=e-(g+a);
}}}if(c>0){return c;
}else{return 0;
}};
mxCompactTreeLayout.prototype.bridge=function(g,c,e,f,b,d){var k=b+f.dx-c;
var h=0;
var i=0;
if(f.dx==0){h=f.dy;
}else{i=k*f.dy;
h=i/f.dx;
}var a=this.createLine(k,h,f.next);
g.next=this.createLine(0,d+f.dy-h-e,a);
return a;
};
mxCompactTreeLayout.prototype.createNode=function(a){var b=new Object();
b.cell=a;
b.x=0;
b.y=0;
b.width=0;
b.height=0;
var c=this.getVertexBounds(a);
if(c!=null){if(this.isHorizontal()){b.width=c.height;
b.height=c.width;
}else{b.width=c.width;
b.height=c.height;
}}b.offsetX=0;
b.offsetY=0;
b.contour=new Object();
return b;
};
mxCompactTreeLayout.prototype.apply=function(f,e){var b=this.graph.getModel();
var a=f.cell;
var d=b.getGeometry(a);
if(a!=null&&d!=null){if(this.isVertexMovable(a)){d=this.setVertexLocation(a,f.x,f.y);
if(this.resizeParent){var c=b.getParent(a);
var h=mxCellPath.create(c);
if(this.parentsChanged[h]==null){this.parentsChanged[h]=c;
}}}if(e==null){e=new mxRectangle(d.x,d.y,d.width,d.height);
}else{e=new mxRectangle(Math.min(e.x,d.x),Math.min(e.y,d.y),Math.max(e.x+e.width,d.x+d.width),Math.max(e.y+e.height,d.y+d.height));
}}return e;
};
mxCompactTreeLayout.prototype.createLine=function(c,b,d){var a=new Object();
a.dx=c;
a.dy=b;
a.next=d;
return a;
};
mxCompactTreeLayout.prototype.adjustParents=function(){var a=[];
for(var b in this.parentsChanged){a.push(this.parentsChanged[b]);
}this.arrangeGroups(mxUtils.sortCells(a,true),this.groupPadding);
};
mxCompactTreeLayout.prototype.localEdgeProcessing=function(a){this.processNodeOutgoing(a);
var b=a.child;
while(b!=null){this.localEdgeProcessing(b);
b=b.next;
}};
mxCompactTreeLayout.prototype.processNodeOutgoing=function(p){var h=p.child;
var t=p.cell;
var s=0;
var k=[];
while(h!=null){s++;
var g=h.x;
if(this.horizontal){g=h.y;
}k.push(new WeightedCellSorter(h,g));
h=h.next;
}k.sort(WeightedCellSorter.prototype.compare);
var b=p.width;
var e=(s+1)*this.prefHozEdgeSep;
if(b>e+(2*this.prefHozEdgeSep)){b-=2*this.prefHozEdgeSep;
}var f=b/s;
var a=f/2;
if(b>e+(2*this.prefHozEdgeSep)){a+=this.prefHozEdgeSep;
}var n=this.minEdgeJetty-this.prefVertEdgeOff;
var d=0;
var u=this.getVertexBounds(t);
h=p.child;
for(var q=0;
q<k.length;
q++){var o=k[q].cell.cell;
var w=this.getVertexBounds(o);
var c=this.graph.getEdgesBetween(t,o,false);
var v=[];
var m=0;
var l=0;
for(var r=0;
r<c.length;
r++){if(this.horizontal){m=u.x+u.width;
l=u.y+a;
v.push(new mxPoint(m,l));
m=u.x+u.width+n;
v.push(new mxPoint(m,l));
l=w.y+w.height/2;
v.push(new mxPoint(m,l));
this.setEdgePoints(c[r],v);
}else{m=u.x+a;
l=u.y+u.height;
v.push(new mxPoint(m,l));
l=u.y+u.height+n;
v.push(new mxPoint(m,l));
m=w.x+w.width/2;
v.push(new mxPoint(m,l));
this.setEdgePoints(c[r],v);
}}if(q<s/2){n+=this.prefVertEdgeOff;
}else{if(q>s/2){n-=this.prefVertEdgeOff;
}}a+=f;
d=Math.max(d,n);
}};
function WeightedCellSorter(a,b){this.cell=a;
this.weightedValue=b;
}WeightedCellSorter.prototype.weightedValue=0;
WeightedCellSorter.prototype.nudge=false;
WeightedCellSorter.prototype.visited=false;
WeightedCellSorter.prototype.rankIndex=null;
WeightedCellSorter.prototype.cell=null;
WeightedCellSorter.prototype.compare=function(d,c){if(d!=null&&c!=null){if(c.weightedValue>d.weightedValue){return 1;
}else{if(c.weightedValue<d.weightedValue){return -1;
}else{if(c.nudge){return 1;
}else{return -1;
}}}}else{return 0;
}};
function mxFastOrganicLayout(a){mxGraphLayout.call(this,a);
}mxFastOrganicLayout.prototype=new mxGraphLayout();
mxFastOrganicLayout.prototype.constructor=mxFastOrganicLayout;
mxFastOrganicLayout.prototype.useInputOrigin=true;
mxFastOrganicLayout.prototype.resetEdges=true;
mxFastOrganicLayout.prototype.disableEdgeStyle=true;
mxFastOrganicLayout.prototype.forceConstant=50;
mxFastOrganicLayout.prototype.forceConstantSquared=0;
mxFastOrganicLayout.prototype.minDistanceLimit=2;
mxFastOrganicLayout.prototype.maxDistanceLimit=500;
mxFastOrganicLayout.prototype.minDistanceLimitSquared=4;
mxFastOrganicLayout.prototype.initialTemp=200;
mxFastOrganicLayout.prototype.temperature=0;
mxFastOrganicLayout.prototype.maxIterations=0;
mxFastOrganicLayout.prototype.iteration=0;
mxFastOrganicLayout.prototype.vertexArray;
mxFastOrganicLayout.prototype.dispX;
mxFastOrganicLayout.prototype.dispY;
mxFastOrganicLayout.prototype.cellLocation;
mxFastOrganicLayout.prototype.radius;
mxFastOrganicLayout.prototype.radiusSquared;
mxFastOrganicLayout.prototype.isMoveable;
mxFastOrganicLayout.prototype.neighbours;
mxFastOrganicLayout.prototype.indices;
mxFastOrganicLayout.prototype.allowedToRun=true;
mxFastOrganicLayout.prototype.isVertexIgnored=function(a){return mxGraphLayout.prototype.isVertexIgnored.apply(this,arguments)||this.graph.getConnections(a).length==0;
};
mxFastOrganicLayout.prototype.execute=function(k){var d=this.graph.getModel();
this.vertexArray=[];
var c=this.graph.getChildVertices(k);
for(var v=0;
v<c.length;
v++){if(!this.isVertexIgnored(c[v])){this.vertexArray.push(c[v]);
}}var h=(this.useInputOrigin)?this.graph.view.getBounds(this.vertexArray):null;
var s=this.vertexArray.length;
this.indices=[];
this.dispX=[];
this.dispY=[];
this.cellLocation=[];
this.isMoveable=[];
this.neighbours=[];
this.radius=[];
this.radiusSquared=[];
if(this.forceConstant<0.001){this.forceConstant=0.001;
}this.forceConstantSquared=this.forceConstant*this.forceConstant;
for(var v=0;
v<this.vertexArray.length;
v++){var w=this.vertexArray[v];
this.cellLocation[v]=[];
var r=mxCellPath.create(w);
this.indices[r]=v;
var g=this.getVertexBounds(w);
var t=g.width;
var q=g.height;
var m=g.x;
var l=g.y;
this.cellLocation[v][0]=m+t/2;
this.cellLocation[v][1]=l+q/2;
this.radius[v]=Math.min(t,q);
this.radiusSquared[v]=this.radius[v]*this.radius[v];
}d.beginUpdate();
try{for(var v=0;
v<s;
v++){this.dispX[v]=0;
this.dispY[v]=0;
this.isMoveable[v]=this.isVertexMovable(this.vertexArray[v]);
var a=this.graph.getConnections(this.vertexArray[v],k);
var c=this.graph.getOpposites(a,this.vertexArray[v]);
this.neighbours[v]=[];
for(var u=0;
u<c.length;
u++){if(this.resetEdges){this.graph.resetEdge(a[u]);
}if(this.disableEdgeStyle){this.setEdgeStyleEnabled(a[u],false);
}var r=mxCellPath.create(c[u]);
var f=this.indices[r];
if(f!=null){this.neighbours[v][u]=f;
}else{this.neighbours[v][u]=v;
}}}this.temperature=this.initialTemp;
if(this.maxIterations==0){this.maxIterations=20*Math.sqrt(s);
}for(this.iteration=0;
this.iteration<this.maxIterations;
this.iteration++){if(!this.allowedToRun){return;
}this.calcRepulsion();
this.calcAttraction();
this.calcPositions();
this.reduceTemperature();
}var e=null;
var b=null;
for(var v=0;
v<this.vertexArray.length;
v++){var w=this.vertexArray[v];
if(this.isVertexMovable(w)){var g=this.getVertexBounds(w);
if(g!=null){this.cellLocation[v][0]-=g.width/2;
this.cellLocation[v][1]-=g.height/2;
var m=this.graph.snap(this.cellLocation[v][0]);
var l=this.graph.snap(this.cellLocation[v][1]);
this.setVertexLocation(w,m,l);
if(e==null){e=m;
}else{e=Math.min(e,m);
}if(b==null){b=l;
}else{b=Math.min(b,l);
}}}}var p=-(e||0)+1;
var o=-(b||0)+1;
if(h!=null){p+=h.x;
o+=h.y;
}this.graph.moveCells(this.vertexArray,p,o);
}finally{d.endUpdate();
}};
mxFastOrganicLayout.prototype.calcPositions=function(){for(var b=0;
b<this.vertexArray.length;
b++){if(this.isMoveable[b]){var c=Math.sqrt(this.dispX[b]*this.dispX[b]+this.dispY[b]*this.dispY[b]);
if(c<0.001){c=0.001;
}var d=this.dispX[b]/c*Math.min(c,this.temperature);
var a=this.dispY[b]/c*Math.min(c,this.temperature);
this.dispX[b]=0;
this.dispY[b]=0;
this.cellLocation[b][0]+=d;
this.cellLocation[b][1]+=a;
}}};
mxFastOrganicLayout.prototype.calcAttraction=function(){for(var l=0;
l<this.vertexArray.length;
l++){for(var f=0;
f<this.neighbours[l].length;
f++){var g=this.neighbours[l][f];
if(l!=g&&this.isMoveable[l]&&this.isMoveable[g]){var h=this.cellLocation[l][0]-this.cellLocation[g][0];
var m=this.cellLocation[l][1]-this.cellLocation[g][1];
var e=h*h+m*m-this.radiusSquared[l]-this.radiusSquared[g];
if(e<this.minDistanceLimitSquared){e=this.minDistanceLimitSquared;
}var d=Math.sqrt(e);
var c=(e)/this.forceConstant;
var b=(h/d)*c;
var a=(m/d)*c;
this.dispX[l]-=b;
this.dispY[l]-=a;
this.dispX[g]+=b;
this.dispY[g]+=a;
}}}};
mxFastOrganicLayout.prototype.calcRepulsion=function(){var b=this.vertexArray.length;
for(var h=0;
h<b;
h++){for(var f=h;
f<b;
f++){if(!this.allowedToRun){return;
}if(f!=h&&this.isMoveable[h]&&this.isMoveable[f]){var g=this.cellLocation[h][0]-this.cellLocation[f][0];
var k=this.cellLocation[h][1]-this.cellLocation[f][1];
if(g==0){g=0.01+Math.random();
}if(k==0){k=0.01+Math.random();
}var e=Math.sqrt((g*g)+(k*k));
var l=e-this.radius[h]-this.radius[f];
if(l>this.maxDistanceLimit){continue;
}if(l<this.minDistanceLimit){l=this.minDistanceLimit;
}var d=this.forceConstantSquared/l;
var c=(g/e)*d;
var a=(k/e)*d;
this.dispX[h]+=c;
this.dispY[h]+=a;
this.dispX[f]-=c;
this.dispY[f]-=a;
}}}};
mxFastOrganicLayout.prototype.reduceTemperature=function(){this.temperature=this.initialTemp*(1-this.iteration/this.maxIterations);
};
function mxCircleLayout(b,a){mxGraphLayout.call(this,b);
this.radius=(a!=null)?a:100;
}mxCircleLayout.prototype=new mxGraphLayout();
mxCircleLayout.prototype.constructor=mxCircleLayout;
mxCircleLayout.prototype.radius=null;
mxCircleLayout.prototype.moveCircle=false;
mxCircleLayout.prototype.x0=0;
mxCircleLayout.prototype.y0=0;
mxCircleLayout.prototype.resetEdges=true;
mxCircleLayout.prototype.disableEdgeStyle=true;
mxCircleLayout.prototype.execute=function(l){var f=this.graph.getModel();
f.beginUpdate();
try{var k=0;
var h=null;
var c=null;
var g=[];
var d=f.getChildCount(l);
for(var e=0;
e<d;
e++){var m=f.getChildAt(l,e);
if(!this.isVertexIgnored(m)){g.push(m);
var b=this.getVertexBounds(m);
if(h==null){h=b.y;
}else{h=Math.min(h,b.y);
}if(c==null){c=b.x;
}else{c=Math.min(c,b.x);
}k=Math.max(k,Math.max(b.width,b.height));
}else{if(!this.isEdgeIgnored(m)){if(this.resetEdges){this.graph.resetEdge(m);
}if(this.disableEdgeStyle){this.setEdgeStyleEnabled(m,false);
}}}}var a=this.getRadius(g.length,k);
if(this.moveCircle){c=this.x0;
h=this.y0;
}this.circle(g,a,c,h);
}finally{f.endUpdate();
}};
mxCircleLayout.prototype.getRadius=function(b,a){return Math.max(b*a/Math.PI,this.radius);
};
mxCircleLayout.prototype.circle=function(a,e,g,f){var c=a.length;
var d=2*Math.PI/c;
for(var b=0;
b<c;
b++){if(this.isVertexMovable(a[b])){this.setVertexLocation(a[b],g+e+e*Math.sin(b*d),f+e+e*Math.cos(b*d));
}}};
function mxParallelEdgeLayout(a){mxGraphLayout.call(this,a);
}mxParallelEdgeLayout.prototype=new mxGraphLayout();
mxParallelEdgeLayout.prototype.constructor=mxParallelEdgeLayout;
mxParallelEdgeLayout.prototype.spacing=20;
mxParallelEdgeLayout.prototype.execute=function(c){var d=this.findParallels(c);
this.graph.model.beginUpdate();
try{for(var b in d){var a=d[b];
if(a.length>1){this.layout(a);
}}}finally{this.graph.model.endUpdate();
}};
mxParallelEdgeLayout.prototype.findParallels=function(d){var b=this.graph.getModel();
var e=[];
var a=b.getChildCount(d);
for(var c=0;
c<a;
c++){var g=b.getChildAt(d,c);
if(!this.isEdgeIgnored(g)){var f=this.getEdgeId(g);
if(f!=null){if(e[f]==null){e[f]=[];
}e[f].push(g);
}}}return e;
};
mxParallelEdgeLayout.prototype.getEdgeId=function(c){var b=this.graph.getView();
var d=b.getState(c);
var e=(d!=null)?d.getVisibleTerminal(true):b.getVisibleTerminal(c,true);
var a=(d!=null)?d.getVisibleTerminal(false):b.getVisibleTerminal(c,false);
if(e!=null&&a!=null){e=mxCellPath.create(e);
a=mxCellPath.create(a);
return(e>a)?a+"-"+e:e+"-"+a;
}return null;
};
mxParallelEdgeLayout.prototype.layout=function(g){var c=g[0];
var l=this.graph.getModel();
var a=l.getGeometry(l.getTerminal(c,true));
var b=l.getGeometry(l.getTerminal(c,false));
if(a==b){var d=a.x+a.width+this.spacing;
var q=a.y+a.height/2;
for(var h=0;
h<g.length;
h++){this.route(g[h],d,q);
d+=this.spacing;
}}else{if(a!=null&&b!=null){var f=a.x+a.width/2;
var e=a.y+a.height/2;
var p=b.x+b.width/2;
var n=b.y+b.height/2;
var s=p-f;
var r=n-e;
var o=Math.sqrt(s*s+r*r);
var d=f+s/2;
var q=e+r/2;
var m=r*this.spacing/o;
var k=s*this.spacing/o;
d+=m*(g.length-1)/2;
q-=k*(g.length-1)/2;
for(var h=0;
h<g.length;
h++){this.route(g[h],d,q);
d-=m;
q+=k;
}}}};
mxParallelEdgeLayout.prototype.route=function(b,a,c){if(this.graph.isCellMovable(b)){this.setEdgePoints(b,[new mxPoint(a,c)]);
}};
function mxCompositeLayout(b,c,a){mxGraphLayout.call(this,b);
this.layouts=c;
this.master=a;
}mxCompositeLayout.prototype=new mxGraphLayout();
mxCompositeLayout.prototype.constructor=mxCompositeLayout;
mxCompositeLayout.prototype.layouts=null;
mxCompositeLayout.prototype.master=null;
mxCompositeLayout.prototype.moveCell=function(b,a,c){if(this.master!=null){this.master.move.apply(this.master,arguments);
}else{this.layouts[0].move.apply(this.layouts[0],arguments);
}};
mxCompositeLayout.prototype.execute=function(c){var a=this.graph.getModel();
a.beginUpdate();
try{for(var b=0;
b<this.layouts.length;
b++){this.layouts[b].execute.apply(this.layouts[b],arguments);
}}finally{a.endUpdate();
}};
function mxEdgeLabelLayout(b,a){mxGraphLayout.call(this,b);
}mxEdgeLabelLayout.prototype=new mxGraphLayout();
mxEdgeLabelLayout.prototype.constructor=mxEdgeLabelLayout;
mxEdgeLabelLayout.prototype.execute=function(h){var g=this.graph.view;
var e=this.graph.getModel();
var b=[];
var f=[];
var c=e.getChildCount(h);
for(var d=0;
d<c;
d++){var k=e.getChildAt(h,d);
var a=g.getState(k);
if(a!=null){if(!this.isVertexIgnored(k)){f.push(a);
}else{if(!this.isEdgeIgnored(k)){b.push(a);
}}}}this.placeLabels(f,b);
};
mxEdgeLabelLayout.prototype.placeLabels=function(a,h){var c=this.graph.getModel();
c.beginUpdate();
try{for(var d=0;
d<h.length;
d++){var f=h[d];
if(f!=null&&f.text!=null&&f.text.boundingBox!=null){for(var b=0;
b<a.length;
b++){var g=a[b];
if(g!=null){this.avoid(f,g);
}}}}}finally{c.endUpdate();
}};
mxEdgeLabelLayout.prototype.avoid=function(a,e){var b=this.graph.getModel();
var h=a.text.boundingBox;
if(mxUtils.intersects(h,e)){var f=-h.y-h.height+e.y;
var c=-h.y+e.y+e.height;
var l=(Math.abs(f)<Math.abs(c))?f:c;
var k=-h.x-h.width+e.x;
var i=-h.x+e.x+e.width;
var m=(Math.abs(k)<Math.abs(i))?k:i;
if(Math.abs(m)<Math.abs(l)){l=0;
}else{m=0;
}var d=b.getGeometry(a.cell);
if(d!=null){d=d.clone();
if(d.offset!=null){d.offset.x+=m;
d.offset.y+=l;
}else{d.offset=new mxPoint(m,l);
}b.setGeometry(a.cell,d);
}}};
function mxGraphAbstractHierarchyCell(){this.x=[];
this.y=[];
this.temp=[];
}mxGraphAbstractHierarchyCell.prototype.maxRank=-1;
mxGraphAbstractHierarchyCell.prototype.minRank=-1;
mxGraphAbstractHierarchyCell.prototype.x=null;
mxGraphAbstractHierarchyCell.prototype.y=null;
mxGraphAbstractHierarchyCell.prototype.width=0;
mxGraphAbstractHierarchyCell.prototype.height=0;
mxGraphAbstractHierarchyCell.prototype.nextLayerConnectedCells=null;
mxGraphAbstractHierarchyCell.prototype.previousLayerConnectedCells=null;
mxGraphAbstractHierarchyCell.prototype.temp=null;
mxGraphAbstractHierarchyCell.prototype.getNextLayerConnectedCells=function(a){return null;
};
mxGraphAbstractHierarchyCell.prototype.getPreviousLayerConnectedCells=function(a){return null;
};
mxGraphAbstractHierarchyCell.prototype.isEdge=function(){return false;
};
mxGraphAbstractHierarchyCell.prototype.isVertex=function(){return false;
};
mxGraphAbstractHierarchyCell.prototype.getGeneralPurposeVariable=function(a){return null;
};
mxGraphAbstractHierarchyCell.prototype.setGeneralPurposeVariable=function(a,b){return null;
};
mxGraphAbstractHierarchyCell.prototype.setX=function(a,b){if(this.isVertex()){this.x[0]=b;
}else{if(this.isEdge()){this.x[a-this.minRank-1]=b;
}}};
mxGraphAbstractHierarchyCell.prototype.getX=function(a){if(this.isVertex()){return this.x[0];
}else{if(this.isEdge()){return this.x[a-this.minRank-1];
}}return 0;
};
mxGraphAbstractHierarchyCell.prototype.setY=function(a,b){if(this.isVertex()){this.y[0]=b;
}else{if(this.isEdge()){this.y[a-this.minRank-1]=b;
}}};
function mxGraphHierarchyNode(a){mxGraphAbstractHierarchyCell.apply(this,arguments);
this.cell=a;
}mxGraphHierarchyNode.prototype=new mxGraphAbstractHierarchyCell();
mxGraphHierarchyNode.prototype.constructor=mxGraphHierarchyNode;
mxGraphHierarchyNode.prototype.cell=null;
mxGraphHierarchyNode.prototype.connectsAsTarget=[];
mxGraphHierarchyNode.prototype.connectsAsSource=[];
mxGraphHierarchyNode.prototype.hashCode=false;
mxGraphHierarchyNode.prototype.getRankValue=function(a){return this.maxRank;
};
mxGraphHierarchyNode.prototype.getNextLayerConnectedCells=function(b){if(this.nextLayerConnectedCells==null){this.nextLayerConnectedCells=[];
this.nextLayerConnectedCells[0]=[];
for(var a=0;
a<this.connectsAsTarget.length;
a++){var c=this.connectsAsTarget[a];
if(c.maxRank==-1||c.maxRank==b+1){this.nextLayerConnectedCells[0].push(c.source);
}else{this.nextLayerConnectedCells[0].push(c);
}}}return this.nextLayerConnectedCells[0];
};
mxGraphHierarchyNode.prototype.getPreviousLayerConnectedCells=function(b){if(this.previousLayerConnectedCells==null){this.previousLayerConnectedCells=[];
this.previousLayerConnectedCells[0]=[];
for(var a=0;
a<this.connectsAsSource.length;
a++){var c=this.connectsAsSource[a];
if(c.minRank==-1||c.minRank==b-1){this.previousLayerConnectedCells[0].push(c.target);
}else{this.previousLayerConnectedCells[0].push(c);
}}}return this.previousLayerConnectedCells[0];
};
mxGraphHierarchyNode.prototype.isVertex=function(){return true;
};
mxGraphHierarchyNode.prototype.getGeneralPurposeVariable=function(a){return this.temp[0];
};
mxGraphHierarchyNode.prototype.setGeneralPurposeVariable=function(a,b){this.temp[0]=b;
};
mxGraphHierarchyNode.prototype.isAncestor=function(b){if(b!=null&&this.hashCode!=null&&b.hashCode!=null&&this.hashCode.length<b.hashCode.length){if(this.hashCode==b.hashCode){return true;
}if(this.hashCode==null||this.hashCode==null){return false;
}for(var a=0;
a<this.hashCode.length;
a++){if(this.hashCode[a]!=b.hashCode[a]){return false;
}}return true;
}return false;
};
mxGraphHierarchyNode.prototype.getCoreCell=function(){return this.cell;
};
function mxGraphHierarchyEdge(a){mxGraphAbstractHierarchyCell.apply(this,arguments);
this.edges=a;
}mxGraphHierarchyEdge.prototype=new mxGraphAbstractHierarchyCell();
mxGraphHierarchyEdge.prototype.constructor=mxGraphHierarchyEdge;
mxGraphHierarchyEdge.prototype.edges=null;
mxGraphHierarchyEdge.prototype.source=null;
mxGraphHierarchyEdge.prototype.target=null;
mxGraphHierarchyEdge.prototype.isReversed=false;
mxGraphHierarchyEdge.prototype.invert=function(b){var a=this.source;
this.source=this.target;
this.target=a;
this.isReversed=!this.isReversed;
};
mxGraphHierarchyEdge.prototype.getNextLayerConnectedCells=function(b){if(this.nextLayerConnectedCells==null){this.nextLayerConnectedCells=[];
for(var a=0;
a<this.temp.length;
a++){this.nextLayerConnectedCells[a]=[];
if(a==this.temp.length-1){this.nextLayerConnectedCells[a].push(this.source);
}else{this.nextLayerConnectedCells[a].push(this);
}}}return this.nextLayerConnectedCells[b-this.minRank-1];
};
mxGraphHierarchyEdge.prototype.getPreviousLayerConnectedCells=function(b){if(this.previousLayerConnectedCells==null){this.previousLayerConnectedCells=[];
for(var a=0;
a<this.temp.length;
a++){this.previousLayerConnectedCells[a]=[];
if(a==0){this.previousLayerConnectedCells[a].push(this.target);
}else{this.previousLayerConnectedCells[a].push(this);
}}}return this.previousLayerConnectedCells[b-this.minRank-1];
};
mxGraphHierarchyEdge.prototype.isEdge=function(){return true;
};
mxGraphHierarchyEdge.prototype.getGeneralPurposeVariable=function(a){return this.temp[a-this.minRank-1];
};
mxGraphHierarchyEdge.prototype.setGeneralPurposeVariable=function(a,b){this.temp[a-this.minRank-1]=b;
};
mxGraphHierarchyEdge.prototype.getCoreCell=function(){if(this.edges!=null&&this.edges.length>0){return this.edges[0];
}return null;
};
function mxGraphHierarchyModel(k,l,q,o,r){var p=k.getGraph();
this.tightenToSource=r;
this.roots=q;
this.parent=o;
this.vertexMapper=new Object();
this.edgeMapper=new Object();
this.maxRank=0;
var n=[];
if(l==null){l=this.graph.getChildVertices(o);
}this.maxRank=this.SOURCESCANSTARTRANK;
this.createInternalCells(k,l,n);
for(var g=0;
g<l.length;
g++){var f=n[g].connectsAsSource;
for(var e=0;
e<f.length;
e++){var h=f[e];
var a=h.edges;
if(a!=null&&a.length>0){var b=a[0];
var c=k.getVisibleTerminal(b,false);
var m=mxCellPath.create(c);
var d=this.vertexMapper[m];
if(n[g]==d){c=k.getVisibleTerminal(b,true);
m=mxCellPath.create(c);
d=this.vertexMapper[m];
}if(d!=null&&n[g]!=d){h.target=d;
if(d.connectsAsTarget.length==0){d.connectsAsTarget=[];
}if(mxUtils.indexOf(d.connectsAsTarget,h)<0){d.connectsAsTarget.push(h);
}}}}n[g].temp[0]=1;
}}mxGraphHierarchyModel.prototype.maxRank=null;
mxGraphHierarchyModel.prototype.vertexMapper=null;
mxGraphHierarchyModel.prototype.edgeMapper=null;
mxGraphHierarchyModel.prototype.ranks=null;
mxGraphHierarchyModel.prototype.roots=null;
mxGraphHierarchyModel.prototype.parent=null;
mxGraphHierarchyModel.prototype.dfsCount=0;
mxGraphHierarchyModel.prototype.SOURCESCANSTARTRANK=100000000;
mxGraphHierarchyModel.prototype.tightenToSource=false;
mxGraphHierarchyModel.prototype.createInternalCells=function(h,l,p){var r=h.getGraph();
for(var f=0;
f<l.length;
f++){p[f]=new mxGraphHierarchyNode(l[f]);
var m=mxCellPath.create(l[f]);
this.vertexMapper[m]=p[f];
var a=h.getEdges(l[f]);
p[f].connectsAsSource=[];
for(var e=0;
e<a.length;
e++){var q=h.getVisibleTerminal(a[e],false);
if(q!=l[f]){if(q!=l[f]&&h.graph.model.isVertex(q)&&!h.isVertexIgnored(q)){var o=h.getEdgesBetween(l[f],q,false);
var d=h.getEdgesBetween(l[f],q,true);
var n=mxCellPath.create(o[0]);
if(o!=null&&o.length>0&&this.edgeMapper[n]==null&&d.length*2>=o.length){var g=new mxGraphHierarchyEdge(o);
for(var c=0;
c<o.length;
c++){var b=o[c];
n=mxCellPath.create(b);
this.edgeMapper[n]=g;
r.resetEdge(b);
if(h.disableEdgeStyle){h.setEdgeStyleEnabled(b,false);
h.setOrthogonalEdge(b,true);
}}g.source=p[f];
if(mxUtils.indexOf(p[f].connectsAsSource,g)<0){p[f].connectsAsSource.push(g);
}}}}}p[f].temp[0]=0;
}};
mxGraphHierarchyModel.prototype.initialRank=function(){var g=[];
if(this.roots!=null){for(var h=0;
h<this.roots.length;
h++){var n=mxCellPath.create(this.roots[h]);
var m=this.vertexMapper[n];
if(m!=null){g.push(m);
}}}for(var p in this.vertexMapper){var m=this.vertexMapper[p];
m.temp[0]=-1;
}var l=g.slice();
while(g.length>0){var m=g[0];
var q;
var o;
q=m.connectsAsTarget;
o=m.connectsAsSource;
var b=true;
var c=this.SOURCESCANSTARTRANK;
for(var h=0;
h<q.length;
h++){var k=q[h];
if(k.temp[0]==5270620){var f=k.source;
c=Math.min(c,f.temp[0]-1);
}else{b=false;
break;
}}if(b){m.temp[0]=c;
this.maxRank=Math.min(this.maxRank,c);
if(o!=null){for(var h=0;
h<o.length;
h++){var k=o[h];
k.temp[0]=5270620;
var f=k.target;
if(f.temp[0]==-1){g.push(f);
f.temp[0]=-2;
}}}g.shift();
}else{var d=g.shift();
g.push(m);
if(d==m&&g.length==1){break;
}}}for(var p in this.vertexMapper){var m=this.vertexMapper[p];
m.temp[0]-=this.maxRank;
}for(var h=0;
h<l.length;
h++){var m=l[h];
var a=0;
var q=m.connectsAsSource;
for(var e=0;
e<q.length;
e++){var k=q[e];
var f=k.target;
m.temp[0]=Math.max(a,f.temp[0]+1);
a=m.temp[0];
}}this.maxRank=this.SOURCESCANSTARTRANK-this.maxRank;
};
mxGraphHierarchyModel.prototype.fixRanks=function(){var c=[];
this.ranks=[];
for(var d=0;
d<this.maxRank+1;
d++){c[d]=[];
this.ranks[d]=c[d];
}var g=null;
if(this.roots!=null){var b=this.roots;
g=[];
for(var d=0;
d<b.length;
d++){var a=b[d];
var e=mxCellPath.create(a);
var f=this.vertexMapper[e];
g[d]=f;
}}this.visit(function(n,p,o,m,k){if(k==0&&p.maxRank<0&&p.minRank<0){c[p.temp[0]].push(p);
p.maxRank=p.temp[0];
p.minRank=p.temp[0];
p.temp[0]=c[p.maxRank].length-1;
}if(n!=null&&o!=null){var h=n.maxRank-p.maxRank;
if(h>1){o.maxRank=n.maxRank;
o.minRank=p.maxRank;
o.temp=[];
o.x=[];
o.y=[];
for(var l=o.minRank+1;
l<o.maxRank;
l++){c[l].push(o);
o.setGeneralPurposeVariable(l,c[l].length-1);
}}}},g,false,null);
};
mxGraphHierarchyModel.prototype.visit=function(e,a,d,b){if(a!=null){for(var c=0;
c<a.length;
c++){var f=a[c];
if(f!=null){if(b==null){b=new Object();
}if(d){f.hashCode=[];
f.hashCode[0]=this.dfsCount;
f.hashCode[1]=c;
this.extendedDfs(null,f,null,e,b,f.hashCode,c,0);
}else{this.dfs(null,f,null,e,b,0);
}}}this.dfsCount++;
}};
mxGraphHierarchyModel.prototype.dfs=function(k,h,m,f,a,e){if(h!=null){var l=mxCellPath.create(h.cell);
if(a[l]==null){a[l]=h;
f(k,h,m,e,0);
var b=h.connectsAsSource.slice();
for(var c=0;
c<b.length;
c++){var d=b[c];
var g=d.target;
this.dfs(h,g,d,f,a,e+1);
}}else{f(k,h,m,e,1);
}}};
mxGraphHierarchyModel.prototype.extendedDfs=function(n,l,o,h,a,p,c,g){if(l!=null){if(n!=null){if(l.hashCode==null||l.hashCode[0]!=n.hashCode[0]){var b=n.hashCode.length+1;
l.hashCode=n.hashCode.slice();
l.hashCode[b-1]=c;
}}var m=mxCellPath.create(l.cell);
if(a[m]==null){a[m]=l;
h(n,l,o,g,0);
var d=l.connectsAsSource.slice();
for(var e=0;
e<d.length;
e++){var f=d[e];
var k=f.target;
this.extendedDfs(l,k,f,h,a,l.hashCode,e,g+1);
}}else{h(n,l,o,g,1);
}}};
function mxHierarchicalLayoutStage(){}mxHierarchicalLayoutStage.prototype.execute=function(a){};
function mxMedianHybridCrossingReduction(a){this.layout=a;
}mxMedianHybridCrossingReduction.prototype=new mxHierarchicalLayoutStage();
mxMedianHybridCrossingReduction.prototype.constructor=mxMedianHybridCrossingReduction;
mxMedianHybridCrossingReduction.prototype.layout=null;
mxMedianHybridCrossingReduction.prototype.maxIterations=24;
mxMedianHybridCrossingReduction.prototype.nestedBestRanks=null;
mxMedianHybridCrossingReduction.prototype.currentBestCrossings=0;
mxMedianHybridCrossingReduction.prototype.iterationsWithoutImprovement=0;
mxMedianHybridCrossingReduction.prototype.maxNoImprovementIterations=2;
mxMedianHybridCrossingReduction.prototype.execute=function(n){var g=this.layout.getModel();
this.nestedBestRanks=[];
for(var e=0;
e<g.ranks.length;
e++){this.nestedBestRanks[e]=g.ranks[e].slice();
}var a=0;
var h=this.calculateCrossings(g);
for(var e=0;
e<this.maxIterations&&a<this.maxNoImprovementIterations;
e++){this.weightedMedian(e,g);
this.transpose(e,g);
var m=this.calculateCrossings(g);
if(m<h){h=m;
a=0;
for(var c=0;
c<this.nestedBestRanks.length;
c++){var d=g.ranks[c];
for(var b=0;
b<d.length;
b++){var o=d[b];
this.nestedBestRanks[c][o.getGeneralPurposeVariable(c)]=o;
}}}else{a++;
for(var c=0;
c<this.nestedBestRanks.length;
c++){var d=g.ranks[c];
for(var b=0;
b<d.length;
b++){var o=d[b];
o.setGeneralPurposeVariable(c,b);
}}}if(h==0){break;
}}var f=[];
var l=[];
for(var e=0;
e<g.maxRank+1;
e++){l[e]=[];
f[e]=l[e];
}for(var e=0;
e<this.nestedBestRanks.length;
e++){for(var c=0;
c<this.nestedBestRanks[e].length;
c++){l[e].push(this.nestedBestRanks[e][c]);
}}g.ranks=f;
};
mxMedianHybridCrossingReduction.prototype.calculateCrossings=function(b){var d=b.ranks.length;
var a=0;
for(var c=1;
c<d;
c++){a+=this.calculateRankCrossing(c,b);
}return a;
};
mxMedianHybridCrossingReduction.prototype.calculateRankCrossing=function(l,m){var d=0;
var h=m.ranks[l];
var r=m.ranks[l-1];
var q=h.length;
var p=r.length;
var t=[];
for(var f=0;
f<q;
f++){t[f]=[];
}for(var f=0;
f<h.length;
f++){var c=h[f];
var a=c.getGeneralPurposeVariable(l);
var o=c.getPreviousLayerConnectedCells(l);
for(var e=0;
e<o.length;
e++){var b=o[e];
var g=b.getGeneralPurposeVariable(l-1);
t[a][g]=201207;
}}for(var f=0;
f<q;
f++){for(var e=0;
e<p;
e++){if(t[f][e]==201207){for(var s=f+1;
s<q;
s++){for(var n=0;
n<e;
n++){if(t[s][n]==201207){d++;
}}}for(var s=0;
s<f;
s++){for(var n=e+1;
n<p;
n++){if(t[s][n]==201207){d++;
}}}}}}return d/2;
};
mxMedianHybridCrossingReduction.prototype.transpose=function(a,f){var b=true;
var n=0;
var q=10;
while(b&&n++<q){var s=a%2==1&&n%2==1;
b=false;
for(var y=0;
y<f.ranks.length;
y++){var z=f.ranks[y];
var C=[];
for(var x=0;
x<z.length;
x++){var d=z[x];
var B=d.getGeneralPurposeVariable(y);
if(B<0){B=x;
}C[B]=d;
}var t=null;
var m=null;
var g=null;
var r=null;
var e=null;
var w=null;
var D=null;
var c=null;
var l=null;
var v=null;
for(var x=0;
x<(z.length-1);
x++){if(x==0){l=C[x];
t=l.getNextLayerConnectedCells(y);
m=l.getPreviousLayerConnectedCells(y);
e=[];
w=[];
for(var u=0;
u<t.length;
u++){e[u]=t[u].getGeneralPurposeVariable(y+1);
}for(var u=0;
u<m.length;
u++){w[u]=m[u].getGeneralPurposeVariable(y-1);
}}else{t=g;
m=r;
e=D;
w=c;
l=v;
}v=C[x+1];
g=v.getNextLayerConnectedCells(y);
r=v.getPreviousLayerConnectedCells(y);
D=[];
c=[];
for(var u=0;
u<g.length;
u++){D[u]=g[u].getGeneralPurposeVariable(y+1);
}for(var u=0;
u<r.length;
u++){c[u]=r[u].getGeneralPurposeVariable(y-1);
}var h=0;
var o=0;
for(var u=0;
u<e.length;
u++){for(var p=0;
p<D.length;
p++){if(e[u]>D[p]){h++;
}if(e[u]<D[p]){o++;
}}}for(var u=0;
u<w.length;
u++){for(var p=0;
p<c.length;
p++){if(w[u]>c[p]){h++;
}if(w[u]<c[p]){o++;
}}}if((o<h)||(o==h&&s)){var A=l.getGeneralPurposeVariable(y);
l.setGeneralPurposeVariable(y,v.getGeneralPurposeVariable(y));
v.setGeneralPurposeVariable(y,A);
g=t;
r=m;
D=e;
c=w;
v=l;
if(!s){b=true;
}}}}}};
mxMedianHybridCrossingReduction.prototype.weightedMedian=function(c,b){var d=(c%2==0);
if(d){for(var a=b.maxRank-1;
a>=0;
a--){this.medianRank(a,d);
}}else{for(var a=1;
a<b.maxRank;
a++){this.medianRank(a,d);
}}};
mxMedianHybridCrossingReduction.prototype.medianRank=function(l,g){var b=this.nestedBestRanks[l].length;
var f=[];
var h=[];
for(var c=0;
c<b;
c++){var k=this.nestedBestRanks[l][c];
var e=new MedianCellSorter();
e.cell=k;
var a;
if(g){a=k.getNextLayerConnectedCells(l);
}else{a=k.getPreviousLayerConnectedCells(l);
}var d;
if(g){d=l+1;
}else{d=l-1;
}if(a!=null&&a.length!=0){e.medianValue=this.medianValue(a,d);
f.push(e);
}else{h[k.getGeneralPurposeVariable(l)]=true;
}}f.sort(MedianCellSorter.prototype.compare);
for(var c=0;
c<b;
c++){if(h[c]==null){var k=f.shift().cell;
k.setGeneralPurposeVariable(l,c);
}}};
mxMedianHybridCrossingReduction.prototype.medianValue=function(e,k){var f=[];
var g=0;
for(var b=0;
b<e.length;
b++){var h=e[b];
f[g++]=h.getGeneralPurposeVariable(k);
}f.sort(function(l,i){return l-i;
});
if(g%2==1){return f[Math.floor(g/2)];
}else{if(g==2){return((f[0]+f[1])/2);
}else{var c=g/2;
var d=f[c-1]-f[0];
var a=f[g-1]-f[c];
return(f[c-1]*a+f[c]*d)/(d+a);
}}};
function MedianCellSorter(){}MedianCellSorter.prototype.medianValue=0;
MedianCellSorter.prototype.cell=false;
MedianCellSorter.prototype.compare=function(d,c){if(d!=null&&c!=null){if(c.medianValue>d.medianValue){return -1;
}else{if(c.medianValue<d.medianValue){return 1;
}else{return 0;
}}}else{return 0;
}};
function mxMinimumCycleRemover(a){this.layout=a;
}mxMinimumCycleRemover.prototype=new mxHierarchicalLayoutStage();
mxMinimumCycleRemover.prototype.constructor=mxMinimumCycleRemover;
mxMinimumCycleRemover.prototype.layout=null;
mxMinimumCycleRemover.prototype.execute=function(o){var m=this.layout.getModel();
var a=new Object();
var n=mxUtils.clone(m.vertexMapper,null,true);
var l=null;
if(m.roots!=null){var f=m.roots;
l=[];
for(var h=0;
h<f.length;
h++){var c=mxCellPath.create(f[h]);
l[h]=m.vertexMapper[c];
}}m.visit(function(t,u,i,s,r){if(u.isAncestor(t)){i.invert();
mxUtils.remove(i,t.connectsAsSource);
t.connectsAsTarget.push(i);
mxUtils.remove(i,u.connectsAsTarget);
u.connectsAsSource.push(i);
}var v=mxCellPath.create(u.cell);
a[v]=u;
delete n[v];
},l,true,null);
var k=null;
if(n.lenth>0){k=mxUtils.clone(n,null,true);
}var g=mxUtils.clone(a,null,true);
m.visit(function(t,u,i,s,r){if(u.isAncestor(t)){i.invert();
mxUtils.remove(i,t.connectsAsSource);
u.connectsAsSource.push(i);
t.connectsAsTarget.push(i);
mxUtils.remove(i,u.connectsAsTarget);
}var v=mxCellPath.create(u.cell);
a[v]=u;
delete n[v];
},n,true,g);
var q=this.layout.getGraph();
if(k!=null&&k.length>0){var p=m.roots;
for(var h=0;
h<k.length;
h++){var e=k[h];
var d=e.cell;
var b=q.getIncomingEdges(d).length;
if(b==0){p.push(d);
}}}};
function mxCoordinateAssignment(e,b,f,c,d,a){this.layout=e;
this.intraCellSpacing=b;
this.interRankCellSpacing=f;
this.orientation=c;
this.initialX=d;
this.parallelEdgeSpacing=a;
}var mxHierarchicalEdgeStyle={ORTHOGONAL:1,POLYLINE:2,STRAIGHT:3,CURVE:4};
mxCoordinateAssignment.prototype=new mxHierarchicalLayoutStage();
mxCoordinateAssignment.prototype.constructor=mxCoordinateAssignment;
mxCoordinateAssignment.prototype.layout=null;
mxCoordinateAssignment.prototype.intraCellSpacing=30;
mxCoordinateAssignment.prototype.interRankCellSpacing=100;
mxCoordinateAssignment.prototype.parallelEdgeSpacing=10;
mxCoordinateAssignment.prototype.maxIterations=8;
mxCoordinateAssignment.prototype.prefHozEdgeSep=5;
mxCoordinateAssignment.prototype.prefVertEdgeOff=2;
mxCoordinateAssignment.prototype.minEdgeJetty=12;
mxCoordinateAssignment.prototype.channelBuffer=4;
mxCoordinateAssignment.prototype.jettyPositions=null;
mxCoordinateAssignment.prototype.orientation=mxConstants.DIRECTION_NORTH;
mxCoordinateAssignment.prototype.initialX=null;
mxCoordinateAssignment.prototype.limitX=null;
mxCoordinateAssignment.prototype.currentXDelta=null;
mxCoordinateAssignment.prototype.widestRank=null;
mxCoordinateAssignment.prototype.rankTopY=null;
mxCoordinateAssignment.prototype.rankBottomY=null;
mxCoordinateAssignment.prototype.widestRankValue=null;
mxCoordinateAssignment.prototype.rankWidths=null;
mxCoordinateAssignment.prototype.rankY=null;
mxCoordinateAssignment.prototype.fineTuning=true;
mxCoordinateAssignment.prototype.edgeStyle=mxHierarchicalEdgeStyle.POLYLINE;
mxCoordinateAssignment.prototype.nextLayerConnectedCache=null;
mxCoordinateAssignment.prototype.previousLayerConnectedCache=null;
mxCoordinateAssignment.prototype.groupPadding=10;
mxCoordinateAssignment.prototype.printStatus=function(){var d=this.layout.getModel();
mxLog.show();
mxLog.writeln("======Coord assignment debug=======");
for(var c=0;
c<d.ranks.length;
c++){mxLog.write("Rank ",c," : ");
var e=d.ranks[c];
for(var b=0;
b<e.length;
b++){var a=e[b];
mxLog.write(a.getGeneralPurposeVariable(c),"  ");
}mxLog.writeln();
}mxLog.writeln("====================================");
};
mxCoordinateAssignment.prototype.execute=function(g){this.jettyPositions=[];
var d=this.layout.getModel();
this.currentXDelta=0;
this.initialCoords(this.layout.getGraph(),d);
if(this.fineTuning){this.minNode(d);
}var f=100000000;
if(this.fineTuning){for(var e=0;
e<this.maxIterations;
e++){if(e!=0){this.medianPos(e,d);
this.minNode(d);
}if(this.currentXDelta<f){for(var c=0;
c<d.ranks.length;
c++){var h=d.ranks[c];
for(var b=0;
b<h.length;
b++){var a=h[b];
a.setX(c,a.getGeneralPurposeVariable(c));
}}f=this.currentXDelta;
}else{for(var c=0;
c<d.ranks.length;
c++){var h=d.ranks[c];
for(var b=0;
b<h.length;
b++){var a=h[b];
a.setGeneralPurposeVariable(c,a.getX(c));
}}}this.minPath(this.layout.getGraph(),d);
this.currentXDelta=0;
}}this.setCellLocations(this.layout.getGraph(),d);
};
mxCoordinateAssignment.prototype.minNode=function(h){var H=[];
var I=[];
var G=[];
for(var D=0;
D<=h.maxRank;
D++){G[D]=h.ranks[D];
for(var C=0;
C<G[D].length;
C++){var x=G[D][C];
var o=new WeightedCellSorter(x,D);
o.rankIndex=C;
o.visited=true;
H.push(o);
var J=mxCellPath.create(x.getCoreCell());
I[J]=o;
}}var B=H.length*10;
var m=0;
var E=1;
while(H.length>0&&m<=B){var e=H.shift();
var d=e.cell;
var A=e.weightedValue;
var p=parseInt(e.rankIndex);
var w=d.getNextLayerConnectedCells(A);
var b=d.getPreviousLayerConnectedCells(A);
var u=w.length;
var r=b.length;
var n=this.medianXValue(w,A+1);
var c=this.medianXValue(b,A-1);
var y=u+r;
var s=d.getGeneralPurposeVariable(A);
var F=s;
if(y>0){F=(n*u+c*r)/y;
}var a=false;
if(F<s-E){if(p==0){d.setGeneralPurposeVariable(A,F);
a=true;
}else{var l=G[A][p-1];
var g=l.getGeneralPurposeVariable(A);
g=g+l.width/2+this.intraCellSpacing+d.width/2;
if(g<F){d.setGeneralPurposeVariable(A,F);
a=true;
}else{if(g<d.getGeneralPurposeVariable(A)-E){d.setGeneralPurposeVariable(A,g);
a=true;
}}}}else{if(F>s+E){var q=G[A].length;
if(p==q-1){d.setGeneralPurposeVariable(A,F);
a=true;
}else{var z=G[A][p+1];
var k=z.getGeneralPurposeVariable(A);
k=k-z.width/2-this.intraCellSpacing-d.width/2;
if(k>F){d.setGeneralPurposeVariable(A,F);
a=true;
}else{if(k>d.getGeneralPurposeVariable(A)+E){d.setGeneralPurposeVariable(A,k);
a=true;
}}}}}if(a){for(var D=0;
D<w.length;
D++){var f=w[D];
var t=mxCellPath.create(f.getCoreCell());
var v=I[t];
if(v!=null){if(v.visited==false){v.visited=true;
H.push(v);
}}}for(var D=0;
D<b.length;
D++){var f=b[D];
var t=mxCellPath.create(f.getCoreCell());
var v=I[t];
if(v!=null){if(v.visited==false){v.visited=true;
H.push(v);
}}}}e.visited=false;
m++;
}};
mxCoordinateAssignment.prototype.medianPos=function(c,b){var d=(c%2==0);
if(d){for(var a=b.maxRank;
a>0;
a--){this.rankMedianPosition(a-1,b,a);
}}else{for(var a=0;
a<b.maxRank-1;
a++){this.rankMedianPosition(a+1,b,a);
}}};
mxCoordinateAssignment.prototype.rankMedianPosition=function(r,d,o){var u=d.ranks[r];
var h=[];
var k=[];
for(var t=0;
t<u.length;
t++){var n=u[t];
h[t]=new WeightedCellSorter();
h[t].cell=n;
h[t].rankIndex=t;
var m=mxCellPath.create(n.getCoreCell());
k[m]=h[t];
var p=null;
if(o<r){p=n.getPreviousLayerConnectedCells(r);
}else{p=n.getNextLayerConnectedCells(r);
}h[t].weightedValue=this.calculatedWeightedValue(n,p);
}h.sort(WeightedCellSorter.prototype.compare);
for(var t=0;
t<h.length;
t++){var l=0;
var a=h[t].cell;
var p=null;
var g=0;
if(o<r){p=a.getPreviousLayerConnectedCells(r).slice();
}else{p=a.getNextLayerConnectedCells(r).slice();
}if(p!=null){l=p.length;
if(l>0){g=this.medianXValue(p,o);
}else{g=a.getGeneralPurposeVariable(r);
}}var w=0;
var c=-100000000;
for(var s=h[t].rankIndex-1;
s>=0;
){var b=mxCellPath.create(u[s].getCoreCell());
var v=k[b];
if(v!=null){var f=v.cell;
if(v.visited){c=f.getGeneralPurposeVariable(r)+f.width/2+this.intraCellSpacing+w+a.width/2;
s=-1;
}else{w+=f.width+this.intraCellSpacing;
s--;
}}}var x=0;
var e=100000000;
for(var s=h[t].rankIndex+1;
s<h.length;
){var b=mxCellPath.create(u[s].getCoreCell());
var v=k[b];
if(v!=null){var q=v.cell;
if(v.visited){e=q.getGeneralPurposeVariable(r)-q.width/2-this.intraCellSpacing-x-a.width/2;
s=h.length;
}else{x+=q.width+this.intraCellSpacing;
s++;
}}}if(g>=c&&g<=e){a.setGeneralPurposeVariable(r,g);
}else{if(g<c){a.setGeneralPurposeVariable(r,c);
this.currentXDelta+=c-g;
}else{if(g>e){a.setGeneralPurposeVariable(r,e);
this.currentXDelta+=g-e;
}}}h[t].visited=true;
}};
mxCoordinateAssignment.prototype.calculatedWeightedValue=function(e,d){var b=0;
for(var c=0;
c<d.length;
c++){var a=d[c];
if(e.isVertex()&&a.isVertex()){b++;
}else{if(e.isEdge()&&a.isEdge()){b+=8;
}else{b+=2;
}}}return b;
};
mxCoordinateAssignment.prototype.medianXValue=function(c,g){if(c.length==0){return 0;
}var a=[];
for(var f=0;
f<c.length;
f++){a[f]=c[f].getGeneralPurposeVariable(g);
}a.sort(function(i,h){return i-h;
});
if(c.length%2==1){return a[Math.floor(c.length/2)];
}else{var e=c.length/2;
var b=a[e-1];
var d=a[e];
return((b+d)/2);
}};
mxCoordinateAssignment.prototype.initialCoords=function(c,a){this.calculateWidestRank(c,a);
for(var b=this.widestRank;
b>=0;
b--){if(b<a.maxRank){this.rankCoordinates(b,c,a);
}}for(var b=this.widestRank+1;
b<=a.maxRank;
b++){if(b>0){this.rankCoordinates(b,c,a);
}}};
mxCoordinateAssignment.prototype.rankCoordinates=function(m,l,k){var g=k.ranks[m];
var b=0;
var e=this.initialX+(this.widestRankValue-this.rankWidths[m])/2;
var c=false;
for(var h=0;
h<g.length;
h++){var d=g[h];
if(d.isVertex()){var a=this.layout.getVertexBounds(d.cell);
if(a!=null){if(this.orientation==mxConstants.DIRECTION_NORTH||this.orientation==mxConstants.DIRECTION_SOUTH){d.width=a.width;
d.height=a.height;
}else{d.width=a.height;
d.height=a.width;
}}else{c=true;
}b=Math.max(b,d.height);
}else{if(d.isEdge()){var f=1;
if(d.edges!=null){f=d.edges.length;
}else{mxLog.warn("edge.edges is null");
}d.width=(f-1)*this.parallelEdgeSpacing;
}}e+=d.width/2;
d.setX(m,e);
d.setGeneralPurposeVariable(m,e);
e+=d.width/2;
e+=this.intraCellSpacing;
}if(c==true){mxLog.warn("At least one cell has no bounds");
}};
mxCoordinateAssignment.prototype.calculateWidestRank=function(p,m){var n=-this.interRankCellSpacing;
var e=0;
this.rankWidths=[];
this.rankY=[];
for(var q=m.maxRank;
q>=0;
q--){var b=0;
var l=m.ranks[q];
var f=this.initialX;
var c=false;
for(var k=0;
k<l.length;
k++){var d=l[k];
if(d.isVertex()){var a=this.layout.getVertexBounds(d.cell);
if(a!=null){if(this.orientation==mxConstants.DIRECTION_NORTH||this.orientation==mxConstants.DIRECTION_SOUTH){d.width=a.width;
d.height=a.height;
}else{d.width=a.height;
d.height=a.width;
}}else{c=true;
}b=Math.max(b,d.height);
}else{if(d.isEdge()){var h=1;
if(d.edges!=null){h=d.edges.length;
}else{mxLog.warn("edge.edges is null");
}d.width=(h-1)*this.parallelEdgeSpacing;
}}f+=d.width/2;
d.setX(q,f);
d.setGeneralPurposeVariable(q,f);
f+=d.width/2;
f+=this.intraCellSpacing;
if(f>this.widestRankValue){this.widestRankValue=f;
this.widestRank=q;
}this.rankWidths[q]=f;
}if(c==true){mxLog.warn("At least one cell has no bounds");
}this.rankY[q]=n;
var g=b/2+e/2+this.interRankCellSpacing;
e=b;
if(this.orientation==mxConstants.DIRECTION_NORTH||this.orientation==mxConstants.DIRECTION_WEST){n+=g;
}else{n-=g;
}for(var k=0;
k<l.length;
k++){var o=l[k];
o.setY(q,n);
}}};
mxCoordinateAssignment.prototype.minPath=function(p,f){var d=f.edgeMapper;
for(var n in d){var o=d[n];
if(o.maxRank-o.minRank-1<1){continue;
}var a=o.getGeneralPurposeVariable(o.minRank+1);
var g=true;
var k=0;
for(var e=o.minRank+2;
e<o.maxRank;
e++){var l=o.getGeneralPurposeVariable(e);
if(a!=l){g=false;
a=l;
}else{k++;
}}if(!g){var c=0;
var m=0;
var q=[];
var h=[];
var b=o.getGeneralPurposeVariable(o.minRank+1);
for(var e=o.minRank+1;
e<o.maxRank-1;
e++){var r=o.getX(e+1);
if(b==r){q[e-o.minRank-1]=b;
c++;
}else{if(this.repositionValid(f,o,e+1,b)){q[e-o.minRank-1]=b;
c++;
}else{q[e-o.minRank-1]=r;
b=r;
}}}b=o.getX(e);
for(var e=o.maxRank-1;
e>o.minRank+1;
e--){var r=o.getX(e-1);
if(b==r){h[e-o.minRank-2]=b;
m++;
}else{if(this.repositionValid(f,o,e-1,b)){h[e-o.minRank-2]=b;
m++;
}else{h[e-o.minRank-2]=o.getX(e-1);
b=r;
}}}if(m>k||c>k){if(m>=c){for(var e=o.maxRank-2;
e>o.minRank;
e--){o.setX(e,h[e-o.minRank-1]);
}}else{if(c>m){for(var e=o.minRank+2;
e<o.maxRank;
e++){o.setX(e,q[e-o.minRank-2]);
}}else{}}}}}};
mxCoordinateAssignment.prototype.repositionValid=function(e,m,c,f){var l=e.ranks[c];
var h=-1;
for(var d=0;
d<l.length;
d++){if(m==l[d]){h=d;
break;
}}if(h<0){return false;
}var a=m.getGeneralPurposeVariable(c);
if(f<a){if(h==0){return true;
}var k=l[h-1];
var g=k.getGeneralPurposeVariable(c);
g=g+k.width/2+this.intraCellSpacing+m.width/2;
if(g<=f){return true;
}else{return false;
}}else{if(f>a){if(h==l.length-1){return true;
}var b=l[h+1];
var n=b.getGeneralPurposeVariable(c);
n=n-b.width/2-this.intraCellSpacing-m.width/2;
if(n>=f){return true;
}else{return false;
}}}return true;
};
mxCoordinateAssignment.prototype.setCellLocations=function(k,d){this.rankTopY=[];
this.rankBottomY=[];
for(var c=0;
c<d.ranks.length;
c++){this.rankTopY[c]=Number.MAX_VALUE;
this.rankBottomY[c]=0;
}var l=null;
if(this.layout.resizeParent){l=new Object();
}var b=d.edgeMapper;
var f=d.vertexMapper;
for(var h in f){var e=f[h];
this.setVertexLocation(e);
if(this.layout.resizeParent){var g=k.model.getParent(e.cell);
var a=mxCellPath.create(g);
if(l[a]==null){l[a]=g;
}}}if(this.layout.resizeParent&&l!=null){this.adjustParents(l);
}if(this.edgeStyle==mxHierarchicalEdgeStyle.ORTHOGONAL||this.edgeStyle==mxHierarchicalEdgeStyle.POLYLINE||this.edgeStyle==mxHierarchicalEdgeStyle.CURVE){this.localEdgeProcessing(d);
}for(var h in b){this.setEdgePosition(b[h]);
}};
mxCoordinateAssignment.prototype.adjustParents=function(b){var a=[];
for(var c in b){a.push(b[c]);
}this.layout.arrangeGroups(mxUtils.sortCells(a,true),this.groupPadding);
};
mxCoordinateAssignment.prototype.localEdgeProcessing=function(h){for(var q=0;
q<h.ranks.length;
q++){var B=h.ranks[q];
for(var s=0;
s<B.length;
s++){var c=B[s];
if(c.isVertex()){var E=c.getPreviousLayerConnectedCells(q);
var n=q-1;
for(var z=0;
z<2;
z++){if(n>-1&&n<h.ranks.length&&E!=null&&E.length>0){var r=[];
for(var A=0;
A<E.length;
A++){var y=new WeightedCellSorter(E[A],E[A].getX(n));
r.push(y);
}r.sort(WeightedCellSorter.prototype.compare);
var g=c.x[0]-c.width/2;
var i=g+c.width;
var o=0;
var p=0;
var C=[];
for(var A=0;
A<r.length;
A++){var D=r[A].cell;
var u;
if(D.isVertex()){if(z==0){u=c.connectsAsSource;
}else{u=c.connectsAsTarget;
}for(var a=0;
a<u.length;
a++){if(u[a].source==D||u[a].target==D){o+=u[a].edges.length;
p++;
C.push(u[a]);
}}}else{o+=D.edges.length;
p++;
C.push(D);
}}var f=(o+1)*this.prefHozEdgeSep;
if(c.width>f+(2*this.prefHozEdgeSep)){g+=this.prefHozEdgeSep;
i-=this.prefHozEdgeSep;
}var b=i-g;
var e=b/o;
var x=g+e/2;
var t=this.minEdgeJetty-this.prefVertEdgeOff;
var d=0;
for(var A=0;
A<C.length;
A++){var v=C[A].edges.length;
var F=mxCellPath.create(C[A].edges[0]);
var l=this.jettyPositions[F];
if(l==null){l=[];
this.jettyPositions[F]=l;
}if(A<o/2){t+=this.prefVertEdgeOff;
}else{if(A>o/2){t-=this.prefVertEdgeOff;
}}for(var w=0;
w<v;
w++){l[w*4+z*2]=x;
x+=e;
l[w*4+z*2+1]=t;
}d=Math.max(d,t);
}}E=c.getNextLayerConnectedCells(q);
n=q+1;
}}}}};
mxCoordinateAssignment.prototype.setEdgePosition=function(b){var E=0;
if(b.temp[0]!=101207){var o=b.maxRank;
var h=b.minRank;
if(o==h){o=b.source.maxRank;
h=b.target.minRank;
}var D=0;
var I=mxCellPath.create(b.edges[0]);
var t=this.jettyPositions[I];
var A=b.isReversed?b.target.cell:b.source.cell;
var c=this.layout.graph;
for(var C=0;
C<b.edges.length;
C++){var p=b.edges[C];
var k=this.layout.getVisibleTerminal(p,true);
var J=c.model.getTerminal(p,true);
var F=[];
var d=b.isReversed;
if(k!=A){d=!d;
}if(t!=null){var v=d?2:0;
var q=d?this.rankTopY[h]:this.rankBottomY[o];
var u=t[D*4+1+v];
if(d){u=-u;
}q+=u;
var s=t[D*4+v];
var J=c.model.getTerminal(p,true);
if(this.layout.isPort(J)&&c.model.getParent(J)==k){var g=c.view.getState(J);
if(g!=null){s=g.x;
}else{s=k.geometry.x+b.source.width*J.geometry.x;
}}if(this.orientation==mxConstants.DIRECTION_NORTH||this.orientation==mxConstants.DIRECTION_SOUTH){F.push(new mxPoint(s,q));
if(this.edgeStyle==mxHierarchicalEdgeStyle.CURVE){F.push(new mxPoint(s,q+u));
}}else{F.push(new mxPoint(q,s));
if(this.edgeStyle==mxHierarchicalEdgeStyle.CURVE){F.push(new mxPoint(q+u,s));
}}}var r=b.x.length-1;
var a=-1;
var e=-1;
var m=b.maxRank-1;
if(d){r=0;
a=b.x.length;
e=1;
m=b.minRank+1;
}for(var B=r;
(b.maxRank!=b.minRank)&&B!=a;
B+=e){var H=b.x[B]+E;
var w=(this.rankTopY[m]+this.rankBottomY[m+1])/2;
var n=(this.rankTopY[m-1]+this.rankBottomY[m])/2;
if(d){var G=w;
w=n;
n=G;
}if(this.orientation==mxConstants.DIRECTION_NORTH||this.orientation==mxConstants.DIRECTION_SOUTH){F.push(new mxPoint(H,w));
F.push(new mxPoint(H,n));
}else{F.push(new mxPoint(w,H));
F.push(new mxPoint(n,H));
}this.limitX=Math.max(this.limitX,H);
m+=e;
}if(t!=null){var v=d?2:0;
var f=d?this.rankBottomY[o]:this.rankTopY[h];
var u=t[D*4+3-v];
if(d){u=-u;
}var q=f-u;
var s=t[D*4+2-v];
var l=c.model.getTerminal(p,false);
var z=this.layout.getVisibleTerminal(p,false);
if(this.layout.isPort(l)&&c.model.getParent(l)==z){var g=c.view.getState(l);
if(g!=null){s=g.x;
}else{s=z.geometry.x+b.target.width*l.geometry.x;
}}if(this.orientation==mxConstants.DIRECTION_NORTH||this.orientation==mxConstants.DIRECTION_SOUTH){if(this.edgeStyle==mxHierarchicalEdgeStyle.CURVE){F.push(new mxPoint(s,q-u));
}F.push(new mxPoint(s,q));
}else{if(this.edgeStyle==mxHierarchicalEdgeStyle.CURVE){F.push(new mxPoint(q-u,s));
}F.push(new mxPoint(q,s));
}}if(b.isReversed){this.processReversedEdge(b,p);
}this.layout.setEdgePoints(p,F);
if(E==0){E=this.parallelEdgeSpacing;
}else{if(E>0){E=-E;
}else{E=-E+this.parallelEdgeSpacing;
}}D++;
}b.temp[0]=101207;
}};
mxCoordinateAssignment.prototype.setVertexLocation=function(b){var a=b.cell;
var d=b.x[0]-b.width/2;
var c=b.y[0]-b.height/2;
this.rankTopY[b.minRank]=Math.min(this.rankTopY[b.minRank],c);
this.rankBottomY[b.minRank]=Math.max(this.rankBottomY[b.minRank],c+b.height);
if(this.orientation==mxConstants.DIRECTION_NORTH||this.orientation==mxConstants.DIRECTION_SOUTH){this.layout.setVertexLocation(a,d,c);
}else{this.layout.setVertexLocation(a,c,d);
}this.limitX=Math.max(this.limitX,d+b.width);
};
mxCoordinateAssignment.prototype.processReversedEdge=function(b,a){};
function WeightedCellSorter(a,b){this.cell=a;
this.weightedValue=b;
}WeightedCellSorter.prototype.weightedValue=0;
WeightedCellSorter.prototype.nudge=false;
WeightedCellSorter.prototype.visited=false;
WeightedCellSorter.prototype.rankIndex=null;
WeightedCellSorter.prototype.cell=null;
WeightedCellSorter.prototype.compare=function(d,c){if(d!=null&&c!=null){if(c.weightedValue>d.weightedValue){return -1;
}else{if(c.weightedValue<d.weightedValue){return 1;
}else{if(c.nudge){return -1;
}else{return 1;
}}}}else{return 0;
}};
function mxHierarchicalLayout(c,a,b){mxGraphLayout.call(this,c);
this.orientation=(a!=null)?a:mxConstants.DIRECTION_NORTH;
this.deterministic=(b!=null)?b:true;
}mxHierarchicalLayout.prototype=new mxGraphLayout();
mxHierarchicalLayout.prototype.constructor=mxHierarchicalLayout;
mxHierarchicalLayout.prototype.roots=null;
mxHierarchicalLayout.prototype.resizeParent=false;
mxHierarchicalLayout.prototype.moveParent=false;
mxHierarchicalLayout.prototype.parentBorder=0;
mxHierarchicalLayout.prototype.intraCellSpacing=30;
mxHierarchicalLayout.prototype.interRankCellSpacing=100;
mxHierarchicalLayout.prototype.interHierarchySpacing=60;
mxHierarchicalLayout.prototype.parallelEdgeSpacing=10;
mxHierarchicalLayout.prototype.orientation=mxConstants.DIRECTION_NORTH;
mxHierarchicalLayout.prototype.fineTuning=true;
mxHierarchicalLayout.prototype.tightenToSource=true;
mxHierarchicalLayout.prototype.disableEdgeStyle=true;
mxHierarchicalLayout.prototype.traverseAncestors=true;
mxHierarchicalLayout.prototype.model=null;
mxHierarchicalLayout.prototype.edgesCache=null;
mxHierarchicalLayout.prototype.getModel=function(){return this.model;
};
mxHierarchicalLayout.prototype.execute=function(d,a){this.parent=d;
var b=this.graph.model;
this.edgesCache=new Object();
if(a!=null&&typeof a!=="array"){a=[a];
}if(a==null&&d==null){return;
}if(a!=null&&d!=null){var e=[];
for(var c=0;
c<a.length;
c++){if(b.isAncestor(d,a[c])){e.push(a[c]);
}}this.roots=e;
}else{this.roots=a;
}b.beginUpdate();
try{this.run(d);
if(this.resizeParent&&!this.graph.isCellCollapsed(d)){this.graph.updateGroupBounds([d],this.parentBorder,this.moveParent);
}}finally{b.endUpdate();
}};
mxHierarchicalLayout.prototype.findRoots=function(o,l){var q=[];
if(o!=null&&l!=null){var f=this.graph.model;
var d=null;
var m=-100000;
for(var e in l){var p=l[e];
if(f.isVertex(p)&&this.graph.isCellVisible(p)){var b=this.getEdges(p);
var h=0;
var g=0;
for(var c=0;
c<b.length;
c++){var a=this.getVisibleTerminal(b[c],true);
if(a==p){h++;
}else{g++;
}}if(g==0&&h>0){q.push(p);
}var n=h-g;
if(n>m){m=n;
d=p;
}}}if(q.length==0&&d!=null){q.push(d);
}}return q;
};
mxHierarchicalLayout.prototype.getEdges=function(l){var h=mxCellPath.create(l);
if(this.edgesCache[h]!=null){return this.edgesCache[h];
}var g=this.graph.model;
var c=[];
var f=this.graph.isCellCollapsed(l);
var d=g.getChildCount(l);
for(var e=0;
e<d;
e++){var b=g.getChildAt(l,e);
if(this.isPort(b)){c=c.concat(g.getEdges(b,true,true));
}else{if(f||!this.graph.isCellVisible(b)){c=c.concat(g.getEdges(b,true,true));
}}}c=c.concat(g.getEdges(l,true,true));
var m=[];
for(var e=0;
e<c.length;
e++){var a=this.getVisibleTerminal(c[e],true);
var k=this.getVisibleTerminal(c[e],false);
if((a==k)||((a!=k)&&((k==l&&(this.parent==null||this.graph.isValidAncestor(a,this.parent,this.traverseAncestors)))||(a==l&&(this.parent==null||this.graph.isValidAncestor(k,this.parent,this.traverseAncestors)))))){m.push(c[e]);
}}this.edgesCache[h]=m;
return m;
};
mxHierarchicalLayout.prototype.getVisibleTerminal=function(b,d){var c=this.graph.view.getState(b);
var a=(c!=null)?c.getVisibleTerminal(d):this.graph.view.getVisibleTerminal(b,d);
if(this.isPort(a)){a=this.graph.model.getParent(a);
}return a;
};
mxHierarchicalLayout.prototype.run=function(l){var f=[];
var d=[];
if(this.roots==null&&l!=null){var k=Object();
this.filterDescendants(l,k);
this.roots=[];
var b=true;
for(var m in k){if(k[m]!=null){b=false;
break;
}}while(!b){var a=this.findRoots(l,k);
for(var h=0;
h<a.length;
h++){var c=[];
f.push(c);
this.traverse(a[h],true,null,d,c,f,k);
}for(var h=0;
h<a.length;
h++){this.roots.push(a[h]);
}b=true;
for(var m in k){if(k[m]!=null){b=false;
break;
}}}}else{for(var h=0;
h<this.roots.length;
h++){var c=[];
f.push(c);
this.traverse(this.roots[h],true,null,d,c,f,null);
}}var e=0;
for(var h=0;
h<f.length;
h++){var c=f[h];
var g=[];
for(var m in c){g.push(c[m]);
}this.model=new mxGraphHierarchyModel(this,g,this.roots,l,this.tightenToSource);
this.cycleStage(l);
this.layeringStage();
this.crossingStage(l);
e=this.placementStage(e,l);
}};
mxHierarchicalLayout.prototype.filterDescendants=function(b,a){var d=this.graph.model;
if(d.isVertex(b)&&b!=this.parent&&this.graph.isCellVisible(b)){a[mxCellPath.create(b)]=b;
}if(this.traverseAncestors||b==this.parent&&this.graph.isCellVisible(b)){var c=d.getChildCount(b);
for(var e=0;
e<c;
e++){var f=d.getChildAt(b,e);
if(!this.isPort(f)){this.filterDescendants(f,a);
}}}};
mxHierarchicalLayout.prototype.isPort=function(a){if(a.geometry.relative){return true;
}return false;
};
mxHierarchicalLayout.prototype.getEdgesBetween=function(f,g,e){e=(e!=null)?e:false;
var c=this.getEdges(f);
var a=[];
for(var d=0;
d<c.length;
d++){var h=this.getVisibleTerminal(c[d],true);
var b=this.getVisibleTerminal(c[d],false);
if((h==f&&b==g)||(!e&&h==g&&b==f)){a.push(c[d]);
}}return a;
};
mxHierarchicalLayout.prototype.traverse=function(l,c,b,a,f,e,m){if(l!=null&&a!=null){var p=mxCellPath.create(l);
if((a[p]==null)&&(m==null?true:m[p]!=null)){if(f[p]==null){f[p]=l;
}if(a[p]==null){a[p]=l;
}if(m!==null){delete m[p];
}var d=this.getEdges(l);
for(var g=0;
g<d.length;
g++){var n=this.getVisibleTerminal(d[g],true)==l;
if(!c||n){var h=this.getVisibleTerminal(d[g],!n);
f=this.traverse(h,c,d[g],a,f,e,m);
}}}else{if(f[p]==null){for(var g=0;
g<e.length;
g++){var k=e[g];
if(k[p]!=null){for(var o in f){k[o]=f[o];
}e.pop();
return k;
}}}}}return f;
};
mxHierarchicalLayout.prototype.cycleStage=function(b){var a=new mxMinimumCycleRemover(this);
a.execute(b);
};
mxHierarchicalLayout.prototype.layeringStage=function(){this.model.initialRank();
this.model.fixRanks();
};
mxHierarchicalLayout.prototype.crossingStage=function(a){var b=new mxMedianHybridCrossingReduction(this);
b.execute(a);
};
mxHierarchicalLayout.prototype.placementStage=function(a,c){var b=new mxCoordinateAssignment(this,this.intraCellSpacing,this.interRankCellSpacing,this.orientation,a,this.parallelEdgeSpacing);
b.fineTuning=this.fineTuning;
b.execute(c);
return b.limitX+this.interHierarchySpacing;
};
function mxGraphModel(a){this.currentEdit=this.createUndoableEdit();
if(a!=null){this.setRoot(a);
}else{this.clear();
}}mxGraphModel.prototype=new mxEventSource();
mxGraphModel.prototype.constructor=mxGraphModel;
mxGraphModel.prototype.root=null;
mxGraphModel.prototype.cells=null;
mxGraphModel.prototype.maintainEdgeParent=true;
mxGraphModel.prototype.createIds=true;
mxGraphModel.prototype.prefix="";
mxGraphModel.prototype.postfix="";
mxGraphModel.prototype.nextId=0;
mxGraphModel.prototype.currentEdit=null;
mxGraphModel.prototype.updateLevel=0;
mxGraphModel.prototype.endingUpdate=false;
mxGraphModel.prototype.clear=function(){this.setRoot(this.createRoot());
};
mxGraphModel.prototype.isCreateIds=function(){return this.createIds;
};
mxGraphModel.prototype.setCreateIds=function(a){this.createIds=a;
};
mxGraphModel.prototype.createRoot=function(){var a=new mxCell();
a.insert(new mxCell());
return a;
};
mxGraphModel.prototype.getCell=function(a){return(this.cells!=null)?this.cells[a]:null;
};
mxGraphModel.prototype.filterCells=function(b,d){var a=null;
if(b!=null){a=[];
for(var c=0;
c<b.length;
c++){if(d(b[c])){a.push(b[c]);
}}}return a;
};
mxGraphModel.prototype.getDescendants=function(a){return this.filterDescendants(null,a);
};
mxGraphModel.prototype.filterDescendants=function(e,d){var a=[];
d=d||this.getRoot();
if(e==null||e(d)){a.push(d);
}var b=this.getChildCount(d);
for(var c=0;
c<b;
c++){var f=this.getChildAt(d,c);
a=a.concat(this.filterDescendants(e,f));
}return a;
};
mxGraphModel.prototype.getRoot=function(a){var b=a||this.root;
if(a!=null){while(a!=null){b=a;
a=this.getParent(a);
}}return b;
};
mxGraphModel.prototype.setRoot=function(a){this.execute(new mxRootChange(this,a));
return a;
};
mxGraphModel.prototype.rootChanged=function(a){var b=this.root;
this.root=a;
this.nextId=0;
this.cells=null;
this.cellAdded(a);
return b;
};
mxGraphModel.prototype.isRoot=function(a){return a!=null&&this.root==a;
};
mxGraphModel.prototype.isLayer=function(a){return this.isRoot(this.getParent(a));
};
mxGraphModel.prototype.isAncestor=function(a,b){while(b!=null&&b!=a){b=this.getParent(b);
}return b==a;
};
mxGraphModel.prototype.contains=function(a){return this.isAncestor(this.root,a);
};
mxGraphModel.prototype.getParent=function(a){return(a!=null)?a.getParent():null;
};
mxGraphModel.prototype.add=function(b,d,a){if(d!=b&&b!=null&&d!=null){if(a==null){a=this.getChildCount(b);
}var c=b!=this.getParent(d);
this.execute(new mxChildChange(this,b,d,a));
if(this.maintainEdgeParent&&c){this.updateEdgeParents(d);
}}return d;
};
mxGraphModel.prototype.cellAdded=function(a){if(a!=null){if(a.getId()==null&&this.createIds){a.setId(this.createId(a));
}if(a.getId()!=null){var d=this.getCell(a.getId());
if(d!=a){while(d!=null){a.setId(this.createId(a));
d=this.getCell(a.getId());
}if(this.cells==null){this.cells=new Object();
}this.cells[a.getId()]=a;
}}if(mxUtils.isNumeric(a.getId())){this.nextId=Math.max(this.nextId,a.getId());
}var b=this.getChildCount(a);
for(var c=0;
c<b;
c++){this.cellAdded(this.getChildAt(a,c));
}}};
mxGraphModel.prototype.createId=function(a){var b=this.nextId;
this.nextId++;
return this.prefix+b+this.postfix;
};
mxGraphModel.prototype.updateEdgeParents=function(a,b){b=b||this.getRoot(a);
var d=this.getChildCount(a);
for(var e=0;
e<d;
e++){var h=this.getChildAt(a,e);
this.updateEdgeParents(h,b);
}var g=this.getEdgeCount(a);
var c=[];
for(var e=0;
e<g;
e++){c.push(this.getEdgeAt(a,e));
}for(var e=0;
e<c.length;
e++){var f=c[e];
if(this.isAncestor(b,f)){this.updateEdgeParent(f,b);
}}};
mxGraphModel.prototype.updateEdgeParent=function(b,g){var a=this.getTerminal(b,true);
var d=this.getTerminal(b,false);
var h=null;
while(a!=null&&!this.isEdge(a)&&a.geometry!=null&&a.geometry.relative){a=this.getParent(a);
}while(d!=null&&!this.isEdge(d)&&d.geometry!=null&&d.geometry.relative){d=this.getParent(d);
}if(this.isAncestor(g,a)&&this.isAncestor(g,d)){if(a==d){h=this.getParent(a);
}else{h=this.getNearestCommonAncestor(a,d);
}if(h!=null&&(this.getParent(h)!=this.root||this.isAncestor(h,b))&&this.getParent(b)!=h){var c=this.getGeometry(b);
if(c!=null){var f=this.getOrigin(this.getParent(b));
var e=this.getOrigin(h);
var k=e.x-f.x;
var i=e.y-f.y;
c=c.clone();
c.translate(-k,-i);
this.setGeometry(b,c);
}this.add(h,b,this.getChildCount(h));
}}};
mxGraphModel.prototype.getOrigin=function(b){var a=null;
if(b!=null){a=this.getOrigin(this.getParent(b));
if(!this.isEdge(b)){var c=this.getGeometry(b);
if(c!=null){a.x+=c.x;
a.y+=c.y;
}}}else{a=new mxPoint();
}return a;
};
mxGraphModel.prototype.getNearestCommonAncestor=function(c,b){if(c!=null&&b!=null){var g=mxCellPath.create(b);
if(g!=null&&g.length>0){var a=c;
var f=mxCellPath.create(a);
if(g.length<f.length){a=b;
var d=f;
f=g;
g=d;
}while(a!=null){var e=this.getParent(a);
if(g.indexOf(f+mxCellPath.PATH_SEPARATOR)==0&&e!=null){return a;
}f=mxCellPath.getParentPath(f);
a=e;
}}}return null;
};
mxGraphModel.prototype.remove=function(a){if(a==this.root){this.setRoot(null);
}else{if(this.getParent(a)!=null){this.execute(new mxChildChange(this,null,a));
}}return a;
};
mxGraphModel.prototype.cellRemoved=function(a){if(a!=null&&this.cells!=null){var b=this.getChildCount(a);
for(var c=b-1;
c>=0;
c--){this.cellRemoved(this.getChildAt(a,c));
}if(this.cells!=null&&a.getId()!=null){delete this.cells[a.getId()];
}}};
mxGraphModel.prototype.parentForCellChanged=function(a,c,b){var d=this.getParent(a);
if(c!=null){if(c!=d||d.getIndex(a)!=b){c.insert(a,b);
}}else{if(d!=null){var e=d.getIndex(a);
d.remove(e);
}}if(!this.contains(d)&&c!=null){this.cellAdded(a);
}else{if(c==null){this.cellRemoved(a);
}}return d;
};
mxGraphModel.prototype.getChildCount=function(a){return(a!=null)?a.getChildCount():0;
};
mxGraphModel.prototype.getChildAt=function(a,b){return(a!=null)?a.getChildAt(b):null;
};
mxGraphModel.prototype.getChildren=function(a){return(a!=null)?a.children:null;
};
mxGraphModel.prototype.getChildVertices=function(a){return this.getChildCells(a,true,false);
};
mxGraphModel.prototype.getChildEdges=function(a){return this.getChildCells(a,false,true);
};
mxGraphModel.prototype.getChildCells=function(f,d,c){d=(d!=null)?d:false;
c=(c!=null)?c:false;
var b=this.getChildCount(f);
var a=[];
for(var e=0;
e<b;
e++){var g=this.getChildAt(f,e);
if((!c&&!d)||(c&&this.isEdge(g))||(d&&this.isVertex(g))){a.push(g);
}}return a;
};
mxGraphModel.prototype.getTerminal=function(b,a){return(b!=null)?b.getTerminal(a):null;
};
mxGraphModel.prototype.setTerminal=function(d,c,b){var a=c!=this.getTerminal(d,b);
this.execute(new mxTerminalChange(this,d,c,b));
if(this.maintainEdgeParent&&a){this.updateEdgeParent(d,this.getRoot());
}return c;
};
mxGraphModel.prototype.setTerminals=function(a,b,c){this.beginUpdate();
try{this.setTerminal(a,b,true);
this.setTerminal(a,c,false);
}finally{this.endUpdate();
}};
mxGraphModel.prototype.terminalForCellChanged=function(d,b,a){var c=this.getTerminal(d,a);
if(b!=null){b.insertEdge(d,a);
}else{if(c!=null){c.removeEdge(d,a);
}}return c;
};
mxGraphModel.prototype.getEdgeCount=function(a){return(a!=null)?a.getEdgeCount():0;
};
mxGraphModel.prototype.getEdgeAt=function(a,b){return(a!=null)?a.getEdgeAt(b):null;
};
mxGraphModel.prototype.getDirectedEdgeCount=function(a,b,f){var e=0;
var g=this.getEdgeCount(a);
for(var c=0;
c<g;
c++){var d=this.getEdgeAt(a,c);
if(d!=f&&this.getTerminal(d,b)==a){e++;
}}return e;
};
mxGraphModel.prototype.getConnections=function(a){return this.getEdges(a,true,true,false);
};
mxGraphModel.prototype.getIncomingEdges=function(a){return this.getEdges(a,true,false,false);
};
mxGraphModel.prototype.getOutgoingEdges=function(a){return this.getEdges(a,false,true,false);
};
mxGraphModel.prototype.getEdges=function(k,e,g,d){e=(e!=null)?e:true;
g=(g!=null)?g:true;
d=(d!=null)?d:true;
var b=this.getEdgeCount(k);
var l=[];
for(var f=0;
f<b;
f++){var c=this.getEdgeAt(k,f);
var a=this.getTerminal(c,true);
var h=this.getTerminal(c,false);
if((d&&a==h)||((a!=h)&&((e&&h==k)||(g&&a==k)))){l.push(c);
}}return l;
};
mxGraphModel.prototype.getEdgesBetween=function(c,n,f){f=(f!=null)?f:false;
var h=this.getEdgeCount(c);
var g=this.getEdgeCount(n);
var m=c;
var b=h;
if(g<h){b=g;
m=n;
}var p=[];
for(var k=0;
k<b;
k++){var e=this.getEdgeAt(m,k);
var a=this.getTerminal(e,true);
var d=this.getTerminal(e,false);
var l=(a==c)&&(d==n);
var o=(d==c)&&(a==n);
if(l||(!f&&o)){p.push(e);
}}return p;
};
mxGraphModel.prototype.getOpposites=function(b,e,c,a){c=(c!=null)?c:true;
a=(a!=null)?a:true;
var h=[];
if(b!=null){for(var d=0;
d<b.length;
d++){var f=this.getTerminal(b[d],true);
var g=this.getTerminal(b[d],false);
if(f==e&&g!=null&&g!=e&&a){h.push(g);
}else{if(g==e&&f!=null&&f!=e&&c){h.push(f);
}}}}return h;
};
mxGraphModel.prototype.getTopmostCells=function(c){var e=[];
for(var d=0;
d<c.length;
d++){var a=c[d];
var b=true;
var f=this.getParent(a);
while(f!=null){if(mxUtils.indexOf(c,f)>=0){b=false;
break;
}f=this.getParent(f);
}if(b){e.push(a);
}}return e;
};
mxGraphModel.prototype.isVertex=function(a){return(a!=null)?a.isVertex():false;
};
mxGraphModel.prototype.isEdge=function(a){return(a!=null)?a.isEdge():false;
};
mxGraphModel.prototype.isConnectable=function(a){return(a!=null)?a.isConnectable():false;
};
mxGraphModel.prototype.getValue=function(a){return(a!=null)?a.getValue():null;
};
mxGraphModel.prototype.setValue=function(a,b){this.execute(new mxValueChange(this,a,b));
return b;
};
mxGraphModel.prototype.valueForCellChanged=function(a,b){return a.valueChanged(b);
};
mxGraphModel.prototype.getGeometry=function(a,b){return(a!=null)?a.getGeometry():null;
};
mxGraphModel.prototype.setGeometry=function(a,b){if(b!=this.getGeometry(a)){this.execute(new mxGeometryChange(this,a,b));
}return b;
};
mxGraphModel.prototype.geometryForCellChanged=function(a,c){var b=this.getGeometry(a);
a.setGeometry(c);
return b;
};
mxGraphModel.prototype.getStyle=function(a){return(a!=null)?a.getStyle():null;
};
mxGraphModel.prototype.setStyle=function(a,b){if(b!=this.getStyle(a)){this.execute(new mxStyleChange(this,a,b));
}return b;
};
mxGraphModel.prototype.styleForCellChanged=function(a,b){var c=this.getStyle(a);
a.setStyle(b);
return c;
};
mxGraphModel.prototype.isCollapsed=function(a){return(a!=null)?a.isCollapsed():false;
};
mxGraphModel.prototype.setCollapsed=function(a,b){if(b!=this.isCollapsed(a)){this.execute(new mxCollapseChange(this,a,b));
}return b;
};
mxGraphModel.prototype.collapsedStateForCellChanged=function(a,c){var b=this.isCollapsed(a);
a.setCollapsed(c);
return b;
};
mxGraphModel.prototype.isVisible=function(a){return(a!=null)?a.isVisible():false;
};
mxGraphModel.prototype.setVisible=function(a,b){if(b!=this.isVisible(a)){this.execute(new mxVisibleChange(this,a,b));
}return b;
};
mxGraphModel.prototype.visibleStateForCellChanged=function(a,c){var b=this.isVisible(a);
a.setVisible(c);
return b;
};
mxGraphModel.prototype.execute=function(a){a.execute();
this.beginUpdate();
this.currentEdit.add(a);
this.fireEvent(new mxEventObject(mxEvent.EXECUTE,"change",a));
this.fireEvent(new mxEventObject(mxEvent.EXECUTED,"change",a));
this.endUpdate();
};
mxGraphModel.prototype.beginUpdate=function(){this.updateLevel++;
this.fireEvent(new mxEventObject(mxEvent.BEGIN_UPDATE));
if(this.updateLevel==1){this.fireEvent(new mxEventObject(mxEvent.START_EDIT));
}};
mxGraphModel.prototype.endUpdate=function(){this.updateLevel--;
if(this.updateLevel==0){this.fireEvent(new mxEventObject(mxEvent.END_EDIT));
}if(!this.endingUpdate){this.endingUpdate=this.updateLevel==0;
this.fireEvent(new mxEventObject(mxEvent.END_UPDATE,"edit",this.currentEdit));
try{if(this.endingUpdate&&!this.currentEdit.isEmpty()){this.fireEvent(new mxEventObject(mxEvent.BEFORE_UNDO,"edit",this.currentEdit));
var a=this.currentEdit;
this.currentEdit=this.createUndoableEdit();
a.notify();
this.fireEvent(new mxEventObject(mxEvent.UNDO,"edit",a));
}}finally{this.endingUpdate=false;
}}};
mxGraphModel.prototype.createUndoableEdit=function(){var a=new mxUndoableEdit(this,true);
a.notify=function(){a.source.fireEvent(new mxEventObject(mxEvent.CHANGE,"edit",a,"changes",a.changes));
a.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,"edit",a,"changes",a.changes));
};
return a;
};
mxGraphModel.prototype.mergeChildren=function(g,f,b){b=(b!=null)?b:true;
this.beginUpdate();
try{var c=new Object();
this.mergeChildrenImpl(g,f,b,c);
for(var e in c){var a=c[e];
var d=this.getTerminal(a,true);
if(d!=null){d=c[mxCellPath.create(d)];
this.setTerminal(a,d,true);
}d=this.getTerminal(a,false);
if(d!=null){d=c[mxCellPath.create(d)];
this.setTerminal(a,d,false);
}}}finally{this.endUpdate();
}};
mxGraphModel.prototype.mergeChildrenImpl=function(h,k,d,a){this.beginUpdate();
try{var c=h.getChildCount();
for(var e=0;
e<c;
e++){var l=h.getChildAt(e);
if(typeof(l.getId)=="function"){var b=l.getId();
var f=(b!=null&&(!this.isEdge(l)||!d))?this.getCell(b):null;
if(f==null){var g=l.clone();
g.setId(b);
g.setTerminal(l.getTerminal(true),true);
g.setTerminal(l.getTerminal(false),false);
f=k.insert(g);
this.cellAdded(f);
}a[mxCellPath.create(l)]=f;
this.mergeChildrenImpl(l,f,d,a);
}}}finally{this.endUpdate();
}};
mxGraphModel.prototype.getParents=function(b){var a=[];
if(b!=null){var e=new Object();
for(var c=0;
c<b.length;
c++){var d=this.getParent(b[c]);
if(d!=null){var f=mxCellPath.create(d);
if(e[f]==null){e[f]=d;
a.push(d);
}}}}return a;
};
mxGraphModel.prototype.cloneCell=function(a){if(a!=null){return this.cloneCells([a],true)[0];
}return null;
};
mxGraphModel.prototype.cloneCells=function(c,a){var b=new Object();
var e=[];
for(var d=0;
d<c.length;
d++){if(c[d]!=null){e.push(this.cloneCellImpl(c[d],b,a));
}else{e.push(null);
}}for(var d=0;
d<e.length;
d++){if(e[d]!=null){this.restoreClone(e[d],c[d],b);
}}return e;
};
mxGraphModel.prototype.cloneCellImpl=function(b,d,a){var g=this.cellCloned(b);
d[mxObjectIdentity.get(b)]=g;
if(a){var c=this.getChildCount(b);
for(var e=0;
e<c;
e++){var f=this.cloneCellImpl(this.getChildAt(b,e),d,true);
g.insert(f);
}}return g;
};
mxGraphModel.prototype.cellCloned=function(a){return a.clone();
};
mxGraphModel.prototype.restoreClone=function(h,a,c){var f=this.getTerminal(a,true);
if(f!=null){var e=c[mxObjectIdentity.get(f)];
if(e!=null){e.insertEdge(h,true);
}}var g=this.getTerminal(a,false);
if(g!=null){var e=c[mxObjectIdentity.get(g)];
if(e!=null){e.insertEdge(h,false);
}}var b=this.getChildCount(h);
for(var d=0;
d<b;
d++){this.restoreClone(this.getChildAt(h,d),this.getChildAt(a,d),c);
}};
function mxRootChange(b,a){this.model=b;
this.root=a;
this.previous=a;
}mxRootChange.prototype.execute=function(){this.root=this.previous;
this.previous=this.model.rootChanged(this.previous);
};
function mxChildChange(b,c,d,a){this.model=b;
this.parent=c;
this.previous=c;
this.child=d;
this.index=a;
this.previousIndex=a;
}mxChildChange.prototype.execute=function(){var a=this.model.getParent(this.child);
var b=(a!=null)?a.getIndex(this.child):0;
if(this.previous==null){this.connect(this.child,false);
}a=this.model.parentForCellChanged(this.child,this.previous,this.previousIndex);
if(this.previous!=null){this.connect(this.child,true);
}this.parent=this.previous;
this.previous=a;
this.index=this.previousIndex;
this.previousIndex=b;
};
mxChildChange.prototype.connect=function(a,d){d=(d!=null)?d:true;
var e=a.getTerminal(true);
var f=a.getTerminal(false);
if(e!=null){if(d){this.model.terminalForCellChanged(a,e,true);
}else{this.model.terminalForCellChanged(a,null,true);
}}if(f!=null){if(d){this.model.terminalForCellChanged(a,f,false);
}else{this.model.terminalForCellChanged(a,null,false);
}}a.setTerminal(e,true);
a.setTerminal(f,false);
var b=this.model.getChildCount(a);
for(var c=0;
c<b;
c++){this.connect(this.model.getChildAt(a,c),d);
}};
function mxTerminalChange(b,a,c,d){this.model=b;
this.cell=a;
this.terminal=c;
this.previous=c;
this.source=d;
}mxTerminalChange.prototype.execute=function(){this.terminal=this.previous;
this.previous=this.model.terminalForCellChanged(this.cell,this.previous,this.source);
};
function mxValueChange(b,a,c){this.model=b;
this.cell=a;
this.value=c;
this.previous=c;
}mxValueChange.prototype.execute=function(){this.value=this.previous;
this.previous=this.model.valueForCellChanged(this.cell,this.previous);
};
function mxStyleChange(b,a,c){this.model=b;
this.cell=a;
this.style=c;
this.previous=c;
}mxStyleChange.prototype.execute=function(){this.style=this.previous;
this.previous=this.model.styleForCellChanged(this.cell,this.previous);
};
function mxGeometryChange(b,a,c){this.model=b;
this.cell=a;
this.geometry=c;
this.previous=c;
}mxGeometryChange.prototype.execute=function(){this.geometry=this.previous;
this.previous=this.model.geometryForCellChanged(this.cell,this.previous);
};
function mxCollapseChange(b,a,c){this.model=b;
this.cell=a;
this.collapsed=c;
this.previous=c;
}mxCollapseChange.prototype.execute=function(){this.collapsed=this.previous;
this.previous=this.model.collapsedStateForCellChanged(this.cell,this.previous);
};
function mxVisibleChange(b,a,c){this.model=b;
this.cell=a;
this.visible=c;
this.previous=c;
}mxVisibleChange.prototype.execute=function(){this.visible=this.previous;
this.previous=this.model.visibleStateForCellChanged(this.cell,this.previous);
};
function mxCellAttributeChange(a,b,c){this.cell=a;
this.attribute=b;
this.value=c;
this.previous=c;
}mxCellAttributeChange.prototype.execute=function(){var a=this.cell.getAttribute(this.attribute);
if(this.previous==null){this.cell.value.removeAttribute(this.attribute);
}else{this.cell.setAttribute(this.attribute,this.previous);
}this.previous=a;
};
function mxCell(b,c,a){this.value=b;
this.setGeometry(c);
this.setStyle(a);
if(this.onInit!=null){this.onInit();
}}mxCell.prototype.id=null;
mxCell.prototype.value=null;
mxCell.prototype.geometry=null;
mxCell.prototype.style=null;
mxCell.prototype.vertex=false;
mxCell.prototype.edge=false;
mxCell.prototype.connectable=true;
mxCell.prototype.visible=true;
mxCell.prototype.collapsed=false;
mxCell.prototype.parent=null;
mxCell.prototype.source=null;
mxCell.prototype.target=null;
mxCell.prototype.children=null;
mxCell.prototype.edges=null;
mxCell.prototype.mxTransient=["id","value","parent","source","target","children","edges"];
mxCell.prototype.getId=function(){return this.id;
};
mxCell.prototype.setId=function(a){this.id=a;
};
mxCell.prototype.getValue=function(){return this.value;
};
mxCell.prototype.setValue=function(a){this.value=a;
};
mxCell.prototype.valueChanged=function(b){var a=this.getValue();
this.setValue(b);
return a;
};
mxCell.prototype.getGeometry=function(){return this.geometry;
};
mxCell.prototype.setGeometry=function(a){this.geometry=a;
};
mxCell.prototype.getStyle=function(){return this.style;
};
mxCell.prototype.setStyle=function(a){this.style=a;
};
mxCell.prototype.isVertex=function(){return this.vertex;
};
mxCell.prototype.setVertex=function(a){this.vertex=a;
};
mxCell.prototype.isEdge=function(){return this.edge;
};
mxCell.prototype.setEdge=function(a){this.edge=a;
};
mxCell.prototype.isConnectable=function(){return this.connectable;
};
mxCell.prototype.setConnectable=function(a){this.connectable=a;
};
mxCell.prototype.isVisible=function(){return this.visible;
};
mxCell.prototype.setVisible=function(a){this.visible=a;
};
mxCell.prototype.isCollapsed=function(){return this.collapsed;
};
mxCell.prototype.setCollapsed=function(a){this.collapsed=a;
};
mxCell.prototype.getParent=function(){return this.parent;
};
mxCell.prototype.setParent=function(a){this.parent=a;
};
mxCell.prototype.getTerminal=function(a){return(a)?this.source:this.target;
};
mxCell.prototype.setTerminal=function(b,a){if(a){this.source=b;
}else{this.target=b;
}return b;
};
mxCell.prototype.getChildCount=function(){return(this.children==null)?0:this.children.length;
};
mxCell.prototype.getIndex=function(a){return mxUtils.indexOf(this.children,a);
};
mxCell.prototype.getChildAt=function(a){return(this.children==null)?null:this.children[a];
};
mxCell.prototype.insert=function(b,a){if(b!=null){if(a==null){a=this.getChildCount();
if(b.getParent()==this){a--;
}}b.removeFromParent();
b.setParent(this);
if(this.children==null){this.children=[];
this.children.push(b);
}else{this.children.splice(a,0,b);
}}return b;
};
mxCell.prototype.remove=function(a){var b=null;
if(this.children!=null&&a>=0){b=this.getChildAt(a);
if(b!=null){this.children.splice(a,1);
b.setParent(null);
}}return b;
};
mxCell.prototype.removeFromParent=function(){if(this.parent!=null){var a=this.parent.getIndex(this);
this.parent.remove(a);
}};
mxCell.prototype.getEdgeCount=function(){return(this.edges==null)?0:this.edges.length;
};
mxCell.prototype.getEdgeIndex=function(a){return mxUtils.indexOf(this.edges,a);
};
mxCell.prototype.getEdgeAt=function(a){return(this.edges==null)?null:this.edges[a];
};
mxCell.prototype.insertEdge=function(a,b){if(a!=null){a.removeFromTerminal(b);
a.setTerminal(this,b);
if(this.edges==null||a.getTerminal(!b)!=this||mxUtils.indexOf(this.edges,a)<0){if(this.edges==null){this.edges=[];
}this.edges.push(a);
}}return a;
};
mxCell.prototype.removeEdge=function(b,c){if(b!=null){if(b.getTerminal(!c)!=this&&this.edges!=null){var a=this.getEdgeIndex(b);
if(a>=0){this.edges.splice(a,1);
}}b.setTerminal(null,c);
}return b;
};
mxCell.prototype.removeFromTerminal=function(b){var a=this.getTerminal(b);
if(a!=null){a.removeEdge(this,b);
}};
mxCell.prototype.getAttribute=function(b,a){var c=this.getValue();
var d=(c!=null&&c.nodeType==mxConstants.NODETYPE_ELEMENT)?c.getAttribute(b):null;
return d||a;
};
mxCell.prototype.setAttribute=function(a,c){var b=this.getValue();
if(b!=null&&b.nodeType==mxConstants.NODETYPE_ELEMENT){b.setAttribute(a,c);
}};
mxCell.prototype.clone=function(){var a=mxUtils.clone(this,this.mxTransient);
a.setValue(this.cloneValue());
return a;
};
mxCell.prototype.cloneValue=function(){var a=this.getValue();
if(a!=null){if(typeof(a.clone)=="function"){a=a.clone();
}else{if(!isNaN(a.nodeType)){a=a.cloneNode(true);
}}}return a;
};
function mxGeometry(b,d,c,a){mxRectangle.call(this,b,d,c,a);
}mxGeometry.prototype=new mxRectangle();
mxGeometry.prototype.constructor=mxGeometry;
mxGeometry.prototype.TRANSLATE_CONTROL_POINTS=true;
mxGeometry.prototype.alternateBounds=null;
mxGeometry.prototype.sourcePoint=null;
mxGeometry.prototype.targetPoint=null;
mxGeometry.prototype.points=null;
mxGeometry.prototype.offset=null;
mxGeometry.prototype.relative=false;
mxGeometry.prototype.swap=function(){if(this.alternateBounds!=null){var a=new mxRectangle(this.x,this.y,this.width,this.height);
this.x=this.alternateBounds.x;
this.y=this.alternateBounds.y;
this.width=this.alternateBounds.width;
this.height=this.alternateBounds.height;
this.alternateBounds=a;
}};
mxGeometry.prototype.getTerminalPoint=function(a){return(a)?this.sourcePoint:this.targetPoint;
};
mxGeometry.prototype.setTerminalPoint=function(a,b){if(b){this.sourcePoint=a;
}else{this.targetPoint=a;
}return a;
};
mxGeometry.prototype.translate=function(b,a){var f=this.clone();
if(!this.relative){this.x+=b;
this.y+=a;
}if(this.sourcePoint!=null){this.sourcePoint.x+=b;
this.sourcePoint.y+=a;
}if(this.targetPoint!=null){this.targetPoint.x+=b;
this.targetPoint.y+=a;
}if(this.TRANSLATE_CONTROL_POINTS&&this.points!=null){var d=this.points.length;
for(var c=0;
c<d;
c++){var e=this.points[c];
if(e!=null){e.x+=b;
e.y+=a;
}}}};
var mxCellPath={PATH_SEPARATOR:".",create:function(b){var a="";
if(b!=null){var d=b.getParent();
while(d!=null){var c=d.getIndex(b);
a=c+mxCellPath.PATH_SEPARATOR+a;
b=d;
d=b.getParent();
}}var e=a.length;
if(e>1){a=a.substring(0,e-1);
}return a;
},getParentPath:function(b){if(b!=null){var a=b.lastIndexOf(mxCellPath.PATH_SEPARATOR);
if(a>=0){return b.substring(0,a);
}else{if(b.length>0){return"";
}}}return null;
},resolve:function(a,e){var c=a;
if(e!=null){var d=e.split(mxCellPath.PATH_SEPARATOR);
for(var b=0;
b<d.length;
b++){c=c.getChildAt(parseInt(d[b]));
}}return c;
},compare:function(g,f){var c=Math.min(g.length,f.length);
var a=0;
for(var b=0;
b<c;
b++){if(g[b]!=f[b]){if(g[b].length==0||f[b].length==0){a=(g[b]==f[b])?0:((g[b]>f[b])?1:-1);
}else{var e=parseInt(g[b]);
var d=parseInt(f[b]);
a=(e==d)?0:((e>d)?1:-1);
}break;
}}if(a==0){var e=g.length;
var d=f.length;
if(e!=d){a=(e>d)?1:-1;
}}return a;
}};
var mxPerimeter={RectanglePerimeter:function(a,i,h,c){var f=a.getCenterX();
var d=a.getCenterY();
var o=h.x-f;
var n=h.y-d;
var e=Math.atan2(n,o);
var b=new mxPoint(0,0);
var g=Math.PI;
var k=Math.PI/2;
var l=k-e;
var m=Math.atan2(a.height,a.width);
if(e<-g+m||e>g-m){b.x=a.x;
b.y=d-a.width*Math.tan(e)/2;
}else{if(e<-m){b.y=a.y;
b.x=f-a.height*Math.tan(l)/2;
}else{if(e<m){b.x=a.x+a.width;
b.y=d+a.width*Math.tan(e)/2;
}else{b.y=a.y+a.height;
b.x=f+a.height*Math.tan(l)/2;
}}}if(c){if(h.x>=a.x&&h.x<=a.x+a.width){b.x=h.x;
}else{if(h.y>=a.y&&h.y<=a.y+a.height){b.y=h.y;
}}if(h.x<a.x){b.x=a.x;
}else{if(h.x>a.x+a.width){b.x=a.x+a.width;
}}if(h.y<a.y){b.y=a.y;
}else{if(h.y>a.y+a.height){b.y=a.y+a.height;
}}}return b;
},EllipsePerimeter:function(m,G,A,l){var s=m.x;
var r=m.y;
var M=m.width/2;
var K=m.height/2;
var i=s+M;
var c=r+K;
var w=A.x;
var v=A.y;
var u=parseInt(w-i);
var t=parseInt(v-c);
if(u==0&&t!=0){return new mxPoint(i,c+K*t/Math.abs(t));
}else{if(u==0&&t==0){return new mxPoint(w,v);
}}if(l){if(v>=r&&v<=r+m.height){var L=v-c;
var N=Math.sqrt(M*M*(1-(L*L)/(K*K)))||0;
if(w<=s){N=-N;
}return new mxPoint(i+N,v);
}if(w>=s&&w<=s+m.width){var N=w-i;
var L=Math.sqrt(K*K*(1-(N*N)/(M*M)))||0;
if(v<=r){L=-L;
}return new mxPoint(w,c+L);
}}var J=t/u;
var E=c-J*i;
var I=M*M*J*J+K*K;
var H=-2*i*I;
var F=M*M*J*J*i*i+K*K*i*i-M*M*K*K;
var k=Math.sqrt(H*H-4*I*F);
var C=(-H+k)/(2*I);
var B=(-H-k)/(2*I);
var o=J*C+E;
var n=J*B+E;
var q=Math.sqrt(Math.pow((C-w),2)+Math.pow((o-v),2));
var p=Math.sqrt(Math.pow((B-w),2)+Math.pow((n-v),2));
var z=0;
var D=0;
if(q<p){z=C;
D=o;
}else{z=B;
D=n;
}return new mxPoint(z,D);
},RhombusPerimeter:function(a,k,g,b){var n=a.x;
var l=a.y;
var p=a.width;
var i=a.height;
var d=n+p/2;
var c=l+i/2;
var o=g.x;
var m=g.y;
if(d==o){if(c>m){return new mxPoint(d,l);
}else{return new mxPoint(d,l+i);
}}else{if(c==m){if(d>o){return new mxPoint(n,c);
}else{return new mxPoint(n+p,c);
}}}var f=d;
var e=c;
if(b){if(o>=n&&o<=n+p){f=o;
}else{if(m>=l&&m<=l+i){e=m;
}}}if(o<d){if(m<c){return mxUtils.intersection(o,m,f,e,d,l,n,c);
}else{return mxUtils.intersection(o,m,f,e,d,l+i,n,c);
}}else{if(m<c){return mxUtils.intersection(o,m,f,e,d,l,n+p,c);
}else{return mxUtils.intersection(o,m,f,e,d,l+i,n+p,c);
}}},TrianglePerimeter:function(k,A,u,f){var B=(A!=null)?A.style[mxConstants.STYLE_DIRECTION]:null;
var a=B==mxConstants.DIRECTION_NORTH||B==mxConstants.DIRECTION_SOUTH;
var n=k.x;
var m=k.y;
var q=k.width;
var z=k.height;
var c=n+q/2;
var b=m+z/2;
var g=new mxPoint(n,m);
var l=new mxPoint(n+q,b);
var d=new mxPoint(n,m+z);
if(B==mxConstants.DIRECTION_NORTH){g=d;
l=new mxPoint(c,m);
d=new mxPoint(n+q,m+z);
}else{if(B==mxConstants.DIRECTION_SOUTH){l=new mxPoint(c,m+z);
d=new mxPoint(n+q,m);
}else{if(B==mxConstants.DIRECTION_WEST){g=new mxPoint(n+q,m);
l=new mxPoint(n,b);
d=new mxPoint(n+q,m+z);
}}}var r=u.x-c;
var p=u.y-b;
var e=(a)?Math.atan2(r,p):Math.atan2(p,r);
var s=(a)?Math.atan2(q,z):Math.atan2(z,q);
var i=false;
if(B==mxConstants.DIRECTION_NORTH||B==mxConstants.DIRECTION_WEST){i=e>-s&&e<s;
}else{i=e<-Math.PI+s||e>Math.PI-s;
}var o=null;
if(i){if(f&&((a&&u.x>=g.x&&u.x<=d.x)||(!a&&u.y>=g.y&&u.y<=d.y))){if(a){o=new mxPoint(u.x,g.y);
}else{o=new mxPoint(g.x,u.y);
}}else{if(B==mxConstants.DIRECTION_NORTH){o=new mxPoint(n+q/2+z*Math.tan(e)/2,m+z);
}else{if(B==mxConstants.DIRECTION_SOUTH){o=new mxPoint(n+q/2-z*Math.tan(e)/2,m);
}else{if(B==mxConstants.DIRECTION_WEST){o=new mxPoint(n+q,m+z/2+q*Math.tan(e)/2);
}else{o=new mxPoint(n,m+z/2-q*Math.tan(e)/2);
}}}}}else{if(f){var v=new mxPoint(c,b);
if(u.y>=m&&u.y<=m+z){v.x=(a)?c:((B==mxConstants.DIRECTION_WEST)?n+q:n);
v.y=u.y;
}else{if(u.x>=n&&u.x<=n+q){v.x=u.x;
v.y=(!a)?b:((B==mxConstants.DIRECTION_NORTH)?m+z:m);
}}r=u.x-v.x;
p=u.y-v.y;
c=v.x;
b=v.y;
}if((a&&u.x<=n+q/2)||(!a&&u.y<=m+z/2)){o=mxUtils.intersection(u.x,u.y,c,b,g.x,g.y,l.x,l.y);
}else{o=mxUtils.intersection(u.x,u.y,c,b,l.x,l.y,d.x,d.y);
}}if(o==null){o=new mxPoint(c,b);
}return o;
}};
function mxPrintPreview(i,d,c,e,a,h,b,g,f){this.graph=i;
this.scale=(d!=null)?d:1/i.pageScale;
this.border=(e!=null)?e:0;
this.pageFormat=(c!=null)?c:i.pageFormat;
this.title=(g!=null)?g:"Printer-friendly version";
this.x0=(a!=null)?a:0;
this.y0=(h!=null)?h:0;
this.borderColor=b;
this.pageSelector=(f!=null)?f:true;
}mxPrintPreview.prototype.graph=null;
mxPrintPreview.prototype.pageFormat=null;
mxPrintPreview.prototype.scale=null;
mxPrintPreview.prototype.border=0;
mxPrintPreview.prototype.x0=0;
mxPrintPreview.prototype.y0=0;
mxPrintPreview.prototype.autoOrigin=true;
mxPrintPreview.prototype.printOverlays=false;
mxPrintPreview.prototype.borderColor=null;
mxPrintPreview.prototype.title=null;
mxPrintPreview.prototype.pageSelector=null;
mxPrintPreview.prototype.wnd=null;
mxPrintPreview.prototype.pageCount=0;
mxPrintPreview.prototype.getWindow=function(){return this.wnd;
};
mxPrintPreview.prototype.getDoctype=function(){return"";
};
mxPrintPreview.prototype.open=function(p){var s=this.graph.cellRenderer.initializeOverlay;
var t=null;
try{if(this.printOverlays){this.graph.cellRenderer.initializeOverlay=function(i,e){e.init(i.view.getDrawPane());
};
}if(this.wnd==null){this.wnd=window.open();
var E=this.wnd.document;
var u=this.getDoctype();
if(u!=null&&u.length>0){E.writeln(u);
}E.writeln("<html>");
E.writeln("<head>");
this.writeHead(E,p);
E.writeln("</head>");
E.writeln('<body class="mxPage">');
mxClient.link("stylesheet",mxClient.basePath+"/css/common.css",E);
if(mxClient.IS_VML){E.namespaces.add("v","urn:schemas-microsoft-com:vml");
E.namespaces.add("o","urn:schemas-microsoft-com:office:office");
var w=E.createStyleSheet();
w.cssText="v\\:*{behavior:url(#default#VML)}o\\:*{behavior:url(#default#VML)}";
mxClient.link("stylesheet",mxClient.basePath+"/css/explorer.css",E);
}var l=this.graph.getGraphBounds().clone();
var x=this.graph.getView().getScale();
var b=x/this.scale;
var d=this.graph.getView().getTranslate();
if(!this.autoOrigin){this.x0=-d.x*this.scale;
this.y0=-d.y*this.scale;
l.width+=l.x;
l.height+=l.y;
l.x=0;
l.y=0;
this.border=0;
}l.width/=b;
l.height/=b;
var c=this.pageFormat.width-(this.border*2);
var f=this.pageFormat.height-(this.border*2);
var h=Math.max(1,Math.ceil((l.width+this.x0)/c));
var D=Math.max(1,Math.ceil((l.height+this.y0)/f));
this.pageCount=h*D;
var k=mxUtils.bind(this,function(){if(this.pageSelector&&(D>1||h>1)){var e=this.createPageSelector(D,h);
E.body.appendChild(e);
if(mxClient.IS_IE){e.style.position="absolute";
var i=function(){e.style.top=(E.body.scrollTop+10)+"px";
};
mxEvent.addListener(this.wnd,"scroll",function(F){i();
});
mxEvent.addListener(this.wnd,"resize",function(F){i();
});
}}});
var q=null;
if(mxClient.IS_IE&&document.documentMode!=9){q=[];
var m=0;
var v=false;
var n=mxImageShape.prototype.scheduleUpdateAspect;
var g=mxImageShape.prototype.updateAspect;
var a=function(){if(v&&m==0){mxImageShape.prototype.scheduleUpdateAspect=n;
mxImageShape.prototype.updateAspect=g;
var e="";
for(var F=0;
F<q.length;
F++){e+=q[F].outerHTML;
q[F].parentNode.removeChild(q[F]);
if(F<q.length-1){e+="<hr/>";
}}E.body.innerHTML=e;
k();
}};
mxImageShape.prototype.scheduleUpdateAspect=function(){m++;
n.apply(this,arguments);
};
mxImageShape.prototype.updateAspect=function(){g.apply(this,arguments);
m--;
a();
};
}for(var z=0;
z<D;
z++){var o=z*f/this.scale-this.y0/this.scale+(l.y-d.y*x)/x;
for(var y=0;
y<h;
y++){if(this.wnd==null){return null;
}var r=y*c/this.scale-this.x0/this.scale+(l.x-d.x*x)/x;
var B=z*h+y+1;
t=this.renderPage(this.pageFormat.width,this.pageFormat.height,-r,-o,this.scale,B);
t.setAttribute("id","mxPage-"+B);
if(this.borderColor!=null){t.style.borderColor=this.borderColor;
t.style.borderStyle="solid";
t.style.borderWidth="1px";
}t.style.background="white";
if(z<D-1||y<h-1){t.style.pageBreakAfter="always";
}if(mxClient.IS_IE){E.writeln(t.outerHTML);
if(q!=null){q.push(t);
}else{t.parentNode.removeChild(t);
}}else{t.parentNode.removeChild(t);
E.body.appendChild(t);
}if(z<D-1||y<h-1){var C=E.createElement("hr");
C.className="mxPageBreak";
E.body.appendChild(C);
}}}E.writeln("</body>");
E.writeln("</html>");
E.close();
if(q!=null){v=true;
a();
}else{k();
}mxEvent.release(E.body);
}this.wnd.focus();
}catch(A){if(t!=null&&t.parentNode!=null){t.parentNode.removeChild(t);
}}finally{this.graph.cellRenderer.initializeOverlay=s;
}return this.wnd;
};
mxPrintPreview.prototype.writeHead=function(b,a){if(this.title!=null){b.writeln("<title>"+this.title+"</title>");
}b.writeln('<style type="text/css">');
b.writeln("@media print {");
b.writeln("  table.mxPageSelector { display: none; }");
b.writeln("  hr.mxPageBreak { display: none; }");
b.writeln("}");
b.writeln("@media screen {");
b.writeln("  table.mxPageSelector { position: fixed; right: 10px; top: 10px;font-family: Arial; font-size:10pt; border: solid 1px darkgray;background: white; border-collapse:collapse; }");
b.writeln("  table.mxPageSelector td { border: solid 1px gray; padding:4px; }");
b.writeln("  body.mxPage { background: gray; }");
b.writeln("}");
if(a!=null){b.writeln(a);
}b.writeln("</style>");
};
mxPrintPreview.prototype.createPageSelector=function(c,b){var k=this.wnd.document;
var m=k.createElement("table");
m.className="mxPageSelector";
m.setAttribute("border","0");
var f=k.createElement("tbody");
for(var e=0;
e<c;
e++){var n=k.createElement("tr");
for(var d=0;
d<b;
d++){var g=e*b+d+1;
var l=k.createElement("td");
if(!mxClient.IS_NS||mxClient.IS_SF||mxClient.IS_GC){var h=k.createElement("a");
h.setAttribute("href","#mxPage-"+g);
mxUtils.write(h,g,k);
l.appendChild(h);
}else{mxUtils.write(l,g,k);
}n.appendChild(l);
}f.appendChild(n);
}m.appendChild(f);
return m;
};
mxPrintPreview.prototype.getRoot=function(){var a=this.graph.view.currentRoot;
if(a==null){a=this.graph.getModel().getRoot();
}return a;
};
mxPrintPreview.prototype.renderPage=function(g,r,i,f,z,x){var o=document.createElement("div");
try{o.style.width=g+"px";
o.style.height=r+"px";
o.style.overflow="hidden";
o.style.pageBreakInside="avoid";
var y=document.createElement("div");
y.style.top=this.border+"px";
y.style.left=this.border+"px";
y.style.width=(g-2*this.border)+"px";
y.style.height=(r-2*this.border)+"px";
y.style.overflow="hidden";
if(this.graph.dialect==mxConstants.DIALECT_VML){y.style.position="absolute";
}o.appendChild(y);
document.body.appendChild(o);
var n=this.graph.getView();
var d=this.graph.container;
this.graph.container=y;
var a=n.getCanvas();
var v=n.getBackgroundPane();
var q=n.getDrawPane();
var k=n.getOverlayPane();
if(this.graph.dialect==mxConstants.DIALECT_SVG){n.createSvg();
}else{if(this.graph.dialect==mxConstants.DIALECT_VML){n.createVml();
}else{n.createHtml();
}}var c=n.isEventsEnabled();
n.setEventsEnabled(false);
var l=this.graph.isEnabled();
this.graph.setEnabled(false);
var m=n.getTranslate();
n.translate=new mxPoint(i,f);
var t=null;
try{var b=[this.getRoot()];
t=new mxTemporaryCellStates(n,z,b);
}finally{if(mxClient.IS_IE){n.overlayPane.innerHTML="";
}else{var u=y.firstChild;
while(u!=null){var p=u.nextSibling;
var A=u.nodeName.toLowerCase();
if(A=="svg"){u.setAttribute("width",parseInt(y.style.width));
u.setAttribute("height",parseInt(y.style.height));
}else{if(u.style.cursor!="default"&&A!="table"){u.parentNode.removeChild(u);
}}u=p;
}}n.overlayPane.parentNode.removeChild(n.overlayPane);
this.graph.setEnabled(l);
this.graph.container=d;
n.canvas=a;
n.backgroundPane=v;
n.drawPane=q;
n.overlayPane=k;
n.translate=m;
t.destroy();
n.setEventsEnabled(c);
}}catch(s){o.parentNode.removeChild(o);
o=null;
throw s;
}return o;
};
mxPrintPreview.prototype.print=function(){var a=this.open();
if(a!=null){a.print();
}};
mxPrintPreview.prototype.close=function(){if(this.wnd!=null){this.wnd.close();
this.wnd=null;
}};
function mxStylesheet(){this.styles=new Object();
this.putDefaultVertexStyle(this.createDefaultVertexStyle());
this.putDefaultEdgeStyle(this.createDefaultEdgeStyle());
}mxStylesheet.prototype.styles;
mxStylesheet.prototype.createDefaultVertexStyle=function(){var a=new Object();
a[mxConstants.STYLE_SHAPE]=mxConstants.SHAPE_RECTANGLE;
a[mxConstants.STYLE_PERIMETER]=mxPerimeter.RectanglePerimeter;
a[mxConstants.STYLE_VERTICAL_ALIGN]=mxConstants.ALIGN_MIDDLE;
a[mxConstants.STYLE_ALIGN]=mxConstants.ALIGN_CENTER;
a[mxConstants.STYLE_FILLCOLOR]="#C3D9FF";
a[mxConstants.STYLE_STROKECOLOR]="#6482B9";
a[mxConstants.STYLE_FONTCOLOR]="#774400";
return a;
};
mxStylesheet.prototype.createDefaultEdgeStyle=function(){var a=new Object();
a[mxConstants.STYLE_SHAPE]=mxConstants.SHAPE_CONNECTOR;
a[mxConstants.STYLE_ENDARROW]=mxConstants.ARROW_CLASSIC;
a[mxConstants.STYLE_VERTICAL_ALIGN]=mxConstants.ALIGN_MIDDLE;
a[mxConstants.STYLE_ALIGN]=mxConstants.ALIGN_CENTER;
a[mxConstants.STYLE_STROKECOLOR]="#6482B9";
a[mxConstants.STYLE_FONTCOLOR]="#446299";
return a;
};
mxStylesheet.prototype.putDefaultVertexStyle=function(a){this.putCellStyle("defaultVertex",a);
};
mxStylesheet.prototype.putDefaultEdgeStyle=function(a){this.putCellStyle("defaultEdge",a);
};
mxStylesheet.prototype.getDefaultVertexStyle=function(){return this.styles.defaultVertex;
};
mxStylesheet.prototype.getDefaultEdgeStyle=function(){return this.styles.defaultEdge;
};
mxStylesheet.prototype.putCellStyle=function(a,b){this.styles[a]=b;
};
mxStylesheet.prototype.getCellStyle=function(b,l){var a=l;
if(b!=null&&b.length>0){var c=b.split(";");
if(a!=null&&b.charAt(0)!=";"){a=mxUtils.clone(a);
}else{a=new Object();
}for(var d=0;
d<c.length;
d++){var e=c[d];
var g=e.indexOf("=");
if(g>=0){var k=e.substring(0,g);
var h=e.substring(g+1);
if(h==mxConstants.NONE){delete a[k];
}else{if(mxUtils.isNumeric(h)){a[k]=parseFloat(h);
}else{a[k]=h;
}}}else{var f=this.styles[e];
if(f!=null){for(var k in f){a[k]=f[k];
}}}}}return a;
};
function mxCellState(b,a,c){this.view=b;
this.cell=a;
this.style=c;
this.origin=new mxPoint();
this.absoluteOffset=new mxPoint();
}mxCellState.prototype=new mxRectangle();
mxCellState.prototype.constructor=mxCellState;
mxCellState.prototype.view=null;
mxCellState.prototype.cell=null;
mxCellState.prototype.style=null;
mxCellState.prototype.invalid=true;
mxCellState.prototype.invalidOrder=false;
mxCellState.prototype.orderChanged=false;
mxCellState.prototype.origin=null;
mxCellState.prototype.absolutePoints=null;
mxCellState.prototype.absoluteOffset=null;
mxCellState.prototype.visibleSourceState=null;
mxCellState.prototype.visibleTargetState=null;
mxCellState.prototype.terminalDistance=0;
mxCellState.prototype.length=0;
mxCellState.prototype.segments=null;
mxCellState.prototype.shape=null;
mxCellState.prototype.text=null;
mxCellState.prototype.getPerimeterBounds=function(b,c){b=b||0;
c=(c!=null)?c:new mxRectangle(this.x,this.y,this.width,this.height);
if(this.shape!=null&&this.shape.stencil!=null){var a=this.shape.stencil.computeAspect(this,c,null);
c.x=a.x;
c.y=a.y;
c.width=this.shape.stencil.w0*a.width;
c.height=this.shape.stencil.h0*a.height;
}if(b!=0){c.grow(b);
}return c;
};
mxCellState.prototype.setAbsoluteTerminalPoint=function(a,b){if(b){if(this.absolutePoints==null){this.absolutePoints=[];
}if(this.absolutePoints.length==0){this.absolutePoints.push(a);
}else{this.absolutePoints[0]=a;
}}else{if(this.absolutePoints==null){this.absolutePoints=[];
this.absolutePoints.push(null);
this.absolutePoints.push(a);
}else{if(this.absolutePoints.length==1){this.absolutePoints.push(a);
}else{this.absolutePoints[this.absolutePoints.length-1]=a;
}}}};
mxCellState.prototype.setCursor=function(a){if(this.shape!=null){this.shape.setCursor(a);
}if(this.text!=null){this.text.setCursor(a);
}};
mxCellState.prototype.getVisibleTerminal=function(b){var a=this.getVisibleTerminalState(b);
return(a!=null)?a.cell:null;
};
mxCellState.prototype.getVisibleTerminalState=function(a){return(a)?this.visibleSourceState:this.visibleTargetState;
};
mxCellState.prototype.setVisibleTerminalState=function(a,b){if(b){this.visibleSourceState=a;
}else{this.visibleTargetState=a;
}};
mxCellState.prototype.destroy=function(){this.view.graph.cellRenderer.destroy(this);
};
mxCellState.prototype.clone=function(){var b=new mxCellState(this.view,this.cell,this.style);
if(this.absolutePoints!=null){b.absolutePoints=[];
for(var a=0;
a<this.absolutePoints.length;
a++){b.absolutePoints[a]=this.absolutePoints[a].clone();
}}if(this.origin!=null){b.origin=this.origin.clone();
}if(this.absoluteOffset!=null){b.absoluteOffset=this.absoluteOffset.clone();
}if(this.boundingBox!=null){b.boundingBox=this.boundingBox.clone();
}b.terminalDistance=this.terminalDistance;
b.segments=this.segments;
b.length=this.length;
b.x=this.x;
b.y=this.y;
b.width=this.width;
b.height=this.height;
return b;
};
function mxGraphSelectionModel(a){this.graph=a;
this.cells=[];
}mxGraphSelectionModel.prototype=new mxEventSource();
mxGraphSelectionModel.prototype.constructor=mxGraphSelectionModel;
mxGraphSelectionModel.prototype.doneResource=(mxClient.language!="none")?"done":"";
mxGraphSelectionModel.prototype.updatingSelectionResource=(mxClient.language!="none")?"updatingSelection":"";
mxGraphSelectionModel.prototype.graph=null;
mxGraphSelectionModel.prototype.singleSelection=false;
mxGraphSelectionModel.prototype.isSingleSelection=function(){return this.singleSelection;
};
mxGraphSelectionModel.prototype.setSingleSelection=function(a){this.singleSelection=a;
};
mxGraphSelectionModel.prototype.isSelected=function(a){if(a!=null){return mxUtils.indexOf(this.cells,a)>=0;
}return false;
};
mxGraphSelectionModel.prototype.isEmpty=function(){return this.cells.length==0;
};
mxGraphSelectionModel.prototype.clear=function(){this.changeSelection(null,this.cells);
};
mxGraphSelectionModel.prototype.setCell=function(a){if(a!=null){this.setCells([a]);
}};
mxGraphSelectionModel.prototype.setCells=function(a){if(a!=null){if(this.singleSelection){a=[this.getFirstSelectableCell(a)];
}var c=[];
for(var b=0;
b<a.length;
b++){if(this.graph.isCellSelectable(a[b])){c.push(a[b]);
}}this.changeSelection(c,this.cells);
}};
mxGraphSelectionModel.prototype.getFirstSelectableCell=function(a){if(a!=null){for(var b=0;
b<a.length;
b++){if(this.graph.isCellSelectable(a[b])){return a[b];
}}}return null;
};
mxGraphSelectionModel.prototype.addCell=function(a){if(a!=null){this.addCells([a]);
}};
mxGraphSelectionModel.prototype.addCells=function(b){if(b!=null){var a=null;
if(this.singleSelection){a=this.cells;
b=[this.getFirstSelectableCell(b)];
}var d=[];
for(var c=0;
c<b.length;
c++){if(!this.isSelected(b[c])&&this.graph.isCellSelectable(b[c])){d.push(b[c]);
}}this.changeSelection(d,a);
}};
mxGraphSelectionModel.prototype.removeCell=function(a){if(a!=null){this.removeCells([a]);
}};
mxGraphSelectionModel.prototype.removeCells=function(a){if(a!=null){var c=[];
for(var b=0;
b<a.length;
b++){if(this.isSelected(a[b])){c.push(a[b]);
}}this.changeSelection(null,c);
}};
mxGraphSelectionModel.prototype.changeSelection=function(a,c){if((a!=null&&a.length>0&&a[0]!=null)||(c!=null&&c.length>0&&c[0]!=null)){var d=new mxSelectionChange(this,a,c);
d.execute();
var b=new mxUndoableEdit(this,false);
b.add(d);
this.fireEvent(new mxEventObject(mxEvent.UNDO,"edit",b));
}};
mxGraphSelectionModel.prototype.cellAdded=function(a){if(a!=null&&!this.isSelected(a)){this.cells.push(a);
}};
mxGraphSelectionModel.prototype.cellRemoved=function(a){if(a!=null){var b=mxUtils.indexOf(this.cells,a);
if(b>=0){this.cells.splice(b,1);
}}};
function mxSelectionChange(a,b,c){this.selectionModel=a;
this.added=(b!=null)?b.slice():null;
this.removed=(c!=null)?c.slice():null;
}mxSelectionChange.prototype.execute=function(){var c=mxLog.enter("mxSelectionChange.execute");
window.status=mxResources.get(this.selectionModel.updatingSelectionResource)||this.selectionModel.updatingSelectionResource;
if(this.removed!=null){for(var b=0;
b<this.removed.length;
b++){this.selectionModel.cellRemoved(this.removed[b]);
}}if(this.added!=null){for(var b=0;
b<this.added.length;
b++){this.selectionModel.cellAdded(this.added[b]);
}}var a=this.added;
this.added=this.removed;
this.removed=a;
window.status=mxResources.get(this.selectionModel.doneResource)||this.selectionModel.doneResource;
mxLog.leave("mxSelectionChange.execute",c);
this.selectionModel.fireEvent(new mxEventObject(mxEvent.CHANGE,"added",this.added,"removed",this.removed));
};
function mxCellEditor(a){this.graph=a;
}mxCellEditor.prototype.graph=null;
mxCellEditor.prototype.textarea=null;
mxCellEditor.prototype.editingCell=null;
mxCellEditor.prototype.trigger=null;
mxCellEditor.prototype.modified=false;
mxCellEditor.prototype.emptyLabelText="";
mxCellEditor.prototype.textNode="";
mxCellEditor.prototype.init=function(){this.textarea=document.createElement("textarea");
this.textarea.className="mxCellEditor";
this.textarea.style.position="absolute";
this.textarea.style.overflow="visible";
this.textarea.setAttribute("cols","20");
this.textarea.setAttribute("rows","4");
if(mxClient.IS_GC){this.textarea.style.resize="none";
}mxEvent.addListener(this.textarea,"blur",mxUtils.bind(this,function(a){this.focusLost();
}));
mxEvent.addListener(this.textarea,"keydown",mxUtils.bind(this,function(a){if(!mxEvent.isConsumed(a)){if(a.keyCode==113||(this.graph.isEnterStopsCellEditing()&&a.keyCode==13&&!mxEvent.isControlDown(a)&&!mxEvent.isShiftDown(a))){this.graph.stopEditing(false);
mxEvent.consume(a);
}else{if(a.keyCode==27){this.graph.stopEditing(true);
mxEvent.consume(a);
}else{if(this.clearOnChange){this.clearOnChange=false;
this.textarea.value="";
}this.setModified(true);
}}}}));
};
mxCellEditor.prototype.isModified=function(){return this.modified;
};
mxCellEditor.prototype.setModified=function(a){this.modified=a;
};
mxCellEditor.prototype.focusLost=function(){this.stopEditing(!this.graph.isInvokesStopCellEditing());
};
mxCellEditor.prototype.startEditing=function(m,c){if(this.textarea==null){this.init();
}this.stopEditing(true);
var b=this.graph.getView().getState(m);
if(b!=null){this.editingCell=m;
this.trigger=c;
this.textNode=null;
if(b.text!=null&&this.isHideLabel(b)){this.textNode=b.text.node;
this.textNode.style.visibility="hidden";
}var d=this.graph.getView().scale;
var n=mxUtils.getValue(b.style,mxConstants.STYLE_FONTSIZE,mxConstants.DEFAULT_FONTSIZE)*d;
var f=mxUtils.getValue(b.style,mxConstants.STYLE_FONTFAMILY,mxConstants.DEFAULT_FONTFAMILY);
var e=mxUtils.getValue(b.style,mxConstants.STYLE_FONTCOLOR,"black");
var h=(this.graph.model.isEdge(b.cell))?mxConstants.ALIGN_LEFT:mxUtils.getValue(b.style,mxConstants.STYLE_ALIGN,mxConstants.ALIGN_LEFT);
var i=(mxUtils.getValue(b.style,mxConstants.STYLE_FONTSTYLE,0)&mxConstants.FONT_BOLD)==mxConstants.FONT_BOLD;
var g=(mxUtils.getValue(b.style,mxConstants.STYLE_FONTSTYLE,0)&mxConstants.FONT_ITALIC)==mxConstants.FONT_ITALIC;
var l=(mxUtils.getValue(b.style,mxConstants.STYLE_FONTSTYLE,0)&mxConstants.FONT_UNDERLINE)==mxConstants.FONT_UNDERLINE;
this.textarea.style.fontSize=n+"px";
this.textarea.style.fontFamily=f;
this.textarea.style.textAlign=h;
this.textarea.style.color=e;
this.textarea.style.fontWeight=(i)?"bold":"normal";
this.textarea.style.fontStyle=(g)?"italic":"";
this.textarea.style.textDecoration=(l)?"underline":"";
var a=this.getEditorBounds(b);
this.textarea.style.left=a.x+"px";
this.textarea.style.top=a.y+"px";
this.textarea.style.width=a.width+"px";
this.textarea.style.height=a.height+"px";
this.textarea.style.zIndex=5;
var k=this.getInitialValue(b,c);
if(k==null||k.length==0){k=this.getEmptyLabelText();
this.clearOnChange=true;
}else{this.clearOnChange=false;
}this.setModified(false);
this.textarea.value=k;
this.graph.container.appendChild(this.textarea);
if(this.textarea.style.display!="none"){this.textarea.focus();
this.textarea.select();
}}};
mxCellEditor.prototype.stopEditing=function(a){a=a||false;
if(this.editingCell!=null){if(this.textNode!=null){this.textNode.style.visibility="visible";
this.textNode=null;
}if(!a&&this.isModified()){this.graph.labelChanged(this.editingCell,this.getCurrentValue(),this.trigger);
}this.editingCell=null;
this.trigger=null;
this.textarea.blur();
this.textarea.parentNode.removeChild(this.textarea);
}};
mxCellEditor.prototype.getInitialValue=function(b,a){return this.graph.getEditingValue(b.cell,a);
};
mxCellEditor.prototype.getCurrentValue=function(){return this.textarea.value.replace(/\r/g,"");
};
mxCellEditor.prototype.isHideLabel=function(a){return true;
};
mxCellEditor.prototype.getMinimumSize=function(a){var b=this.graph.getView().scale;
return new mxRectangle(0,0,(a.text==null)?30:a.text.size*b+20,(this.textarea.style.textAlign=="left")?120:40);
};
mxCellEditor.prototype.getEditorBounds=function(b){var m=this.graph.getModel().isEdge(b.cell);
var g=this.graph.getView().scale;
var e=this.getMinimumSize(b);
var c=e.width;
var n=e.height;
var l=parseInt(b.style[mxConstants.STYLE_SPACING]||2)*g;
var k=(parseInt(b.style[mxConstants.STYLE_SPACING_TOP]||0))*g+l;
var h=(parseInt(b.style[mxConstants.STYLE_SPACING_RIGHT]||0))*g+l;
var d=(parseInt(b.style[mxConstants.STYLE_SPACING_BOTTOM]||0))*g+l;
var i=(parseInt(b.style[mxConstants.STYLE_SPACING_LEFT]||0))*g+l;
var o=new mxRectangle(b.x,b.y,Math.max(c,b.width-i-h),Math.max(n,b.height-k-d));
if(m){o.x=b.absoluteOffset.x;
o.y=b.absoluteOffset.y;
if(b.text!=null&&b.text.boundingBox!=null){if(b.text.boundingBox.x>0){o.x=b.text.boundingBox.x;
}if(b.text.boundingBox.y>0){o.y=b.text.boundingBox.y;
}}}else{if(b.text!=null&&b.text.boundingBox!=null){o.x=Math.min(o.x,b.text.boundingBox.x);
o.y=Math.min(o.y,b.text.boundingBox.y);
}}o.x+=i;
o.y+=k;
if(b.text!=null&&b.text.boundingBox!=null){if(!m){o.width=Math.max(o.width,b.text.boundingBox.width);
o.height=Math.max(o.height,b.text.boundingBox.height);
}else{o.width=Math.max(c,b.text.boundingBox.width);
o.height=Math.max(n,b.text.boundingBox.height);
}}if(this.graph.getModel().isVertex(b.cell)){var a=mxUtils.getValue(b.style,mxConstants.STYLE_LABEL_POSITION,mxConstants.ALIGN_CENTER);
if(a==mxConstants.ALIGN_LEFT){o.x-=b.width;
}else{if(a==mxConstants.ALIGN_RIGHT){o.x+=b.width;
}}var f=mxUtils.getValue(b.style,mxConstants.STYLE_VERTICAL_LABEL_POSITION,mxConstants.ALIGN_MIDDLE);
if(f==mxConstants.ALIGN_TOP){o.y-=b.height;
}else{if(f==mxConstants.ALIGN_BOTTOM){o.y+=b.height;
}}}return o;
};
mxCellEditor.prototype.getEmptyLabelText=function(a){return this.emptyLabelText;
};
mxCellEditor.prototype.getEditingCell=function(){return this.editingCell;
};
mxCellEditor.prototype.destroy=function(){if(this.textarea!=null){mxEvent.release(this.textarea);
if(this.textarea.parentNode!=null){this.textarea.parentNode.removeChild(this.textarea);
}this.textarea=null;
}};
function mxCellRenderer(){this.shapes=mxUtils.clone(this.defaultShapes);
}mxCellRenderer.prototype.shapes=null;
mxCellRenderer.prototype.defaultEdgeShape=mxConnector;
mxCellRenderer.prototype.defaultVertexShape=mxRectangleShape;
mxCellRenderer.prototype.defaultShapes=new Object();
mxCellRenderer.prototype.defaultShapes[mxConstants.SHAPE_ARROW]=mxArrow;
mxCellRenderer.prototype.defaultShapes[mxConstants.SHAPE_RECTANGLE]=mxRectangleShape;
mxCellRenderer.prototype.defaultShapes[mxConstants.SHAPE_ELLIPSE]=mxEllipse;
mxCellRenderer.prototype.defaultShapes[mxConstants.SHAPE_DOUBLE_ELLIPSE]=mxDoubleEllipse;
mxCellRenderer.prototype.defaultShapes[mxConstants.SHAPE_RHOMBUS]=mxRhombus;
mxCellRenderer.prototype.defaultShapes[mxConstants.SHAPE_IMAGE]=mxImageShape;
mxCellRenderer.prototype.defaultShapes[mxConstants.SHAPE_LINE]=mxLine;
mxCellRenderer.prototype.defaultShapes[mxConstants.SHAPE_LABEL]=mxLabel;
mxCellRenderer.prototype.defaultShapes[mxConstants.SHAPE_CYLINDER]=mxCylinder;
mxCellRenderer.prototype.defaultShapes[mxConstants.SHAPE_SWIMLANE]=mxSwimlane;
mxCellRenderer.prototype.defaultShapes[mxConstants.SHAPE_CONNECTOR]=mxConnector;
mxCellRenderer.prototype.defaultShapes[mxConstants.SHAPE_ACTOR]=mxActor;
mxCellRenderer.prototype.defaultShapes[mxConstants.SHAPE_CLOUD]=mxCloud;
mxCellRenderer.prototype.defaultShapes[mxConstants.SHAPE_TRIANGLE]=mxTriangle;
mxCellRenderer.prototype.defaultShapes[mxConstants.SHAPE_HEXAGON]=mxHexagon;
mxCellRenderer.prototype.registerShape=function(b,a){this.shapes[b]=a;
};
mxCellRenderer.prototype.initialize=function(c,a){var b=c.view.graph.getModel();
if(c.view.graph.container!=null&&c.shape==null&&c.cell!=c.view.currentRoot&&(b.isVertex(c.cell)||b.isEdge(c.cell))){this.createShape(c);
if(c.shape!=null&&(a==null||a)){this.initializeShape(c);
if(c.view.graph.ordered||b.isEdge(c.cell)){c.invalidOrder=true;
}else{if(c.view.graph.keepEdgesInForeground&&this.firstEdge!=null){if(this.firstEdge.parentNode==c.shape.node.parentNode){this.insertState(c,this.firstEdge);
}else{this.firstEdge=null;
}}}c.shape.scale=c.view.scale;
this.createCellOverlays(c);
this.installListeners(c);
}}};
mxCellRenderer.prototype.initializeShape=function(a){a.shape.init(a.view.getDrawPane());
};
mxCellRenderer.prototype.getPreviousStateInContainer=function(e,b){var a=null;
var d=e.view.graph;
var c=d.getModel();
var g=e.cell;
var f=c.getParent(g);
while(f!=null&&a==null){a=this.findPreviousStateInContainer(d,f,g,b);
g=f;
f=c.getParent(g);
}return a;
};
mxCellRenderer.prototype.findPreviousStateInContainer=function(h,g,f,a){var k=null;
var e=h.getModel();
if(f!=null){var b=g.getIndex(f);
for(var d=b-1;
d>=0&&k==null;
d--){k=this.findPreviousStateInContainer(h,e.getChildAt(g,d),null,a);
}}else{var c=e.getChildCount(g);
for(var d=c-1;
d>=0&&k==null;
d--){k=this.findPreviousStateInContainer(h,e.getChildAt(g,d),null,a);
}}if(k==null){k=h.view.getState(g);
if(k!=null&&(k.shape==null||k.shape.node==null||k.shape.node.parentNode!=a)){k=null;
}}return k;
};
mxCellRenderer.prototype.order=function(d){var b=d.shape.node.parentNode;
var c=this.getPreviousStateInContainer(d,b);
var a=b.firstChild;
if(c!=null){a=c.shape.node;
if(c.text!=null&&c.text.node!=null&&c.text.node.parentNode==b){a=c.text.node;
}a=a.nextSibling;
}this.insertState(d,a);
};
mxCellRenderer.prototype.orderEdge=function(g){var b=g.view;
var c=b.graph.getModel();
if(b.graph.keepEdgesInForeground){if(this.firstEdge==null||this.firstEdge.parentNode==null||this.firstEdge.parentNode!=g.shape.node.parentNode){this.firstEdge=g.shape.node;
}}else{if(b.graph.keepEdgesInBackground){var e=g.shape.node;
var d=e.parentNode;
var a=c.getParent(g.cell);
var f=b.getState(a);
if(f!=null&&f.shape!=null&&f.shape.node!=null){var h=f.shape.node.nextSibling;
if(h!=null&&h!=e){this.insertState(g,h);
}}else{var h=d.firstChild;
if(h!=null&&h!=e){this.insertState(g,h);
}}}}};
mxCellRenderer.prototype.insertState=function(b,a){b.shape.node.parentNode.insertBefore(b.shape.node,a);
if(b.text!=null&&b.text.node!=null&&b.text.node.parentNode==b.shape.node.parentNode){b.shape.node.parentNode.insertBefore(b.text.node,b.shape.node.nextSibling);
}};
mxCellRenderer.prototype.createShape=function(d){if(d.style!=null){var a=d.style[mxConstants.STYLE_SHAPE];
var c=mxStencilRegistry.getStencil(a);
if(c!=null){d.shape=new mxStencilShape(c);
}else{var b=this.getShapeConstructor(d);
d.shape=new b();
}d.shape.points=d.absolutePoints;
d.shape.bounds=new mxRectangle(d.x,d.y,d.width,d.height);
d.shape.dialect=d.view.graph.dialect;
this.configureShape(d);
}};
mxCellRenderer.prototype.getShapeConstructor=function(c){var a=c.style[mxConstants.STYLE_SHAPE];
var b=(a!=null)?this.shapes[a]:null;
if(b==null){b=(c.view.graph.getModel().isEdge(c.cell))?this.defaultEdgeShape:this.defaultVertexShape;
}return b;
};
mxCellRenderer.prototype.configureShape=function(d){d.shape.apply(d);
var e=d.view.graph.getImage(d);
if(e!=null){d.shape.image=e;
}var a=d.view.graph.getIndicatorColor(d);
var b=d.view.graph.getIndicatorShape(d);
var c=(b!=null)?this.shapes[b]:null;
if(a!=null){d.shape.indicatorShape=c;
d.shape.indicatorColor=a;
d.shape.indicatorGradientColor=d.view.graph.getIndicatorGradientColor(d);
d.shape.indicatorDirection=d.style[mxConstants.STYLE_INDICATOR_DIRECTION];
}else{var a=d.view.graph.getIndicatorImage(d);
if(a!=null){d.shape.indicatorImage=a;
}}this.postConfigureShape(d);
};
mxCellRenderer.prototype.postConfigureShape=function(a){if(a.shape!=null){this.resolveColor(a,"indicatorColor",mxConstants.STYLE_FILLCOLOR);
this.resolveColor(a,"indicatorGradientColor",mxConstants.STYLE_GRADIENTCOLOR);
this.resolveColor(a,"fill",mxConstants.STYLE_FILLCOLOR);
this.resolveColor(a,"stroke",mxConstants.STYLE_STROKECOLOR);
this.resolveColor(a,"gradient",mxConstants.STYLE_GRADIENTCOLOR);
}};
mxCellRenderer.prototype.resolveColor=function(e,g,a){var d=e.shape[g];
var c=e.view.graph;
var f=null;
if(d=="inherit"){f=c.model.getParent(e.cell);
}else{if(d=="swimlane"){if(c.model.getTerminal(e.cell,false)!=null){f=c.model.getTerminal(e.cell,false);
}else{f=e.cell;
}f=c.getSwimlane(f);
a=c.swimlaneIndicatorColorAttribute;
}else{if(d=="indicated"){e.shape[g]=e.shape.indicatorColor;
}}}if(f!=null){var b=c.getView().getState(f);
e.shape[g]=null;
if(b!=null){if(b.shape!=null&&g!="indicatorColor"){e.shape[g]=b.shape[g];
}else{e.shape[g]=b.style[a];
}}}};
mxCellRenderer.prototype.getLabelValue=function(c){var b=c.view.graph;
var a=b.getLabel(c.cell);
if(!b.isHtmlLabel(c.cell)&&!mxUtils.isNode(a)&&b.dialect!=mxConstants.DIALECT_SVG&&a!=null){a=mxUtils.htmlEntities(a,false);
}return a;
};
mxCellRenderer.prototype.createLabel=function(a,h){var i=a.view.graph;
var f=i.getModel().isEdge(a.cell);
if(a.style[mxConstants.STYLE_FONTSIZE]>0||a.style[mxConstants.STYLE_FONTSIZE]==null){var c=(i.isHtmlLabel(a.cell)||(h!=null&&mxUtils.isNode(h)))&&i.dialect==mxConstants.DIALECT_SVG;
a.text=new mxText(h,new mxRectangle(),(a.style[mxConstants.STYLE_ALIGN]||mxConstants.ALIGN_CENTER),i.getVerticalAlign(a),a.style[mxConstants.STYLE_FONTCOLOR],a.style[mxConstants.STYLE_FONTFAMILY],a.style[mxConstants.STYLE_FONTSIZE],a.style[mxConstants.STYLE_FONTSTYLE],a.style[mxConstants.STYLE_SPACING],a.style[mxConstants.STYLE_SPACING_TOP],a.style[mxConstants.STYLE_SPACING_RIGHT],a.style[mxConstants.STYLE_SPACING_BOTTOM],a.style[mxConstants.STYLE_SPACING_LEFT],a.style[mxConstants.STYLE_HORIZONTAL],a.style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR],a.style[mxConstants.STYLE_LABEL_BORDERCOLOR],i.isWrapping(a.cell)&&i.isHtmlLabel(a.cell),i.isLabelClipped(a.cell),a.style[mxConstants.STYLE_OVERFLOW],a.style[mxConstants.STYLE_LABEL_PADDING]);
a.text.opacity=a.style[mxConstants.STYLE_TEXT_OPACITY];
a.text.dialect=(c)?mxConstants.DIALECT_STRICTHTML:a.view.graph.dialect;
this.initializeLabel(a);
var d=false;
var e=function(n){var m=a;
if(mxClient.IS_TOUCH||d){var l=mxEvent.getClientX(n);
var p=mxEvent.getClientY(n);
var o=mxUtils.convertPoint(i.container,l,p);
m=i.view.getState(i.getCellAt(o.x,o.y));
}return m;
};
var g=(mxClient.IS_TOUCH)?"touchstart":"mousedown";
var b=(mxClient.IS_TOUCH)?"touchmove":"mousemove";
var k=(mxClient.IS_TOUCH)?"touchend":"mouseup";
mxEvent.addListener(a.text.node,g,mxUtils.bind(this,function(l){if(this.isLabelEvent(a,l)){i.fireMouseEvent(mxEvent.MOUSE_DOWN,new mxMouseEvent(l,a));
d=i.dialect!=mxConstants.DIALECT_SVG&&mxEvent.getSource(l).nodeName=="IMG";
}}));
mxEvent.addListener(a.text.node,b,mxUtils.bind(this,function(l){if(this.isLabelEvent(a,l)){i.fireMouseEvent(mxEvent.MOUSE_MOVE,new mxMouseEvent(l,e(l)));
}}));
mxEvent.addListener(a.text.node,k,mxUtils.bind(this,function(l){if(this.isLabelEvent(a,l)){i.fireMouseEvent(mxEvent.MOUSE_UP,new mxMouseEvent(l,e(l)));
d=false;
}}));
mxEvent.addListener(a.text.node,"dblclick",mxUtils.bind(this,function(l){if(this.isLabelEvent(a,l)){i.dblClick(l,a.cell);
mxEvent.consume(l);
}}));
}};
mxCellRenderer.prototype.initializeLabel=function(b){var a=b.view.graph;
if(b.text.dialect!=mxConstants.DIALECT_SVG){if(mxClient.IS_SVG&&mxClient.NO_FO){b.text.init(a.container);
}else{if(mxUtils.isVml(b.view.getDrawPane())){if(b.shape.label!=null){b.text.init(b.shape.label);
}else{b.text.init(b.shape.node);
}}}}if(b.text.node==null){b.text.init(b.view.getDrawPane());
if(b.shape!=null&&b.text!=null){b.shape.node.parentNode.insertBefore(b.text.node,b.shape.node.nextSibling);
}}};
mxCellRenderer.prototype.createCellOverlays=function(f){var e=f.view.graph;
var d=e.getCellOverlays(f.cell);
var g=null;
if(d!=null){g=new mxDictionary();
for(var c=0;
c<d.length;
c++){var a=(f.overlays!=null)?f.overlays.remove(d[c]):null;
if(a==null){var b=new mxImageShape(new mxRectangle(),d[c].image.src);
b.dialect=f.view.graph.dialect;
b.preserveImageAspect=false;
b.overlay=d[c];
this.initializeOverlay(f,b);
this.installCellOverlayListeners(f,d[c],b);
if(d[c].cursor!=null){b.node.style.cursor=d[c].cursor;
}g.put(d[c],b);
}else{g.put(d[c],a);
}}}if(f.overlays!=null){f.overlays.visit(function(i,h){h.destroy();
});
}f.overlays=g;
};
mxCellRenderer.prototype.initializeOverlay=function(b,a){a.init(b.view.getOverlayPane());
};
mxCellRenderer.prototype.installCellOverlayListeners=function(e,b,a){var d=e.view.graph;
mxEvent.addListener(a.node,"click",function(g){if(d.isEditing()){d.stopEditing(!d.isInvokesStopCellEditing());
}b.fireEvent(new mxEventObject(mxEvent.CLICK,"event",g,"cell",e.cell));
});
var c=(mxClient.IS_TOUCH)?"touchstart":"mousedown";
var f=(mxClient.IS_TOUCH)?"touchmove":"mousemove";
mxEvent.addListener(a.node,c,function(g){mxEvent.consume(g);
});
mxEvent.addListener(a.node,f,function(g){d.fireMouseEvent(mxEvent.MOUSE_MOVE,new mxMouseEvent(g,e));
});
if(mxClient.IS_TOUCH){mxEvent.addListener(a.node,"touchend",function(g){b.fireEvent(new mxEventObject(mxEvent.CLICK,"event",g,"cell",e.cell));
});
}};
mxCellRenderer.prototype.createControl=function(d){var c=d.view.graph;
var e=c.getFoldingImage(d);
if(c.foldingEnabled&&e!=null){if(d.control==null){var a=new mxRectangle(0,0,e.width,e.height);
d.control=new mxImageShape(a,e.src);
d.control.dialect=c.dialect;
d.control.preserveImageAspect=false;
this.initControl(d,d.control,true,function(b){if(c.isEnabled()){var f=!c.isCellCollapsed(d.cell);
c.foldCells(f,false,[d.cell]);
mxEvent.consume(b);
}});
}}else{if(d.control!=null){d.control.destroy();
d.control=null;
}}};
mxCellRenderer.prototype.initControl=function(a,e,g,f){var i=a.view.graph;
var d=i.isHtmlLabel(a.cell)&&mxClient.NO_FO&&i.dialect==mxConstants.DIALECT_SVG;
if(d){e.dialect=mxConstants.DIALECT_PREFERHTML;
e.init(i.container);
e.node.style.zIndex=1;
}else{e.init(a.view.getOverlayPane());
}var b=e.innerNode||e.node;
if(f){if(i.isEnabled()){b.style.cursor="pointer";
}mxEvent.addListener(b,"click",f);
}if(g){var h=(mxClient.IS_TOUCH)?"touchstart":"mousedown";
var c=(mxClient.IS_TOUCH)?"touchmove":"mousemove";
mxEvent.addListener(b,h,function(k){i.fireMouseEvent(mxEvent.MOUSE_DOWN,new mxMouseEvent(k,a));
mxEvent.consume(k);
});
mxEvent.addListener(b,c,function(k){i.fireMouseEvent(mxEvent.MOUSE_MOVE,new mxMouseEvent(k,a));
});
}return b;
};
mxCellRenderer.prototype.isShapeEvent=function(b,a){return true;
};
mxCellRenderer.prototype.isLabelEvent=function(b,a){return true;
};
mxCellRenderer.prototype.installListeners=function(a){var g=a.view.graph;
if(g.dialect==mxConstants.DIALECT_SVG){var h="all";
if(g.getModel().isEdge(a.cell)&&a.shape.stroke!=null&&(a.shape.fill==null||a.shape.fill==mxConstants.NONE)){h="visibleStroke";
}if(a.shape.innerNode!=null){a.shape.innerNode.setAttribute("pointer-events",h);
}else{a.shape.node.setAttribute("pointer-events",h);
}}var d=function(m){var l=a;
if((g.dialect!=mxConstants.DIALECT_SVG&&mxEvent.getSource(m).nodeName=="IMG")||mxClient.IS_TOUCH){var k=mxEvent.getClientX(m);
var o=mxEvent.getClientY(m);
var n=mxUtils.convertPoint(g.container,k,o);
l=g.view.getState(g.getCellAt(n.x,n.y));
}return l;
};
var c=false;
mxEvent.addListener(a.shape.node,"gesturestart",mxUtils.bind(this,function(k){g.lastTouchTime=0;
c=true;
mxEvent.consume(k);
}));
var e=(mxClient.IS_TOUCH)?"touchstart":"mousedown";
var b=(mxClient.IS_TOUCH)?"touchmove":"mousemove";
var i=(mxClient.IS_TOUCH)?"touchend":"mouseup";
mxEvent.addListener(a.shape.node,e,mxUtils.bind(this,function(k){if(this.isShapeEvent(a,k)&&!c){g.fireMouseEvent(mxEvent.MOUSE_DOWN,new mxMouseEvent(k,(a.shape!=null&&mxEvent.getSource(k)==a.shape.content)?null:a));
}else{if(c){mxEvent.consume(k);
}}}));
mxEvent.addListener(a.shape.node,b,mxUtils.bind(this,function(k){if(this.isShapeEvent(a,k)&&!c){g.fireMouseEvent(mxEvent.MOUSE_MOVE,new mxMouseEvent(k,(a.shape!=null&&mxEvent.getSource(k)==a.shape.content)?null:d(k)));
}else{if(c){mxEvent.consume(k);
}}}));
mxEvent.addListener(a.shape.node,i,mxUtils.bind(this,function(k){if(this.isShapeEvent(a,k)&&!c){g.fireMouseEvent(mxEvent.MOUSE_UP,new mxMouseEvent(k,(a.shape!=null&&mxEvent.getSource(k)==a.shape.content)?null:d(k)));
}else{if(c){mxEvent.consume(k);
}}}));
var f=(mxClient.IS_TOUCH)?"gestureend":"dblclick";
mxEvent.addListener(a.shape.node,f,mxUtils.bind(this,function(k){c=false;
if(f=="gestureend"){g.lastTouchTime=0;
if(g.gestureEnabled){g.handleGesture(a,k);
mxEvent.consume(k);
}}else{if(this.isShapeEvent(a,k)){g.dblClick(k,(a.shape!=null&&mxEvent.getSource(k)==a.shape.content)?null:a.cell);
mxEvent.consume(k);
}}}));
};
mxCellRenderer.prototype.redrawLabel=function(e){var d=this.getLabelValue(e);
if(e.text==null&&d!=null&&(mxUtils.isNode(d)||d.length>0)){this.createLabel(e,d);
}else{if(e.text!=null&&(d==null||d.length==0)){e.text.destroy();
e.text=null;
}}if(e.text!=null){var c=e.view.graph;
var b=c.isWrapping(e.cell);
var f=c.isLabelClipped(e.cell);
var a=this.getLabelBounds(e);
if(e.text.value!=d||e.text.isWrapping!=b||e.text.isClipping!=f||e.text.scale!=e.view.scale||!e.text.bounds.equals(a)){e.text.value=d;
e.text.bounds=a;
e.text.scale=this.getTextScale(e);
e.text.isWrapping=b;
e.text.isClipping=f;
e.text.redraw();
}}};
mxCellRenderer.prototype.getTextScale=function(a){return a.view.scale;
};
mxCellRenderer.prototype.getLabelBounds=function(e){var d=e.view.graph;
var c=d.getModel().isEdge(e.cell);
var b=new mxRectangle(e.absoluteOffset.x,e.absoluteOffset.y);
if(!c){b.x+=e.x;
b.y+=e.y;
b.width=Math.max(1,e.width);
b.height=Math.max(1,e.height);
if(d.isSwimlane(e.cell)){var f=d.view.scale;
var a=d.getStartSize(e.cell);
if(a.width>0){b.width=a.width*f;
}else{if(a.height>0){b.height=a.height*f;
}}}}return b;
};
mxCellRenderer.prototype.redrawCellOverlays=function(a){this.createCellOverlays(a);
if(a.overlays!=null){a.overlays.visit(function(d,b){var c=b.overlay.getBounds(a);
if(b.bounds==null||b.scale!=a.view.scale||!b.bounds.equals(c)){b.bounds=c;
b.scale=a.view.scale;
b.redraw();
}});
}};
mxCellRenderer.prototype.redrawControl=function(c){if(c.control!=null){var b=this.getControlBounds(c);
var a=c.view.scale;
if(c.control.scale!=a||!c.control.bounds.equals(b)){c.control.bounds=b;
c.control.scale=a;
c.control.redraw();
}}};
mxCellRenderer.prototype.getControlBounds=function(e){if(e.control!=null){var d=e.control.scale;
var a=e.control.bounds.width/d;
var c=e.control.bounds.height/d;
var b=e.view.scale;
return(e.view.graph.getModel().isEdge(e.cell))?new mxRectangle(e.x+e.width/2-a/2*b,e.y+e.height/2-c/2*b,a*b,c*b):new mxRectangle(e.x+a/2*b,e.y+c/2*b,a*b,c*b);
}return null;
};
mxCellRenderer.prototype.redraw=function(e,d,a){if(e.shape!=null){var b=e.view.graph.getModel();
var c=b.isEdge(e.cell);
reconfigure=(d!=null)?d:false;
this.createControl(e);
if(e.orderChanged||e.invalidOrder){if(e.view.graph.ordered){this.order(e);
}else{this.orderEdge(e);
}reconfigure=e.orderChanged;
}delete e.invalidOrder;
delete e.orderChanged;
if(!reconfigure&&!mxUtils.equalEntries(e.shape.style,e.style)){reconfigure=true;
}if(reconfigure){this.configureShape(e);
e.shape.reconfigure();
}if(d||e.shape.bounds==null||e.shape.scale!=e.view.scale||!e.shape.bounds.equals(e)||!mxUtils.equalPoints(e.shape.points,e.absolutePoints)){if(e.absolutePoints!=null){e.shape.points=e.absolutePoints.slice();
}else{e.shape.points=null;
}e.shape.bounds=new mxRectangle(e.x,e.y,e.width,e.height);
e.shape.scale=e.view.scale;
if(a==null||a){e.shape.redraw();
}else{e.shape.updateBoundingBox();
}}if(a==null||a){this.redrawLabel(e);
this.redrawCellOverlays(e);
this.redrawControl(e);
}}};
mxCellRenderer.prototype.destroy=function(a){if(a.shape!=null){if(a.text!=null){a.text.destroy();
a.text=null;
}if(a.overlays!=null){a.overlays.visit(function(c,b){b.destroy();
});
a.overlays=null;
}if(a.control!=null){a.control.destroy();
a.control=null;
}a.shape.destroy();
a.shape=null;
}};
var mxEdgeStyle={EntityRelation:function(k,s,A,u,o){var q=k.view;
var f=q.graph;
var d=mxUtils.getValue(k.style,mxConstants.STYLE_SEGMENT,mxConstants.ENTITY_SEGMENT)*q.scale;
var B=k.absolutePoints;
var e=B[0];
var z=B[B.length-1];
var w=false;
if(e!=null){s=new mxCellState();
s.x=e.x;
s.y=e.y;
}else{if(s!=null){var a=mxUtils.getPortConstraints(s,k,true,mxConstants.DIRECTION_MASK_NONE);
if(a!=mxConstants.DIRECTION_MASK_NONE){w=a==mxConstants.DIRECTION_MASK_WEST;
}else{var r=f.getCellGeometry(s.cell);
if(r.relative){w=r.x<=0.5;
}else{if(A!=null){w=A.x+A.width<s.x;
}}}}else{return;
}}var i=true;
if(z!=null){A=new mxCellState();
A.x=z.x;
A.y=z.y;
}else{if(A!=null){var a=mxUtils.getPortConstraints(A,k,false,mxConstants.DIRECTION_MASK_NONE);
if(a!=mxConstants.DIRECTION_MASK_NONE){i=a==mxConstants.DIRECTION_MASK_WEST;
}else{var g=f.getCellGeometry(A.cell);
if(g.relative){i=g.x<=0.5;
}else{if(s!=null){i=s.x+s.width<A.x;
}}}}}if(s!=null&&A!=null){var y=(w)?s.x:s.x+s.width;
var h=q.getRoutingCenterY(s);
var t=(i)?A.x:A.x+A.width;
var c=q.getRoutingCenterY(A);
var v=d;
var p=(w)?-v:v;
var l=new mxPoint(y+p,h);
p=(i)?-v:v;
var b=new mxPoint(t+p,c);
if(w==i){var m=(w)?Math.min(y,t)-d:Math.max(y,t)+d;
o.push(new mxPoint(m,h));
o.push(new mxPoint(m,c));
}else{if((l.x<b.x)==w){var n=h+(c-h)/2;
o.push(l);
o.push(new mxPoint(l.x,n));
o.push(new mxPoint(b.x,n));
o.push(b);
}else{o.push(l);
o.push(b);
}}}},Loop:function(b,a,e,i,o){if(a!=null){var g=b.view;
var k=g.graph;
var n=(i!=null&&i.length>0)?i[0]:null;
if(n!=null){n=g.transformControlPoint(b,n);
if(mxUtils.contains(a,n.x,n.y)){n=null;
}}var h=0;
var m=0;
var f=0;
var l=0;
var d=mxUtils.getValue(b.style,mxConstants.STYLE_SEGMENT,k.gridSize)*g.scale;
var c=mxUtils.getValue(b.style,mxConstants.STYLE_DIRECTION,mxConstants.DIRECTION_WEST);
if(c==mxConstants.DIRECTION_NORTH||c==mxConstants.DIRECTION_SOUTH){h=g.getRoutingCenterX(a);
m=d;
}else{f=g.getRoutingCenterY(a);
l=d;
}if(n==null||n.x<a.x||n.x>a.x+a.width){if(n!=null){h=n.x;
l=Math.max(Math.abs(f-n.y),l);
}else{if(c==mxConstants.DIRECTION_NORTH){f=a.y-2*m;
}else{if(c==mxConstants.DIRECTION_SOUTH){f=a.y+a.height+2*m;
}else{if(c==mxConstants.DIRECTION_EAST){h=a.x-2*l;
}else{h=a.x+a.width+2*l;
}}}}}else{if(n!=null){h=g.getRoutingCenterX(a);
m=Math.max(Math.abs(h-n.x),l);
f=n.y;
l=0;
}}o.push(new mxPoint(h-m,f-l));
o.push(new mxPoint(h+m,f+l));
}},ElbowConnector:function(c,b,g,k,m){var l=(k!=null&&k.length>0)?k[0]:null;
var f=false;
var d=false;
if(b!=null&&g!=null){if(l!=null){var e=Math.min(b.x,g.x);
var i=Math.max(b.x+b.width,g.x+g.width);
var h=Math.min(b.y,g.y);
var a=Math.max(b.y+b.height,g.y+g.height);
l=c.view.transformControlPoint(c,l);
f=l.y<h||l.y>a;
d=l.x<e||l.x>i;
}else{var e=Math.max(b.x,g.x);
var i=Math.min(b.x+b.width,g.x+g.width);
f=e==i;
if(!f){var h=Math.max(b.y,g.y);
var a=Math.min(b.y+b.height,g.y+g.height);
d=h==a;
}}}if(!d&&(f||c.style[mxConstants.STYLE_ELBOW]==mxConstants.ELBOW_VERTICAL)){mxEdgeStyle.TopToBottom(c,b,g,k,m);
}else{mxEdgeStyle.SideToSide(c,b,g,k,m);
}},SideToSide:function(d,c,f,o,v){var k=d.view;
var u=(o!=null&&o.length>0)?o[0]:null;
var s=d.absolutePoints;
var q=s[0];
var g=s[s.length-1];
if(u!=null){u=k.transformControlPoint(d,u);
}if(q!=null){c=new mxCellState();
c.x=q.x;
c.y=q.y;
}if(g!=null){f=new mxCellState();
f.x=g.x;
f.y=g.y;
}if(c!=null&&f!=null){var e=Math.max(c.x,f.x);
var a=Math.min(c.x+c.width,f.x+f.width);
var n=(u!=null)?u.x:a+(e-a)/2;
var m=k.getRoutingCenterY(c);
var i=k.getRoutingCenterY(f);
if(u!=null){if(u.y>=c.y&&u.y<=c.y+c.height){m=u.y;
}if(u.y>=f.y&&u.y<=f.y+f.height){i=u.y;
}}if(!mxUtils.contains(f,n,m)&&!mxUtils.contains(c,n,m)){v.push(new mxPoint(n,m));
}if(!mxUtils.contains(f,n,i)&&!mxUtils.contains(c,n,i)){v.push(new mxPoint(n,i));
}if(v.length==1){if(u!=null){if(!mxUtils.contains(f,n,u.y)&&!mxUtils.contains(c,n,u.y)){v.push(new mxPoint(n,u.y));
}}else{var p=Math.max(c.y,f.y);
var h=Math.min(c.y+c.height,f.y+f.height);
v.push(new mxPoint(n,p+(h-p)/2));
}}}},TopToBottom:function(d,c,f,n,u){var k=d.view;
var s=(n!=null&&n.length>0)?n[0]:null;
var q=d.absolutePoints;
var p=q[0];
var g=q[q.length-1];
if(s!=null){s=k.transformControlPoint(d,s);
}if(p!=null){c=new mxCellState();
c.x=p.x;
c.y=p.y;
}if(g!=null){f=new mxCellState();
f.x=g.x;
f.y=g.y;
}if(c!=null&&f!=null){var o=Math.max(c.y,f.y);
var i=Math.min(c.y+c.height,f.y+f.height);
var m=k.getRoutingCenterX(c);
if(s!=null&&s.x>=c.x&&s.x<=c.x+c.width){m=s.x;
}var h=(s!=null)?s.y:i+(o-i)/2;
if(!mxUtils.contains(f,m,h)&&!mxUtils.contains(c,m,h)){u.push(new mxPoint(m,h));
}if(s!=null&&s.x>=f.x&&s.x<=f.x+f.width){m=s.x;
}else{m=k.getRoutingCenterX(f);
}if(!mxUtils.contains(f,m,h)&&!mxUtils.contains(c,m,h)){u.push(new mxPoint(m,h));
}if(u.length==1){if(s!=null&&u.length==1){if(!mxUtils.contains(f,s.x,h)&&!mxUtils.contains(c,s.x,h)){u.push(new mxPoint(s.x,h));
}}else{var e=Math.max(c.x,f.x);
var a=Math.min(c.x+c.width,f.x+f.width);
u.push(new mxPoint(e+(a-e)/2,h));
}}}},SegmentConnector:function(d,n,v,o,h){var w=d.absolutePoints;
var t=true;
var k=null;
var m=w[0];
if(m==null&&n!=null){m=new mxPoint(d.view.getRoutingCenterX(n),d.view.getRoutingCenterY(n));
}else{if(m!=null){m=m.clone();
}}var f=w.length-1;
if(o!=null&&o.length>0){k=d.view.transformControlPoint(d,o[0]);
var b=n;
var q=w[0];
var s=false;
var c=false;
var a=k;
var g=o.length;
for(var p=0;
p<2;
p++){var u=q!=null&&q.x==a.x;
var e=q!=null&&q.y==a.y;
var r=b!=null&&(a.y>=b.y&&a.y<=b.y+b.height);
var l=b!=null&&(a.x>=b.x&&a.x<=b.x+b.width);
s=e||(q==null&&r);
c=u||(q==null&&l);
if(q!=null&&(!e&&!u)&&(r||l)){t=r?false:true;
break;
}if(c||s){t=s;
if(p==1){t=o.length%2==0?s:c;
}break;
}b=v;
q=w[f];
a=d.view.transformControlPoint(d,o[g-1]);
}if(t&&((w[0]!=null&&w[0].y!=k.y)||(w[0]==null&&n!=null&&(k.y<n.y||k.y>n.y+n.height)))){h.push(new mxPoint(m.x,k.y));
}else{if(!t&&((w[0]!=null&&w[0].x!=k.x)||(w[0]==null&&n!=null&&(k.x<n.x||k.x>n.x+n.width)))){h.push(new mxPoint(k.x,m.y));
}}if(t){m.y=k.y;
}else{m.x=k.x;
}for(var p=0;
p<o.length;
p++){t=!t;
k=d.view.transformControlPoint(d,o[p]);
if(t){m.y=k.y;
}else{m.x=k.x;
}h.push(m.clone());
}}else{k=m;
t=true;
}m=w[f];
if(m==null&&v!=null){m=new mxPoint(d.view.getRoutingCenterX(v),d.view.getRoutingCenterY(v));
}if(t&&((w[f]!=null&&w[f].y!=k.y)||(w[f]==null&&v!=null&&(k.y<v.y||k.y>v.y+v.height)))){h.push(new mxPoint(m.x,k.y));
}else{if(!t&&((w[f]!=null&&w[f].x!=k.x)||(w[f]==null&&v!=null&&(k.x<v.x||k.x>v.x+v.width)))){h.push(new mxPoint(k.x,m.y));
}}if(w[0]==null&&n!=null){while(h.length>1&&mxUtils.contains(n,h[1].x,h[1].y)){h=h.splice(1,1);
}}if(w[f]==null&&v!=null){while(h.length>1&&mxUtils.contains(v,h[h.length-1].x,h[h.length-1].y)){h=h.splice(h.length-1,1);
}}},orthBuffer:10,dirVectors:[[-1,0],[0,-1],[1,0],[0,1],[-1,0],[0,-1],[1,0]],wayPoints1:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],routePatterns:[[[513,2308,2081,2562],[513,1090,514,2184,2114,2561],[513,1090,514,2564,2184,2562],[513,2308,2561,1090,514,2568,2308]],[[514,1057,513,2308,2081,2562],[514,2184,2114,2561],[514,2184,2562,1057,513,2564,2184],[514,1057,513,2568,2308,2561]],[[1090,514,1057,513,2308,2081,2562],[2114,2561],[1090,2562,1057,513,2564,2184],[1090,514,1057,513,2308,2561,2568]],[[2081,2562],[1057,513,1090,514,2184,2114,2561],[1057,513,1090,514,2184,2562,2564],[1057,2561,1090,514,2568,2308]]],inlineRoutePatterns:[[null,[2114,2568],null,null],[null,[514,2081,2114,2568],null,null],[null,[2114,2561],null,null],[[2081,2562],[1057,2114,2568],[2184,2562],null]],vertexSeperations:[],limits:[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]],LEFT_MASK:32,TOP_MASK:64,RIGHT_MASK:128,BOTTOM_MASK:256,LEFT:1,TOP:2,RIGHT:4,BOTTOM:8,SIDE_MASK:480,CENTER_MASK:512,SOURCE_MASK:1024,TARGET_MASK:2048,VERTEX_MASK:3072,OrthConnector:function(ap,I,a,S,F){var T=ap.view.graph;
var p=I==null?false:T.getModel().isEdge(I.cell);
var g=a==null?false:T.getModel().isEdge(a.cell);
if((S!=null&&S.length>0)||(p)||(g)){mxEdgeStyle.SegmentConnector(ap,I,a,S,F);
return;
}var am=ap.absolutePoints;
var ag=am[0];
var E=am[am.length-1];
var d=I!=null?I.x:ag.x;
var b=I!=null?I.y:ag.y;
var t=I!=null?I.width:1;
var X=I!=null?I.height:1;
var ao=a!=null?a.x:E.x;
var al=a!=null?a.y:E.y;
var C=a!=null?a.width:1;
var q=a!=null?a.height:1;
var Z=ap.view.scale*mxEdgeStyle.orthBuffer;
var ac=[mxConstants.DIRECTION_MASK_ALL,mxConstants.DIRECTION_MASK_ALL];
if(I!=null){ac[0]=mxUtils.getPortConstraints(I,ap,true,mxConstants.DIRECTION_MASK_ALL);
}if(a!=null){ac[1]=mxUtils.getPortConstraints(a,ap,false,mxConstants.DIRECTION_MASK_ALL);
}var ak=[0,0];
var af=[[d,b,t,X],[ao,al,C,q]];
for(var ab=0;
ab<2;
ab++){mxEdgeStyle.limits[ab][1]=af[ab][0]-Z;
mxEdgeStyle.limits[ab][2]=af[ab][1]-Z;
mxEdgeStyle.limits[ab][4]=af[ab][0]+af[ab][2]+Z;
mxEdgeStyle.limits[ab][8]=af[ab][1]+af[ab][3]+Z;
}var h=af[0][0]+af[0][2]/2;
var f=af[0][1]+af[0][3]/2;
var an=af[1][0]+af[1][2]/2;
var aj=af[1][1]+af[1][3]/2;
var m=h-an;
var l=f-aj;
var o=0;
if(m<0){if(l<0){o=2;
}else{o=1;
}}else{if(l<=0){o=3;
if(m==0){o=2;
}}}var U=null;
if(I!=null){U=ag;
}var ah=[[0.5,0.5],[0.5,0.5]];
for(var ab=0;
ab<2;
ab++){if(U!=null){ah[ab][0]=(U.x-af[ab][0])/af[ab][2];
if(ah[ab][0]<0.01){ak[ab]=mxConstants.DIRECTION_MASK_WEST;
}else{if(ah[ab][0]>0.99){ak[ab]=mxConstants.DIRECTION_MASK_EAST;
}}ah[ab][1]=(U.y-af[ab][1])/af[ab][3];
if(ah[ab][1]<0.01){ak[ab]=mxConstants.DIRECTION_MASK_NORTH;
}else{if(ah[ab][1]>0.99){ak[ab]=mxConstants.DIRECTION_MASK_SOUTH;
}}}U=null;
if(a!=null){U=E;
}}var n=af[0][1]-(af[1][1]+af[1][3]);
var v=af[0][0]-(af[1][0]+af[1][2]);
var ad=af[1][1]-(af[0][1]+af[0][3]);
var z=af[1][0]-(af[0][0]+af[0][2]);
mxEdgeStyle.vertexSeperations[1]=Math.max(v-2*Z,0);
mxEdgeStyle.vertexSeperations[2]=Math.max(n-2*Z,0);
mxEdgeStyle.vertexSeperations[4]=Math.max(ad-2*Z,0);
mxEdgeStyle.vertexSeperations[3]=Math.max(z-2*Z,0);
var Y=[];
var ai=[];
var u=[];
ai[0]=(v>=z)?mxConstants.DIRECTION_MASK_WEST:mxConstants.DIRECTION_MASK_EAST;
u[0]=(n>=ad)?mxConstants.DIRECTION_MASK_NORTH:mxConstants.DIRECTION_MASK_SOUTH;
ai[1]=mxUtils.reversePortConstraints(ai[0]);
u[1]=mxUtils.reversePortConstraints(u[0]);
var Q=v>=z?v:z;
var O=n>=ad?n:ad;
var N=[[0,0],[0,0]];
var e=false;
for(var ab=0;
ab<2;
ab++){if(ak[ab]!=0){continue;
}if((ai[ab]&ac[ab])==0){ai[ab]=mxUtils.reversePortConstraints(ai[ab]);
}if((u[ab]&ac[ab])==0){u[ab]=mxUtils.reversePortConstraints(u[ab]);
}N[ab][0]=u[ab];
N[ab][1]=ai[ab];
}if(O>Z*2&&Q>Z*2){if(((ai[0]&ac[0])>0)&&((u[1]&ac[1])>0)){N[0][0]=ai[0];
N[0][1]=u[0];
N[1][0]=u[1];
N[1][1]=ai[1];
e=true;
}else{if(((u[0]&ac[0])>0)&&((ai[1]&ac[1])>0)){N[0][0]=u[0];
N[0][1]=ai[0];
N[1][0]=ai[1];
N[1][1]=u[1];
e=true;
}}}if(O>Z*2&&!e){N[0][0]=u[0];
N[0][1]=ai[0];
N[1][0]=u[1];
N[1][1]=ai[1];
e=true;
}if(Q>Z*2&&!e){N[0][0]=ai[0];
N[0][1]=u[0];
N[1][0]=ai[1];
N[1][1]=u[1];
e=true;
}for(var ab=0;
ab<2;
ab++){if(ak[ab]!=0){continue;
}if((N[ab][0]&ac[ab])==0){N[ab][0]=N[ab][1];
}Y[ab]=N[ab][0]&ac[ab];
Y[ab]|=(N[ab][1]&ac[ab])<<8;
Y[ab]|=(N[1-ab][ab]&ac[ab])<<16;
Y[ab]|=(N[1-ab][1-ab]&ac[ab])<<24;
if((Y[ab]&15)==0){Y[ab]=Y[ab]<<8;
}if((Y[ab]&3840)==0){Y[ab]=(Y[ab]&15)|Y[ab]>>8;
}if((Y[ab]&983040)==0){Y[ab]=(Y[ab]&65535)|((Y[ab]&251658240)>>8);
}ak[ab]=Y[ab]&15;
if(ac[ab]==mxConstants.DIRECTION_MASK_WEST||ac[ab]==mxConstants.DIRECTION_MASK_NORTH||ac[ab]==mxConstants.DIRECTION_MASK_EAST||ac[ab]==mxConstants.DIRECTION_MASK_SOUTH){ak[ab]=ac[ab];
}}var V=ak[0]==mxConstants.DIRECTION_MASK_EAST?3:ak[0];
var ae=ak[1]==mxConstants.DIRECTION_MASK_EAST?3:ak[1];
V-=o;
ae-=o;
if(V<1){V+=4;
}if(ae<1){ae+=4;
}var M=mxEdgeStyle.routePatterns[V-1][ae-1];
mxEdgeStyle.wayPoints1[0][0]=af[0][0];
mxEdgeStyle.wayPoints1[0][1]=af[0][1];
switch(ak[0]){case mxConstants.DIRECTION_MASK_WEST:mxEdgeStyle.wayPoints1[0][0]-=Z;
mxEdgeStyle.wayPoints1[0][1]+=ah[0][1]*af[0][3];
break;
case mxConstants.DIRECTION_MASK_SOUTH:mxEdgeStyle.wayPoints1[0][0]+=ah[0][0]*af[0][2];
mxEdgeStyle.wayPoints1[0][1]+=af[0][3]+Z;
break;
case mxConstants.DIRECTION_MASK_EAST:mxEdgeStyle.wayPoints1[0][0]+=af[0][2]+Z;
mxEdgeStyle.wayPoints1[0][1]+=ah[0][1]*af[0][3];
break;
case mxConstants.DIRECTION_MASK_NORTH:mxEdgeStyle.wayPoints1[0][0]+=ah[0][0]*af[0][2];
mxEdgeStyle.wayPoints1[0][1]-=Z;
break;
}var k=0;
var G=(ak[0]&(mxConstants.DIRECTION_MASK_EAST|mxConstants.DIRECTION_MASK_WEST))>0?0:1;
var W=G;
var L=0;
for(var ab=0;
ab<M.length;
ab++){var K=M[ab]&15;
var P=K==mxConstants.DIRECTION_MASK_EAST?3:K;
P+=o;
if(P>4){P-=4;
}var w=mxEdgeStyle.dirVectors[P-1];
L=(P%2>0)?0:1;
if(L!=G){k++;
mxEdgeStyle.wayPoints1[k][0]=mxEdgeStyle.wayPoints1[k-1][0];
mxEdgeStyle.wayPoints1[k][1]=mxEdgeStyle.wayPoints1[k-1][1];
}var R=(M[ab]&mxEdgeStyle.TARGET_MASK)>0;
var x=(M[ab]&mxEdgeStyle.SOURCE_MASK)>0;
var D=(M[ab]&mxEdgeStyle.SIDE_MASK)>>5;
D=D<<o;
if(D>15){D=D>>4;
}var c=(M[ab]&mxEdgeStyle.CENTER_MASK)>0;
if((x||R)&&D<9){var J=0;
var H=x?0:1;
if(c&&L==0){J=af[H][0]+ah[H][0]*af[H][2];
}else{if(c){J=af[H][1]+ah[H][1]*af[H][3];
}else{J=mxEdgeStyle.limits[H][D];
}}if(L==0){var s=mxEdgeStyle.wayPoints1[k][0];
var A=(J-s)*w[0];
if(A>0){mxEdgeStyle.wayPoints1[k][0]+=w[0]*A;
}}else{var r=mxEdgeStyle.wayPoints1[k][1];
var y=(J-r)*w[1];
if(y>0){mxEdgeStyle.wayPoints1[k][1]+=w[1]*y;
}}}else{if(c){mxEdgeStyle.wayPoints1[k][0]+=w[0]*Math.abs(mxEdgeStyle.vertexSeperations[P]/2);
mxEdgeStyle.wayPoints1[k][1]+=w[1]*Math.abs(mxEdgeStyle.vertexSeperations[P]/2);
}}if(k>0&&mxEdgeStyle.wayPoints1[k][L]==mxEdgeStyle.wayPoints1[k-1][L]){k--;
}else{G=L;
}}for(var ab=0;
ab<=k;
ab++){if(ab==k){var B=(ak[1]&(mxConstants.DIRECTION_MASK_EAST|mxConstants.DIRECTION_MASK_WEST))>0?0:1;
var aa=B==W?0:1;
if(aa!=(k+1)%2){break;
}}F.push(new mxPoint(mxEdgeStyle.wayPoints1[ab][0],mxEdgeStyle.wayPoints1[ab][1]));
}},getRoutePattern:function(g,d,f,c){var b=g[0]==mxConstants.DIRECTION_MASK_EAST?3:g[0];
var e=g[1]==mxConstants.DIRECTION_MASK_EAST?3:g[1];
b-=d;
e-=d;
if(b<1){b+=4;
}if(e<1){e+=4;
}var a=routePatterns[b-1][e-1];
if(f==0||c==0){if(inlineRoutePatterns[b-1][e-1]!=null){a=inlineRoutePatterns[b-1][e-1];
}}return a;
}};
var mxStyleRegistry={values:[],putValue:function(a,b){mxStyleRegistry.values[a]=b;
},getValue:function(a){return mxStyleRegistry.values[a];
},getName:function(b){for(var a in mxStyleRegistry.values){if(mxStyleRegistry.values[a]==b){return a;
}}return null;
}};
mxStyleRegistry.putValue(mxConstants.EDGESTYLE_ELBOW,mxEdgeStyle.ElbowConnector);
mxStyleRegistry.putValue(mxConstants.EDGESTYLE_ENTITY_RELATION,mxEdgeStyle.EntityRelation);
mxStyleRegistry.putValue(mxConstants.EDGESTYLE_LOOP,mxEdgeStyle.Loop);
mxStyleRegistry.putValue(mxConstants.EDGESTYLE_SIDETOSIDE,mxEdgeStyle.SideToSide);
mxStyleRegistry.putValue(mxConstants.EDGESTYLE_TOPTOBOTTOM,mxEdgeStyle.TopToBottom);
mxStyleRegistry.putValue(mxConstants.EDGESTYLE_ORTHOGONAL,mxEdgeStyle.OrthConnector);
mxStyleRegistry.putValue(mxConstants.EDGESTYLE_SEGMENT,mxEdgeStyle.SegmentConnector);
mxStyleRegistry.putValue(mxConstants.PERIMETER_ELLIPSE,mxPerimeter.EllipsePerimeter);
mxStyleRegistry.putValue(mxConstants.PERIMETER_RECTANGLE,mxPerimeter.RectanglePerimeter);
mxStyleRegistry.putValue(mxConstants.PERIMETER_RHOMBUS,mxPerimeter.RhombusPerimeter);
mxStyleRegistry.putValue(mxConstants.PERIMETER_TRIANGLE,mxPerimeter.TrianglePerimeter);
function mxGraphView(a){this.graph=a;
this.translate=new mxPoint();
this.graphBounds=new mxRectangle();
this.states=new mxDictionary();
}mxGraphView.prototype=new mxEventSource();
mxGraphView.prototype.constructor=mxGraphView;
mxGraphView.prototype.EMPTY_POINT=new mxPoint();
mxGraphView.prototype.doneResource=(mxClient.language!="none")?"done":"";
mxGraphView.prototype.updatingDocumentResource=(mxClient.language!="none")?"updatingDocument":"";
mxGraphView.prototype.allowEval=false;
mxGraphView.prototype.captureDocumentGesture=true;
mxGraphView.prototype.rendering=true;
mxGraphView.prototype.graph=null;
mxGraphView.prototype.currentRoot=null;
mxGraphView.prototype.graphBounds=null;
mxGraphView.prototype.scale=1;
mxGraphView.prototype.translate=null;
mxGraphView.prototype.updateStyle=false;
mxGraphView.prototype.getGraphBounds=function(){return this.graphBounds;
};
mxGraphView.prototype.setGraphBounds=function(a){this.graphBounds=a;
};
mxGraphView.prototype.getBounds=function(c){var a=null;
if(c!=null&&c.length>0){var b=this.graph.getModel();
for(var d=0;
d<c.length;
d++){if(b.isVertex(c[d])||b.isEdge(c[d])){var e=this.getState(c[d]);
if(e!=null){if(a==null){a=new mxRectangle(e.x,e.y,e.width,e.height);
}else{a.add(e);
}}}}}return a;
};
mxGraphView.prototype.setCurrentRoot=function(a){if(this.currentRoot!=a){var c=new mxCurrentRootChange(this,a);
c.execute();
var b=new mxUndoableEdit(this,false);
b.add(c);
this.fireEvent(new mxEventObject(mxEvent.UNDO,"edit",b));
this.graph.sizeDidChange();
}return a;
};
mxGraphView.prototype.scaleAndTranslate=function(e,b,a){var c=this.scale;
var d=new mxPoint(this.translate.x,this.translate.y);
if(this.scale!=e||this.translate.x!=b||this.translate.y!=a){this.scale=e;
this.translate.x=b;
this.translate.y=a;
if(this.isEventsEnabled()){this.revalidate();
this.graph.sizeDidChange();
}}this.fireEvent(new mxEventObject(mxEvent.SCALE_AND_TRANSLATE,"scale",e,"previousScale",c,"translate",this.translate,"previousTranslate",d));
};
mxGraphView.prototype.getScale=function(){return this.scale;
};
mxGraphView.prototype.setScale=function(b){var a=this.scale;
if(this.scale!=b){this.scale=b;
if(this.isEventsEnabled()){this.revalidate();
this.graph.sizeDidChange();
}}this.fireEvent(new mxEventObject(mxEvent.SCALE,"scale",b,"previousScale",a));
};
mxGraphView.prototype.getTranslate=function(){return this.translate;
};
mxGraphView.prototype.setTranslate=function(b,a){var c=new mxPoint(this.translate.x,this.translate.y);
if(this.translate.x!=b||this.translate.y!=a){this.translate.x=b;
this.translate.y=a;
if(this.isEventsEnabled()){this.revalidate();
this.graph.sizeDidChange();
}}this.fireEvent(new mxEventObject(mxEvent.TRANSLATE,"translate",this.translate,"previousTranslate",c));
};
mxGraphView.prototype.refresh=function(){if(this.currentRoot!=null){this.clear();
}this.revalidate();
};
mxGraphView.prototype.revalidate=function(){this.invalidate();
this.validate();
};
mxGraphView.prototype.clear=function(a,f,e){var c=this.graph.getModel();
a=a||c.getRoot();
f=(f!=null)?f:false;
e=(e!=null)?e:true;
this.removeState(a);
if(e&&(f||a!=this.currentRoot)){var b=c.getChildCount(a);
for(var d=0;
d<b;
d++){this.clear(c.getChildAt(a,d),f);
}}else{this.invalidate(a);
}};
mxGraphView.prototype.invalidate=function(l,c,k,h){var g=this.graph.getModel();
l=l||g.getRoot();
c=(c!=null)?c:true;
k=(k!=null)?k:true;
h=(h!=null)?h:false;
var b=this.getState(l);
if(b!=null){b.invalid=true;
if(h){b.orderChanged=true;
}}if(c){var e=g.getChildCount(l);
for(var f=0;
f<e;
f++){var d=g.getChildAt(l,f);
this.invalidate(d,c,k,h);
}}if(k){var a=g.getEdgeCount(l);
for(var f=0;
f<a;
f++){this.invalidate(g.getEdgeAt(l,f),c,k);
}}};
mxGraphView.prototype.validate=function(a){var b=mxLog.enter("mxGraphView.validate");
window.status=mxResources.get(this.updatingDocumentResource)||this.updatingDocumentResource;
a=a||((this.currentRoot!=null)?this.currentRoot:this.graph.getModel().getRoot());
this.validateBounds(null,a);
var c=this.validatePoints(null,a);
if(c==null){c=new mxRectangle();
}this.setGraphBounds(c);
this.validateBackground();
window.status=mxResources.get(this.doneResource)||this.doneResource;
mxLog.leave("mxGraphView.validate",b);
};
mxGraphView.prototype.createBackgroundPageShape=function(a){return new mxRectangleShape(a,"white","black");
};
mxGraphView.prototype.validateBackground=function(){var b=this.graph.getBackgroundImage();
if(b!=null){if(this.backgroundImage==null||this.backgroundImage.image!=b.src){if(this.backgroundImage!=null){this.backgroundImage.destroy();
}var c=new mxRectangle(0,0,1,1);
this.backgroundImage=new mxImageShape(c,b.src);
this.backgroundImage.dialect=this.graph.dialect;
this.backgroundImage.init(this.backgroundPane);
this.backgroundImage.redraw();
}this.redrawBackgroundImage(this.backgroundImage,b);
}else{if(this.backgroundImage!=null){this.backgroundImage.destroy();
this.backgroundImage=null;
}}if(this.graph.pageVisible){var c=this.getBackgroundPageBounds();
if(this.backgroundPageShape==null){this.backgroundPageShape=this.createBackgroundPageShape(c);
this.backgroundPageShape.scale=this.scale;
this.backgroundPageShape.isShadow=true;
this.backgroundPageShape.dialect=this.graph.dialect;
this.backgroundPageShape.init(this.backgroundPane);
this.backgroundPageShape.redraw();
mxEvent.addListener(this.backgroundPageShape.node,"dblclick",mxUtils.bind(this,function(f){this.graph.dblClick(f);
}));
var d=(mxClient.IS_TOUCH)?"touchstart":"mousedown";
var e=(mxClient.IS_TOUCH)?"touchmove":"mousemove";
var a=(mxClient.IS_TOUCH)?"touchend":"mouseup";
mxEvent.addListener(this.backgroundPageShape.node,d,mxUtils.bind(this,function(f){this.graph.fireMouseEvent(mxEvent.MOUSE_DOWN,new mxMouseEvent(f));
}));
mxEvent.addListener(this.backgroundPageShape.node,e,mxUtils.bind(this,function(f){if(this.graph.tooltipHandler!=null&&this.graph.tooltipHandler.isHideOnHover()){this.graph.tooltipHandler.hide();
}if(this.graph.isMouseDown&&!mxEvent.isConsumed(f)){this.graph.fireMouseEvent(mxEvent.MOUSE_MOVE,new mxMouseEvent(f));
}}));
mxEvent.addListener(this.backgroundPageShape.node,a,mxUtils.bind(this,function(f){this.graph.fireMouseEvent(mxEvent.MOUSE_UP,new mxMouseEvent(f));
}));
}else{this.backgroundPageShape.scale=this.scale;
this.backgroundPageShape.bounds=c;
this.backgroundPageShape.redraw();
}}else{if(this.backgroundPageShape!=null){this.backgroundPageShape.destroy();
this.backgroundPageShape=null;
}}};
mxGraphView.prototype.getBackgroundPageBounds=function(){var a=this.graph.pageFormat;
var c=this.scale*this.graph.pageScale;
var b=new mxRectangle(this.scale*this.translate.x,this.scale*this.translate.y,a.width*c,a.height*c);
return b;
};
mxGraphView.prototype.redrawBackgroundImage=function(b,a){b.scale=this.scale;
b.bounds.x=this.scale*this.translate.x;
b.bounds.y=this.scale*this.translate.y;
b.bounds.width=this.scale*a.width;
b.bounds.height=this.scale*a.height;
b.redraw();
};
mxGraphView.prototype.validateBounds=function(h,k){var g=this.graph.getModel();
var a=this.getState(k,true);
if(a!=null&&a.invalid){if(!this.graph.isCellVisible(k)){this.removeState(k);
}else{if(k!=this.currentRoot&&h!=null){a.absoluteOffset.x=0;
a.absoluteOffset.y=0;
a.origin.x=h.origin.x;
a.origin.y=h.origin.y;
var e=this.graph.getCellGeometry(k);
if(e!=null){if(!g.isEdge(k)){var c=e.offset||this.EMPTY_POINT;
if(e.relative){a.origin.x+=e.x*h.width/this.scale+c.x;
a.origin.y+=e.y*h.height/this.scale+c.y;
}else{a.absoluteOffset.x=this.scale*c.x;
a.absoluteOffset.y=this.scale*c.y;
a.origin.x+=e.x;
a.origin.y+=e.y;
}}a.x=this.scale*(this.translate.x+a.origin.x);
a.y=this.scale*(this.translate.y+a.origin.y);
a.width=this.scale*e.width;
a.height=this.scale*e.height;
if(g.isVertex(k)){this.updateVertexLabelOffset(a);
}}}}var c=this.graph.getChildOffsetForCell(k);
if(c!=null){a.origin.x+=c.x;
a.origin.y+=c.y;
}}if(a!=null&&(!this.graph.isCellCollapsed(k)||k==this.currentRoot)){var d=g.getChildCount(k);
for(var f=0;
f<d;
f++){var b=g.getChildAt(k,f);
this.validateBounds(a,b);
}}};
mxGraphView.prototype.updateVertexLabelOffset=function(c){var a=mxUtils.getValue(c.style,mxConstants.STYLE_LABEL_POSITION,mxConstants.ALIGN_CENTER);
if(a==mxConstants.ALIGN_LEFT){c.absoluteOffset.x-=c.width;
}else{if(a==mxConstants.ALIGN_RIGHT){c.absoluteOffset.x+=c.width;
}}var b=mxUtils.getValue(c.style,mxConstants.STYLE_VERTICAL_LABEL_POSITION,mxConstants.ALIGN_MIDDLE);
if(b==mxConstants.ALIGN_TOP){c.absoluteOffset.y-=c.height;
}else{if(b==mxConstants.ALIGN_BOTTOM){c.absoluteOffset.y+=c.height;
}}};
mxGraphView.prototype.validatePoints=function(n,o){var k=this.graph.getModel();
var c=this.getState(o);
var p=null;
if(c!=null){if(c.invalid){var g=this.graph.getCellGeometry(o);
if(g!=null&&k.isEdge(o)){var b=this.getState(this.getVisibleTerminal(o,true));
c.setVisibleTerminalState(b,true);
if(b!=null&&k.isEdge(b.cell)&&!k.isAncestor(b.cell,o)){var h=this.getState(k.getParent(b.cell));
this.validatePoints(h,b.cell);
}var l=this.getState(this.getVisibleTerminal(o,false));
c.setVisibleTerminalState(l,false);
if(l!=null&&k.isEdge(l.cell)&&!k.isAncestor(l.cell,o)){var h=this.getState(k.getParent(l.cell));
this.validatePoints(h,l.cell);
}this.updateFixedTerminalPoints(c,b,l);
this.updatePoints(c,g.points,b,l);
this.updateFloatingTerminalPoints(c,b,l);
this.updateEdgeBounds(c);
this.updateEdgeLabelOffset(c);
}else{if(g!=null&&g.relative&&n!=null&&k.isEdge(n.cell)){var m=this.getPoint(n,g);
if(m!=null){c.x=m.x;
c.y=m.y;
m.x=(m.x/this.scale)-this.translate.x;
m.y=(m.y/this.scale)-this.translate.y;
c.origin=m;
this.childMoved(n,c);
}}}c.invalid=false;
if(o!=this.currentRoot){this.graph.cellRenderer.redraw(c,false,this.isRendering());
}}if(k.isEdge(o)||k.isVertex(o)){if(c.shape!=null&&c.shape.boundingBox!=null){p=c.shape.boundingBox.clone();
}if(c.text!=null&&!this.graph.isLabelClipped(c.cell)){if(c.text.boundingBox!=null){if(p!=null){p.add(c.text.boundingBox);
}else{p=c.text.boundingBox.clone();
}}}}}if(c!=null&&(!this.graph.isCellCollapsed(o)||o==this.currentRoot)){var e=k.getChildCount(o);
for(var f=0;
f<e;
f++){var d=k.getChildAt(o,f);
var a=this.validatePoints(c,d);
if(a!=null){if(p==null){p=a;
}else{p.add(a);
}}}}return p;
};
mxGraphView.prototype.childMoved=function(e,f){var a=f.cell;
if(!this.graph.isCellCollapsed(a)||a==this.currentRoot){var c=this.graph.getModel();
var b=c.getChildCount(a);
for(var d=0;
d<b;
d++){this.validateBounds(f,c.getChildAt(a,d));
}}};
mxGraphView.prototype.updateFixedTerminalPoints=function(a,b,c){this.updateFixedTerminalPoint(a,b,true,this.graph.getConnectionConstraint(a,b,true));
this.updateFixedTerminalPoint(a,c,false,this.graph.getConnectionConstraint(a,c,false));
};
mxGraphView.prototype.updateFixedTerminalPoint=function(c,e,a,b){var h=null;
if(b!=null){h=this.graph.getConnectionPoint(e,b);
}if(h==null&&e==null){var i=this.scale;
var f=this.translate;
var g=c.origin;
var d=this.graph.getCellGeometry(c.cell);
h=d.getTerminalPoint(a);
if(h!=null){h=new mxPoint(i*(f.x+h.x+g.x),i*(f.y+h.y+g.y));
}}c.setAbsoluteTerminalPoint(h,a);
};
mxGraphView.prototype.updatePoints=function(d,k,b,h){if(d!=null){var m=[];
m.push(d.absolutePoints[0]);
var g=this.getEdgeStyle(d,k,b,h);
if(g!=null){var a=this.getTerminalPort(d,b,true);
var c=this.getTerminalPort(d,h,false);
g(d,a,c,k,m);
}else{if(k!=null){for(var f=0;
f<k.length;
f++){if(k[f]!=null){var l=mxUtils.clone(k[f]);
m.push(this.transformControlPoint(d,l));
}}}}var e=d.absolutePoints;
m.push(e[e.length-1]);
d.absolutePoints=m;
}};
mxGraphView.prototype.transformControlPoint=function(a,b){var c=a.origin;
return new mxPoint(this.scale*(b.x+this.translate.x+c.x),this.scale*(b.y+this.translate.y+c.y));
};
mxGraphView.prototype.getEdgeStyle=function(edge,points,source,target){var edgeStyle=(source!=null&&source==target)?mxUtils.getValue(edge.style,mxConstants.STYLE_LOOP,this.graph.defaultLoopStyle):(!mxUtils.getValue(edge.style,mxConstants.STYLE_NOEDGESTYLE,false)?edge.style[mxConstants.STYLE_EDGE]:null);
if(typeof(edgeStyle)=="string"){var tmp=mxStyleRegistry.getValue(edgeStyle);
if(tmp==null&&this.isAllowEval()){tmp=mxUtils.eval(edgeStyle);
}edgeStyle=tmp;
}if(typeof(edgeStyle)=="function"){return edgeStyle;
}return null;
};
mxGraphView.prototype.updateFloatingTerminalPoints=function(c,b,d){var e=c.absolutePoints;
var f=e[0];
var a=e[e.length-1];
if(a==null&&d!=null){this.updateFloatingTerminalPoint(c,d,b,false);
}if(f==null&&b!=null){this.updateFloatingTerminalPoint(c,b,d,true);
}};
mxGraphView.prototype.updateFloatingTerminalPoint=function(d,c,g,a){c=this.getTerminalPort(d,c,a);
var h=this.getNextPoint(d,g,a);
var f=mxUtils.toRadians(Number(c.style[mxConstants.STYLE_ROTATION]||"0"));
var b=new mxPoint(c.getCenterX(),c.getCenterY());
if(f!=0){var k=Math.cos(-f);
var i=Math.sin(-f);
h=mxUtils.getRotatedPoint(h,k,i,b);
}var e=parseFloat(d.style[mxConstants.STYLE_PERIMETER_SPACING]||0);
e+=parseFloat(d.style[(a)?mxConstants.STYLE_SOURCE_PERIMETER_SPACING:mxConstants.STYLE_TARGET_PERIMETER_SPACING]||0);
var l=this.getPerimeterPoint(c,h,this.graph.isOrthogonal(d),e);
if(f!=0){var k=Math.cos(f);
var i=Math.sin(f);
l=mxUtils.getRotatedPoint(l,k,i,b);
}d.setAbsoluteTerminalPoint(l,a);
};
mxGraphView.prototype.getTerminalPort=function(e,c,d){var b=(d)?mxConstants.STYLE_SOURCE_PORT:mxConstants.STYLE_TARGET_PORT;
var f=mxUtils.getValue(e.style,b);
if(f!=null){var a=this.getState(this.graph.getModel().getCell(f));
if(a!=null){c=a;
}}return c;
};
mxGraphView.prototype.getPerimeterPoint=function(d,e,g,c){var a=null;
if(d!=null){var b=this.getPerimeterFunction(d);
if(b!=null&&e!=null){var f=this.getPerimeterBounds(d,c);
if(f.width>0||f.height>0){a=b(f,d,e,g);
}}if(a==null){a=this.getPoint(d);
}}return a;
};
mxGraphView.prototype.getRoutingCenterX=function(b){var a=(b.style!=null)?parseFloat(b.style[mxConstants.STYLE_ROUTING_CENTER_X])||0:0;
return b.getCenterX()+a*b.width;
};
mxGraphView.prototype.getRoutingCenterY=function(b){var a=(b.style!=null)?parseFloat(b.style[mxConstants.STYLE_ROUTING_CENTER_Y])||0:0;
return b.getCenterY()+a*b.height;
};
mxGraphView.prototype.getPerimeterBounds=function(b,a){a=(a!=null)?a:0;
if(b!=null){a+=parseFloat(b.style[mxConstants.STYLE_PERIMETER_SPACING]||0);
}return b.getPerimeterBounds(a*this.scale);
};
mxGraphView.prototype.getPerimeterFunction=function(state){var perimeter=state.style[mxConstants.STYLE_PERIMETER];
if(typeof(perimeter)=="string"){var tmp=mxStyleRegistry.getValue(perimeter);
if(tmp==null&&this.isAllowEval()){tmp=mxUtils.eval(perimeter);
}perimeter=tmp;
}if(typeof(perimeter)=="function"){return perimeter;
}return null;
};
mxGraphView.prototype.getNextPoint=function(c,e,d){var f=c.absolutePoints;
var a=null;
if(f!=null&&(d||f.length>2||e==null)){var b=f.length;
a=f[(d)?Math.min(1,b-1):Math.max(0,b-2)];
}if(a==null&&e!=null){a=new mxPoint(e.getCenterX(),e.getCenterY());
}return a;
};
mxGraphView.prototype.getVisibleTerminal=function(c,d){var b=this.graph.getModel();
var a=b.getTerminal(c,d);
var e=a;
while(a!=null&&a!=this.currentRoot){if(!this.graph.isCellVisible(e)||this.graph.isCellCollapsed(a)){e=a;
}a=b.getParent(a);
}if(b.getParent(e)==b.getRoot()){e=null;
}return e;
};
mxGraphView.prototype.updateEdgeBounds=function(c){var o=c.absolutePoints;
c.length=0;
if(o!=null&&o.length>0){var p=o[0];
var m=o[o.length-1];
if(p==null||m==null){if(c.cell!=this.currentRoot){this.clear(c.cell,true);
}}else{if(p.x!=m.x||p.y!=m.y){var s=m.x-p.x;
var q=m.y-p.y;
c.terminalDistance=Math.sqrt(s*s+q*q);
}else{c.terminalDistance=0;
}var d=0;
var k=[];
var r=p;
if(r!=null){var f=r.x;
var e=r.y;
var b=f;
var a=e;
for(var h=1;
h<o.length;
h++){var g=o[h];
if(g!=null){var s=r.x-g.x;
var q=r.y-g.y;
var l=Math.sqrt(s*s+q*q);
k.push(l);
d+=l;
r=g;
f=Math.min(r.x,f);
e=Math.min(r.y,e);
b=Math.max(r.x,b);
a=Math.max(r.y,a);
}}c.length=d;
c.segments=k;
var n=1;
c.x=f;
c.y=e;
c.width=Math.max(n,b-f);
c.height=Math.max(n,a-e);
}}}};
mxGraphView.prototype.getPoint=function(d,e){var i=d.getCenterX();
var h=d.getCenterY();
if(d.segments!=null&&(e==null||e.relative)){var n=(e!=null)?e.x/2:0;
var t=d.absolutePoints.length;
var p=(n+0.5)*d.length;
var a=d.segments[0];
var c=0;
var g=1;
while(p>c+a&&g<t-1){c+=a;
a=d.segments[g++];
}var o=(a==0)?0:(p-c)/a;
var b=d.absolutePoints[g-1];
var v=d.absolutePoints[g];
if(b!=null&&v!=null){var m=0;
var r=0;
var q=0;
if(e!=null){m=e.y;
var f=e.offset;
if(f!=null){r=f.x;
q=f.y;
}}var l=v.x-b.x;
var k=v.y-b.y;
var u=(a==0)?0:k/a;
var s=(a==0)?0:l/a;
i=b.x+l*o+(u*m+r)*this.scale;
h=b.y+k*o-(s*m-q)*this.scale;
}}else{if(e!=null){var f=e.offset;
if(f!=null){i+=f.x;
h+=f.y;
}}}return new mxPoint(i,h);
};
mxGraphView.prototype.getRelativePoint=function(t,l,k){var e=this.graph.getModel();
var g=e.getGeometry(t.cell);
if(g!=null){var C=t.absolutePoints.length;
if(g.relative&&C>1){var m=t.length;
var u=t.segments;
var b=t.absolutePoints[0];
var G=t.absolutePoints[1];
var a=mxUtils.ptSegDistSq(b.x,b.y,G.x,G.y,l,k);
var h=0;
var D=0;
var f=0;
for(var v=2;
v<C;
v++){D+=u[v-2];
G=t.absolutePoints[v];
var s=mxUtils.ptSegDistSq(b.x,b.y,G.x,G.y,l,k);
if(s<=a){a=s;
h=v-1;
f=D;
}b=G;
}var A=u[h];
b=t.absolutePoints[h];
G=t.absolutePoints[h+1];
var w=b.x;
var c=b.y;
var z=G.x;
var d=G.y;
var q=l;
var o=k;
var n=w-z;
var p=c-d;
q-=z;
o-=d;
var H=0;
q=n-q;
o=p-o;
var r=q*n+o*p;
if(r<=0){H=0;
}else{H=r*r/(n*n+p*p);
}var B=Math.sqrt(H);
if(B>A){B=A;
}var F=Math.sqrt(mxUtils.ptSegDistSq(b.x,b.y,G.x,G.y,l,k));
var E=mxUtils.relativeCcw(b.x,b.y,G.x,G.y,l,k);
if(E==-1){F=-F;
}return new mxPoint(((m/2-f-B)/m)*-2,F/this.scale);
}}return new mxPoint();
};
mxGraphView.prototype.updateEdgeLabelOffset=function(a){var k=a.absolutePoints;
a.absoluteOffset.x=a.getCenterX();
a.absoluteOffset.y=a.getCenterY();
if(k!=null&&k.length>0&&a.segments!=null){var g=this.graph.getCellGeometry(a.cell);
if(g.relative){var d=this.getPoint(a,g);
if(d!=null){a.absoluteOffset=d;
}}else{var l=k[0];
var e=k[k.length-1];
if(l!=null&&e!=null){var n=e.x-l.x;
var m=e.y-l.y;
var b=0;
var i=0;
var c=g.offset;
if(c!=null){b=c.x;
i=c.y;
}var h=l.x+n/2+b*this.scale;
var f=l.y+m/2+i*this.scale;
a.absoluteOffset.x=h;
a.absoluteOffset.y=f;
}}}};
mxGraphView.prototype.getState=function(a,b){b=b||false;
var c=null;
if(a!=null){c=this.states.get(a);
if(this.graph.isCellVisible(a)){if(c==null&&b&&this.graph.isCellVisible(a)){c=this.createState(a);
this.states.put(a,c);
}else{if(b&&c!=null&&this.updateStyle){c.style=this.graph.getCellStyle(a);
}}}}return c;
};
mxGraphView.prototype.isRendering=function(){return this.rendering;
};
mxGraphView.prototype.setRendering=function(a){this.rendering=a;
};
mxGraphView.prototype.isAllowEval=function(){return this.allowEval;
};
mxGraphView.prototype.setAllowEval=function(a){this.allowEval=a;
};
mxGraphView.prototype.getStates=function(){return this.states;
};
mxGraphView.prototype.setStates=function(a){this.states=a;
};
mxGraphView.prototype.getCellStates=function(b){if(b==null){return this.states;
}else{var a=[];
for(var c=0;
c<b.length;
c++){var d=this.getState(b[c]);
if(d!=null){a.push(d);
}}return a;
}};
mxGraphView.prototype.removeState=function(a){var b=null;
if(a!=null){b=this.states.remove(a);
if(b!=null){this.graph.cellRenderer.destroy(b);
b.destroy();
}}return b;
};
mxGraphView.prototype.createState=function(a){var b=this.graph.getCellStyle(a);
var c=new mxCellState(this,a,b);
this.graph.cellRenderer.initialize(c,this.isRendering());
return c;
};
mxGraphView.prototype.getCanvas=function(){return this.canvas;
};
mxGraphView.prototype.getBackgroundPane=function(){return this.backgroundPane;
};
mxGraphView.prototype.getDrawPane=function(){return this.drawPane;
};
mxGraphView.prototype.getOverlayPane=function(){return this.overlayPane;
};
mxGraphView.prototype.isContainerEvent=function(a){var b=mxEvent.getSource(a);
return(b==this.graph.container||b.parentNode==this.backgroundPane||(b.parentNode!=null&&b.parentNode.parentNode==this.backgroundPane)||b==this.canvas.parentNode||b==this.canvas||b==this.backgroundPane||b==this.drawPane||b==this.overlayPane);
};
mxGraphView.prototype.isScrollEvent=function(c){var g=mxUtils.getOffset(this.graph.container);
var f=new mxPoint(c.clientX-g.x,c.clientY-g.y);
var a=this.graph.container.offsetWidth;
var b=this.graph.container.clientWidth;
if(a>b&&f.x>b+2&&f.x<=a){return true;
}var e=this.graph.container.offsetHeight;
var d=this.graph.container.clientHeight;
if(e>d&&f.y>d+2&&f.y<=e){return true;
}return false;
};
mxGraphView.prototype.init=function(){this.installListeners();
var a=this.graph;
if(a.dialect==mxConstants.DIALECT_SVG){this.createSvg();
}else{if(a.dialect==mxConstants.DIALECT_VML){this.createVml();
}else{this.createHtml();
}}};
mxGraphView.prototype.installListeners=function(){var e=this.graph;
var b=e.container;
if(b!=null){var d=(mxClient.IS_TOUCH)?"touchstart":"mousedown";
var f=(mxClient.IS_TOUCH)?"touchmove":"mousemove";
var a=(mxClient.IS_TOUCH)?"touchend":"mouseup";
mxEvent.addListener(b,d,mxUtils.bind(this,function(g){if(mxClient.IS_TOUCH&&e.isEditing()){e.stopEditing(!e.isInvokesStopCellEditing());
}if(this.isContainerEvent(g)&&((!mxClient.IS_IE&&!mxClient.IS_GC&&!mxClient.IS_OP&&!mxClient.IS_SF)||!this.isScrollEvent(g))){e.fireMouseEvent(mxEvent.MOUSE_DOWN,new mxMouseEvent(g));
}}));
mxEvent.addListener(b,f,mxUtils.bind(this,function(g){if(this.isContainerEvent(g)){e.fireMouseEvent(mxEvent.MOUSE_MOVE,new mxMouseEvent(g));
}}));
mxEvent.addListener(b,a,mxUtils.bind(this,function(g){if(this.isContainerEvent(g)){e.fireMouseEvent(mxEvent.MOUSE_UP,new mxMouseEvent(g));
}}));
mxEvent.addListener(b,"dblclick",mxUtils.bind(this,function(g){e.dblClick(g);
}));
var c=function(h){var i=null;
if(mxClient.IS_TOUCH){var g=mxEvent.getClientX(h);
var l=mxEvent.getClientY(h);
var k=mxUtils.convertPoint(b,g,l);
i=e.view.getState(e.getCellAt(k.x,k.y));
}return i;
};
e.addMouseListener({mouseDown:function(g,h){e.panningHandler.hideMenu();
},mouseMove:function(){},mouseUp:function(){}});
this.moveHandler=mxUtils.bind(this,function(g){if(e.tooltipHandler!=null&&e.tooltipHandler.isHideOnHover()){e.tooltipHandler.hide();
}if(this.captureDocumentGesture&&e.isMouseDown&&!mxEvent.isConsumed(g)){e.fireMouseEvent(mxEvent.MOUSE_MOVE,new mxMouseEvent(g,c(g)));
}});
mxEvent.addListener(document,f,this.moveHandler);
this.endHandler=mxUtils.bind(this,function(g){if(this.captureDocumentGesture){e.fireMouseEvent(mxEvent.MOUSE_UP,new mxMouseEvent(g));
}});
mxEvent.addListener(document,a,this.endHandler);
}};
mxGraphView.prototype.createHtml=function(){var a=this.graph.container;
if(a!=null){this.canvas=this.createHtmlPane("100%","100%");
this.backgroundPane=this.createHtmlPane("1px","1px");
this.drawPane=this.createHtmlPane("1px","1px");
this.overlayPane=this.createHtmlPane("1px","1px");
this.canvas.appendChild(this.backgroundPane);
this.canvas.appendChild(this.drawPane);
this.canvas.appendChild(this.overlayPane);
a.appendChild(this.canvas);
if(mxClient.IS_QUIRKS){var b=mxUtils.bind(this,function(d){var f=this.getGraphBounds();
var e=f.x+f.width+this.graph.border;
var c=f.y+f.height+this.graph.border;
this.updateHtmlCanvasSize(e,c);
});
mxEvent.addListener(window,"resize",b);
}}};
mxGraphView.prototype.updateHtmlCanvasSize=function(c,a){if(this.graph.container!=null){var b=this.graph.container.offsetWidth;
var d=this.graph.container.offsetHeight;
if(b<c){this.canvas.style.width=c+"px";
}else{this.canvas.style.width="100%";
}if(d<a){this.canvas.style.height=a+"px";
}else{this.canvas.style.height="100%";
}}};
mxGraphView.prototype.createHtmlPane=function(b,a){var c=document.createElement("DIV");
if(b!=null&&a!=null){c.style.position="absolute";
c.style.left="0px";
c.style.top="0px";
c.style.width=b;
c.style.height=a;
}else{c.style.position="relative";
}return c;
};
mxGraphView.prototype.createVml=function(){var b=this.graph.container;
if(b!=null){var c=b.offsetWidth;
var a=b.offsetHeight;
this.canvas=this.createVmlPane(c,a);
this.backgroundPane=this.createVmlPane(c,a);
this.drawPane=this.createVmlPane(c,a);
this.overlayPane=this.createVmlPane(c,a);
this.canvas.appendChild(this.backgroundPane);
this.canvas.appendChild(this.drawPane);
this.canvas.appendChild(this.overlayPane);
b.appendChild(this.canvas);
}};
mxGraphView.prototype.createVmlPane=function(b,a){var c=document.createElement("v:group");
c.style.position="absolute";
c.style.left="0px";
c.style.top="0px";
c.style.width=b+"px";
c.style.height=a+"px";
c.setAttribute("coordsize",b+","+a);
c.setAttribute("coordorigin","0,0");
return c;
};
mxGraphView.prototype.createSvg=function(){var b=this.graph.container;
this.canvas=document.createElementNS(mxConstants.NS_SVG,"g");
this.backgroundPane=document.createElementNS(mxConstants.NS_SVG,"g");
this.canvas.appendChild(this.backgroundPane);
this.drawPane=document.createElementNS(mxConstants.NS_SVG,"g");
this.canvas.appendChild(this.drawPane);
this.overlayPane=document.createElementNS(mxConstants.NS_SVG,"g");
this.canvas.appendChild(this.overlayPane);
var a=document.createElementNS(mxConstants.NS_SVG,"svg");
a.style.width="100%";
a.style.height="100%";
a.style.display="block";
a.appendChild(this.canvas);
if(b!=null){b.appendChild(a);
var c=mxUtils.getCurrentStyle(b);
if(c.position=="static"){b.style.position="relative";
}}};
mxGraphView.prototype.destroy=function(){var b=(this.canvas!=null)?this.canvas.ownerSVGElement:null;
if(b==null){b=this.canvas;
}if(b!=null&&b.parentNode!=null){this.clear(this.currentRoot,true);
if(this.moveHandler!=null){var c=(mxClient.IS_TOUCH)?"touchmove":"mousemove";
mxEvent.removeListener(document,c,this.moveHandler);
this.moveHandler=null;
}if(this.endHandler!=null){var a=(mxClient.IS_TOUCH)?"touchend":"mouseup";
mxEvent.removeListener(document,a,this.endHandler);
this.endHandler=null;
}mxEvent.release(this.graph.container);
b.parentNode.removeChild(b);
this.canvas=null;
this.backgroundPane=null;
this.drawPane=null;
this.overlayPane=null;
}};
function mxCurrentRootChange(b,a){this.view=b;
this.root=a;
this.previous=a;
this.isUp=a==null;
if(!this.isUp){var d=this.view.currentRoot;
var c=this.view.graph.getModel();
while(d!=null){if(d==a){this.isUp=true;
break;
}d=c.getParent(d);
}}}mxCurrentRootChange.prototype.execute=function(){var b=this.view.currentRoot;
this.view.currentRoot=this.previous;
this.previous=b;
var c=this.view.graph.getTranslateForRoot(this.view.currentRoot);
if(c!=null){this.view.translate=new mxPoint(-c.x,-c.y);
}var a=(this.isUp)?mxEvent.UP:mxEvent.DOWN;
this.view.fireEvent(new mxEventObject(a,"root",this.view.currentRoot,"previous",this.previous));
if(this.isUp){this.view.clear(this.view.currentRoot,true);
this.view.validate();
}else{this.view.refresh();
}this.isUp=!this.isUp;
};
function mxGraph(a,b,d,c){this.mouseListeners=null;
this.renderHint=d;
if(mxClient.IS_SVG){this.dialect=mxConstants.DIALECT_SVG;
}else{if(d==mxConstants.RENDERING_HINT_EXACT&&mxClient.IS_VML){this.dialect=mxConstants.DIALECT_VML;
}else{if(d==mxConstants.RENDERING_HINT_FASTEST){this.dialect=mxConstants.DIALECT_STRICTHTML;
}else{if(d==mxConstants.RENDERING_HINT_FASTER){this.dialect=mxConstants.DIALECT_PREFERHTML;
}else{this.dialect=mxConstants.DIALECT_MIXEDHTML;
}}}}this.model=(b!=null)?b:new mxGraphModel();
this.multiplicities=[];
this.imageBundles=[];
this.cellRenderer=this.createCellRenderer();
this.setSelectionModel(this.createSelectionModel());
this.setStylesheet((c!=null)?c:this.createStylesheet());
this.view=this.createGraphView();
this.graphModelChangeListener=mxUtils.bind(this,function(f,e){this.graphModelChanged(e.getProperty("edit").changes);
});
this.model.addListener(mxEvent.CHANGE,this.graphModelChangeListener);
this.createHandlers();
if(a!=null){this.init(a);
}this.view.revalidate();
}if(mxLoadResources){mxResources.add(mxClient.basePath+"/resources/graph");
}mxGraph.prototype=new mxEventSource();
mxGraph.prototype.constructor=mxGraph;
mxGraph.prototype.EMPTY_ARRAY=[];
mxGraph.prototype.mouseListeners=null;
mxGraph.prototype.isMouseDown=false;
mxGraph.prototype.model=null;
mxGraph.prototype.view=null;
mxGraph.prototype.stylesheet=null;
mxGraph.prototype.selectionModel=null;
mxGraph.prototype.cellEditor=null;
mxGraph.prototype.cellRenderer=null;
mxGraph.prototype.multiplicities=null;
mxGraph.prototype.renderHint=null;
mxGraph.prototype.dialect=null;
mxGraph.prototype.gridSize=10;
mxGraph.prototype.gridEnabled=true;
mxGraph.prototype.portsEnabled=true;
mxGraph.prototype.doubleTapEnabled=true;
mxGraph.prototype.doubleTapTimeout=700;
mxGraph.prototype.doubleTapTolerance=25;
mxGraph.prototype.lastTouchY=0;
mxGraph.prototype.lastTouchY=0;
mxGraph.prototype.lastTouchTime=0;
mxGraph.prototype.gestureEnabled=true;
mxGraph.prototype.tolerance=4;
mxGraph.prototype.defaultOverlap=0.5;
mxGraph.prototype.defaultParent=null;
mxGraph.prototype.alternateEdgeStyle=null;
mxGraph.prototype.backgroundImage=null;
mxGraph.prototype.pageVisible=false;
mxGraph.prototype.pageBreaksVisible=false;
mxGraph.prototype.pageBreakColor="gray";
mxGraph.prototype.pageBreakDashed=true;
mxGraph.prototype.minPageBreakDist=20;
mxGraph.prototype.preferPageSize=false;
mxGraph.prototype.pageFormat=mxConstants.PAGE_FORMAT_A4_PORTRAIT;
mxGraph.prototype.pageScale=1.5;
mxGraph.prototype.enabled=true;
mxGraph.prototype.escapeEnabled=true;
mxGraph.prototype.invokesStopCellEditing=true;
mxGraph.prototype.enterStopsCellEditing=false;
mxGraph.prototype.useScrollbarsForPanning=true;
mxGraph.prototype.exportEnabled=true;
mxGraph.prototype.importEnabled=true;
mxGraph.prototype.cellsLocked=false;
mxGraph.prototype.cellsCloneable=true;
mxGraph.prototype.foldingEnabled=true;
mxGraph.prototype.cellsEditable=true;
mxGraph.prototype.cellsDeletable=true;
mxGraph.prototype.cellsMovable=true;
mxGraph.prototype.edgeLabelsMovable=true;
mxGraph.prototype.vertexLabelsMovable=false;
mxGraph.prototype.dropEnabled=false;
mxGraph.prototype.splitEnabled=true;
mxGraph.prototype.cellsResizable=true;
mxGraph.prototype.cellsBendable=true;
mxGraph.prototype.cellsSelectable=true;
mxGraph.prototype.cellsDisconnectable=true;
mxGraph.prototype.autoSizeCells=false;
mxGraph.prototype.autoScroll=true;
mxGraph.prototype.timerAutoScroll=false;
mxGraph.prototype.allowAutoPanning=false;
mxGraph.prototype.ignoreScrollbars=false;
mxGraph.prototype.autoExtend=true;
mxGraph.prototype.maximumGraphBounds=null;
mxGraph.prototype.minimumGraphSize=null;
mxGraph.prototype.minimumContainerSize=null;
mxGraph.prototype.maximumContainerSize=null;
mxGraph.prototype.resizeContainer=false;
mxGraph.prototype.border=0;
mxGraph.prototype.ordered=true;
mxGraph.prototype.keepEdgesInForeground=false;
mxGraph.prototype.keepEdgesInBackground=true;
mxGraph.prototype.allowNegativeCoordinates=true;
mxGraph.prototype.constrainChildren=true;
mxGraph.prototype.extendParents=true;
mxGraph.prototype.extendParentsOnAdd=true;
mxGraph.prototype.collapseToPreferredSize=true;
mxGraph.prototype.zoomFactor=1.2;
mxGraph.prototype.keepSelectionVisibleOnZoom=false;
mxGraph.prototype.centerZoom=true;
mxGraph.prototype.resetViewOnRootChange=true;
mxGraph.prototype.resetEdgesOnResize=false;
mxGraph.prototype.resetEdgesOnMove=false;
mxGraph.prototype.resetEdgesOnConnect=true;
mxGraph.prototype.allowLoops=false;
mxGraph.prototype.defaultLoopStyle=mxEdgeStyle.Loop;
mxGraph.prototype.multigraph=true;
mxGraph.prototype.connectableEdges=false;
mxGraph.prototype.allowDanglingEdges=true;
mxGraph.prototype.cloneInvalidEdges=false;
mxGraph.prototype.disconnectOnMove=true;
mxGraph.prototype.labelsVisible=true;
mxGraph.prototype.htmlLabels=false;
mxGraph.prototype.swimlaneSelectionEnabled=true;
mxGraph.prototype.swimlaneNesting=true;
mxGraph.prototype.swimlaneIndicatorColorAttribute=mxConstants.STYLE_FILLCOLOR;
mxGraph.prototype.imageBundles=null;
mxGraph.prototype.minFitScale=0.1;
mxGraph.prototype.maxFitScale=8;
mxGraph.prototype.panDx=0;
mxGraph.prototype.panDy=0;
mxGraph.prototype.collapsedImage=new mxImage(mxClient.imageBasePath+"/collapsed.gif",9,9);
mxGraph.prototype.expandedImage=new mxImage(mxClient.imageBasePath+"/expanded.gif",9,9);
mxGraph.prototype.warningImage=new mxImage(mxClient.imageBasePath+"/warning"+((mxClient.IS_MAC)?".png":".gif"),16,16);
mxGraph.prototype.alreadyConnectedResource=(mxClient.language!="none")?"alreadyConnected":"";
mxGraph.prototype.containsValidationErrorsResource=(mxClient.language!="none")?"containsValidationErrors":"";
mxGraph.prototype.collapseExpandResource=(mxClient.language!="none")?"collapse-expand":"";
mxGraph.prototype.init=function(a){this.container=a;
this.cellEditor=this.createCellEditor();
this.view.init();
this.sizeDidChange();
if(mxClient.IS_IE){mxEvent.addListener(window,"unload",mxUtils.bind(this,function(){this.destroy();
}));
mxEvent.addListener(a,"selectstart",mxUtils.bind(this,function(){return this.isEditing();
}));
}};
mxGraph.prototype.createHandlers=function(a){this.tooltipHandler=new mxTooltipHandler(this);
this.tooltipHandler.setEnabled(false);
this.panningHandler=new mxPanningHandler(this);
this.panningHandler.panningEnabled=false;
this.selectionCellsHandler=new mxSelectionCellsHandler(this);
this.connectionHandler=new mxConnectionHandler(this);
this.connectionHandler.setEnabled(false);
this.graphHandler=new mxGraphHandler(this);
};
mxGraph.prototype.createSelectionModel=function(){return new mxGraphSelectionModel(this);
};
mxGraph.prototype.createStylesheet=function(){return new mxStylesheet();
};
mxGraph.prototype.createGraphView=function(){return new mxGraphView(this);
};
mxGraph.prototype.createCellRenderer=function(){return new mxCellRenderer();
};
mxGraph.prototype.createCellEditor=function(){return new mxCellEditor(this);
};
mxGraph.prototype.getModel=function(){return this.model;
};
mxGraph.prototype.getView=function(){return this.view;
};
mxGraph.prototype.getStylesheet=function(){return this.stylesheet;
};
mxGraph.prototype.setStylesheet=function(a){this.stylesheet=a;
};
mxGraph.prototype.getSelectionModel=function(){return this.selectionModel;
};
mxGraph.prototype.setSelectionModel=function(a){this.selectionModel=a;
};
mxGraph.prototype.getSelectionCellsForChanges=function(d){var b=[];
for(var c=0;
c<d.length;
c++){var e=d[c];
if(e.constructor!=mxRootChange){var a=null;
if(e instanceof mxChildChange&&e.previous==null){a=e.child;
}else{if(e.cell!=null&&e.cell instanceof mxCell){a=e.cell;
}}if(a!=null&&mxUtils.indexOf(b,a)<0){b.push(a);
}}}return this.getModel().getTopmostCells(b);
};
mxGraph.prototype.graphModelChanged=function(b){for(var a=0;
a<b.length;
a++){this.processChange(b[a]);
}this.removeSelectionCells(this.getRemovedCellsForChanges(b));
this.view.validate();
this.sizeDidChange();
};
mxGraph.prototype.getRemovedCellsForChanges=function(c){var a=[];
for(var b=0;
b<c.length;
b++){var d=c[b];
if(d instanceof mxRootChange){break;
}else{if(d instanceof mxChildChange){if(d.previous!=null&&d.parent==null){a=a.concat(this.model.getDescendants(d.child));
}}else{if(d instanceof mxVisibleChange){a=a.concat(this.model.getDescendants(d.cell));
}}}}return a;
};
mxGraph.prototype.processChange=function(b){if(b instanceof mxRootChange){this.clearSelection();
this.removeStateForCell(b.previous);
if(this.resetViewOnRootChange){this.view.scale=1;
this.view.translate.x=0;
this.view.translate.y=0;
}this.fireEvent(new mxEventObject(mxEvent.ROOT));
}else{if(b instanceof mxChildChange){var a=this.model.getParent(b.child);
if(a!=null){this.view.invalidate(b.child,true,false,b.previous!=null);
}else{this.removeStateForCell(b.child);
if(this.view.currentRoot==b.child){this.home();
}}if(a!=b.previous){if(a!=null){this.view.invalidate(a,false,false);
}if(b.previous!=null){this.view.invalidate(b.previous,false,false);
}}}else{if(b instanceof mxTerminalChange||b instanceof mxGeometryChange){this.view.invalidate(b.cell);
}else{if(b instanceof mxValueChange){this.view.invalidate(b.cell,false,false);
}else{if(b instanceof mxStyleChange){this.view.invalidate(b.cell,true,true,false);
this.view.removeState(b.cell);
}else{if(b.cell!=null&&b.cell instanceof mxCell){this.removeStateForCell(b.cell);
}}}}}}};
mxGraph.prototype.removeStateForCell=function(a){var b=this.model.getChildCount(a);
for(var c=0;
c<b;
c++){this.removeStateForCell(this.model.getChildAt(a,c));
}this.view.removeState(a);
};
mxGraph.prototype.addCellOverlay=function(a,b){if(a.overlays==null){a.overlays=[];
}a.overlays.push(b);
var c=this.view.getState(a);
if(c!=null){this.cellRenderer.redraw(c);
}this.fireEvent(new mxEventObject(mxEvent.ADD_OVERLAY,"cell",a,"overlay",b));
return b;
};
mxGraph.prototype.getCellOverlays=function(a){return a.overlays;
};
mxGraph.prototype.removeCellOverlay=function(a,c){if(c==null){this.removeCellOverlays(a);
}else{var b=mxUtils.indexOf(a.overlays,c);
if(b>=0){a.overlays.splice(b,1);
if(a.overlays.length==0){a.overlays=null;
}var d=this.view.getState(a);
if(d!=null){this.cellRenderer.redraw(d);
}this.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,"cell",a,"overlay",c));
}else{c=null;
}}return c;
};
mxGraph.prototype.removeCellOverlays=function(a){var c=a.overlays;
if(c!=null){a.overlays=null;
var d=this.view.getState(a);
if(d!=null){this.cellRenderer.redraw(d);
}for(var b=0;
b<c.length;
b++){this.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,"cell",a,"overlay",c[b]));
}}return c;
};
mxGraph.prototype.clearCellOverlays=function(a){a=(a!=null)?a:this.model.getRoot();
this.removeCellOverlays(a);
var b=this.model.getChildCount(a);
for(var c=0;
c<b;
c++){var d=this.model.getChildAt(a,c);
this.clearCellOverlays(d);
}};
mxGraph.prototype.setCellWarning=function(a,d,b,e){if(d!=null&&d.length>0){b=(b!=null)?b:this.warningImage;
var c=new mxCellOverlay(b,"<font color=red>"+d+"</font>");
if(e){c.addListener(mxEvent.CLICK,mxUtils.bind(this,function(g,f){if(this.isEnabled()){this.setSelectionCell(a);
}}));
}return this.addCellOverlay(a,c);
}else{this.removeCellOverlays(a);
}return null;
};
mxGraph.prototype.startEditing=function(a){this.startEditingAtCell(null,a);
};
mxGraph.prototype.startEditingAtCell=function(a,b){if(a==null){a=this.getSelectionCell();
if(a!=null&&!this.isCellEditable(a)){a=null;
}}if(a!=null){this.fireEvent(new mxEventObject(mxEvent.START_EDITING,"cell",a,"event",b));
this.cellEditor.startEditing(a,b);
}};
mxGraph.prototype.getEditingValue=function(a,b){return this.convertValueToString(a);
};
mxGraph.prototype.stopEditing=function(a){this.cellEditor.stopEditing(a);
};
mxGraph.prototype.labelChanged=function(a,c,b){this.model.beginUpdate();
try{this.cellLabelChanged(a,c,this.isAutoSizeCell(a));
this.fireEvent(new mxEventObject(mxEvent.LABEL_CHANGED,"cell",a,"value",c,"event",b));
}finally{this.model.endUpdate();
}return a;
};
mxGraph.prototype.cellLabelChanged=function(b,c,a){this.model.beginUpdate();
try{this.model.setValue(b,c);
if(a){this.cellSizeUpdated(b,false);
}}finally{this.model.endUpdate();
}};
mxGraph.prototype.escape=function(a){this.stopEditing(true);
this.connectionHandler.reset();
this.graphHandler.reset();
var b=this.getSelectionCells();
for(var c=0;
c<b.length;
c++){var d=this.view.getState(b[c]);
if(d!=null&&d.handler!=null){d.handler.reset();
}}};
mxGraph.prototype.click=function(c){var b=c.getEvent();
var a=c.getCell();
var e=new mxEventObject(mxEvent.CLICK,"event",b,"cell",a);
if(c.isConsumed()){e.consume();
}this.fireEvent(e);
if(this.isEnabled()&&!mxEvent.isConsumed(b)&&!e.isConsumed()){if(a!=null){this.selectCellForEvent(a,b);
}else{var d=null;
if(this.isSwimlaneSelectionEnabled()){d=this.getSwimlaneAt(c.getGraphX(),c.getGraphY());
}if(d!=null){this.selectCellForEvent(d,b);
}else{if(!this.isToggleEvent(b)){this.clearSelection();
}}}}};
mxGraph.prototype.dblClick=function(b,a){var c=new mxEventObject(mxEvent.DOUBLE_CLICK,"event",b,"cell",a);
this.fireEvent(c);
if(this.isEnabled()&&!mxEvent.isConsumed(b)&&!c.isConsumed()&&a!=null&&this.isCellEditable(a)){this.startEditingAtCell(a,b);
}};
mxGraph.prototype.scrollPointToVisible=function(k,h,f,e){if(!this.timerAutoScroll&&(this.ignoreScrollbars||mxUtils.hasScrollbars(this.container))){var g=this.container;
e=(e!=null)?e:20;
if(k>=g.scrollLeft&&h>=g.scrollTop&&k<=g.scrollLeft+g.clientWidth&&h<=g.scrollTop+g.clientHeight){var n=g.scrollLeft+g.clientWidth-k;
if(n<e){var d=g.scrollLeft;
g.scrollLeft+=e-n;
if(f&&d==g.scrollLeft){if(this.dialect==mxConstants.DIALECT_SVG){var i=this.view.getDrawPane().ownerSVGElement;
var a=this.container.scrollWidth+e-n;
i.style.width=a+"px";
}else{var a=Math.max(g.clientWidth,g.scrollWidth)+e-n;
var b=this.view.getCanvas();
b.style.width=a+"px";
}g.scrollLeft+=e-n;
}}else{n=k-g.scrollLeft;
if(n<e){g.scrollLeft-=e-n;
}}var m=g.scrollTop+g.clientHeight-h;
if(m<e){var d=g.scrollTop;
g.scrollTop+=e-m;
if(d==g.scrollTop&&f){if(this.dialect==mxConstants.DIALECT_SVG){var i=this.view.getDrawPane().ownerSVGElement;
var l=this.container.scrollHeight+e-m;
i.style.height=l+"px";
}else{var l=Math.max(g.clientHeight,g.scrollHeight)+e-m;
var b=this.view.getCanvas();
b.style.height=l+"px";
}g.scrollTop+=e-m;
}}else{m=h-g.scrollTop;
if(m<e){g.scrollTop-=e-m;
}}}}else{if(this.allowAutoPanning&&!this.panningHandler.active){if(this.panningManager==null){this.panningManager=this.createPanningManager();
}this.panningManager.panTo(k+this.panDx,h+this.panDy);
}}};
mxGraph.prototype.createPanningManager=function(){return new mxPanningManager(this);
};
mxGraph.prototype.getBorderSizes=function(){function b(e){var d=0;
if(e=="thin"){d=2;
}else{if(e=="medium"){d=4;
}else{if(e=="thick"){d=6;
}else{d=parseInt(e);
}}}if(isNaN(d)){d=0;
}return d;
}var c=mxUtils.getCurrentStyle(this.container);
var a=new mxRectangle();
a.x=b(c.borderLeftWidth)+parseInt(c.paddingLeft||0);
a.y=b(c.borderTopWidth)+parseInt(c.paddingTop||0);
a.width=b(c.borderRightWidth)+parseInt(c.paddingRight||0);
a.height=b(c.borderBottomWidth)+parseInt(c.paddingBottom||0);
return a;
};
mxGraph.prototype.getPreferredPageSize=function(b,c,k){var f=this.view.scale;
var i=this.view.translate;
var d=this.pageFormat;
var a=f*this.pageScale;
var h=new mxRectangle(0,0,d.width*a,d.height*a);
var e=(this.pageBreaksVisible)?Math.ceil(c/h.width):1;
var g=(this.pageBreaksVisible)?Math.ceil(k/h.height):1;
return new mxRectangle(0,0,e*h.width+2+i.x/f,g*h.height+2+i.y/f);
};
mxGraph.prototype.sizeDidChange=function(){var f=this.getGraphBounds();
if(this.container!=null){var c=this.getBorder();
var e=Math.max(0,f.x+f.width+1+c);
var a=Math.max(0,f.y+f.height+1+c);
if(this.minimumContainerSize!=null){e=Math.max(e,this.minimumContainerSize.width);
a=Math.max(a,this.minimumContainerSize.height);
}if(this.resizeContainer){this.doResizeContainer(e,a);
}if(this.preferPageSize||(!mxClient.IS_IE&&this.pageVisible)){var d=this.getPreferredPageSize(f,e,a);
if(d!=null){e=d.width;
a=d.height;
}}if(this.minimumGraphSize!=null){e=Math.max(e,this.minimumGraphSize.width*this.view.scale);
a=Math.max(a,this.minimumGraphSize.height*this.view.scale);
}e=Math.ceil(e-1);
a=Math.ceil(a-1);
if(this.dialect==mxConstants.DIALECT_SVG){var b=this.view.getDrawPane().ownerSVGElement;
b.style.minWidth=Math.max(1,e)+"px";
b.style.minHeight=Math.max(1,a)+"px";
b.style.width="100%";
b.style.height="100%";
}else{if(mxClient.IS_QUIRKS){this.view.updateHtmlCanvasSize(Math.max(1,e),Math.max(1,a));
}else{this.view.canvas.style.minWidth=Math.max(1,e)+"px";
this.view.canvas.style.minHeight=Math.max(1,a)+"px";
}}this.updatePageBreaks(this.pageBreaksVisible,e-1,a-1);
}this.fireEvent(new mxEventObject(mxEvent.SIZE,"bounds",f));
};
mxGraph.prototype.doResizeContainer=function(b,a){if(mxClient.IS_IE){if(mxClient.IS_QUIRKS){var c=this.getBorderSizes();
b+=Math.max(2,c.x+c.width+1);
a+=Math.max(2,c.y+c.height+1);
}else{if(document.documentMode>=9){b+=3;
a+=5;
}else{b+=1;
a+=1;
}}}else{a+=1;
}if(this.maximumContainerSize!=null){b=Math.min(this.maximumContainerSize.width,b);
a=Math.min(this.maximumContainerSize.height,a);
}this.container.style.width=Math.ceil(b)+"px";
this.container.style.height=Math.ceil(a)+"px";
};
mxGraph.prototype.updatePageBreaks=function(h,e,o){var k=this.view.scale;
var m=this.view.translate;
var g=this.pageFormat;
var b=k*this.pageScale;
var c=new mxRectangle(k*m.x,k*m.y,g.width*b,g.height*b);
h=h&&Math.min(c.width,c.height)>this.minPageBreakDist;
c.x=mxUtils.mod(c.x,c.width);
c.y=mxUtils.mod(c.y,c.height);
var d=(h)?Math.ceil((e-c.x)/c.width):0;
var f=(h)?Math.ceil((o-c.y)/c.height):0;
var n=e;
var a=o;
if(this.horizontalPageBreaks==null&&d>0){this.horizontalPageBreaks=[];
}if(this.horizontalPageBreaks!=null){for(var l=0;
l<=d;
l++){var q=[new mxPoint(c.x+l*c.width,1),new mxPoint(c.x+l*c.width,a)];
if(this.horizontalPageBreaks[l]!=null){this.horizontalPageBreaks[l].scale=1;
this.horizontalPageBreaks[l].points=q;
this.horizontalPageBreaks[l].redraw();
}else{var p=new mxPolyline(q,this.pageBreakColor,this.scale);
p.dialect=this.dialect;
p.isDashed=this.pageBreakDashed;
p.scale=k;
p.crisp=true;
p.init(this.view.backgroundPane);
p.redraw();
this.horizontalPageBreaks[l]=p;
}}for(var l=d;
l<this.horizontalPageBreaks.length;
l++){this.horizontalPageBreaks[l].destroy();
}this.horizontalPageBreaks.splice(d,this.horizontalPageBreaks.length-d);
}if(this.verticalPageBreaks==null&&f>0){this.verticalPageBreaks=[];
}if(this.verticalPageBreaks!=null){for(var l=0;
l<=f;
l++){var q=[new mxPoint(1,c.y+l*c.height),new mxPoint(n,c.y+l*c.height)];
if(this.verticalPageBreaks[l]!=null){this.verticalPageBreaks[l].scale=1;
this.verticalPageBreaks[l].points=q;
this.verticalPageBreaks[l].redraw();
}else{var p=new mxPolyline(q,this.pageBreakColor,k);
p.dialect=this.dialect;
p.isDashed=this.pageBreakDashed;
p.scale=k;
p.crisp=true;
p.init(this.view.backgroundPane);
p.redraw();
this.verticalPageBreaks[l]=p;
}}for(var l=f;
l<this.verticalPageBreaks.length;
l++){this.verticalPageBreaks[l].destroy();
}this.verticalPageBreaks.splice(f,this.verticalPageBreaks.length-f);
}};
mxGraph.prototype.getCellStyle=function(a){var c=this.model.getStyle(a);
var b=null;
if(this.model.isEdge(a)){b=this.stylesheet.getDefaultEdgeStyle();
}else{b=this.stylesheet.getDefaultVertexStyle();
}if(c!=null){b=this.postProcessCellStyle(this.stylesheet.getCellStyle(c,b));
}if(b==null){b=mxGraph.prototype.EMPTY_ARRAY;
}return b;
};
mxGraph.prototype.postProcessCellStyle=function(c){if(c!=null){var b=c[mxConstants.STYLE_IMAGE];
var d=this.getImageFromBundles(b);
if(d!=null){c[mxConstants.STYLE_IMAGE]=d;
}else{d=b;
}if(d!=null&&d.substring(0,11)=="data:image/"){var a=d.indexOf(",");
if(a>0){d=d.substring(0,a)+";base64,"+d.substring(a+1);
}c[mxConstants.STYLE_IMAGE]=d;
}}return c;
};
mxGraph.prototype.setCellStyle=function(c,a){a=a||this.getSelectionCells();
if(a!=null){this.model.beginUpdate();
try{for(var b=0;
b<a.length;
b++){this.model.setStyle(a[b],c);
}}finally{this.model.endUpdate();
}}};
mxGraph.prototype.toggleCellStyle=function(c,b,a){a=a||this.getSelectionCell();
this.toggleCellStyles(c,b,[a]);
};
mxGraph.prototype.toggleCellStyles=function(c,a,b){a=(a!=null)?a:false;
b=b||this.getSelectionCells();
if(b!=null&&b.length>0){var e=this.view.getState(b[0]);
var d=(e!=null)?e.style:this.getCellStyle(b[0]);
if(d!=null){var f=(mxUtils.getValue(d,c,a))?0:1;
this.setCellStyles(c,f,b);
}}};
mxGraph.prototype.setCellStyles=function(b,c,a){a=a||this.getSelectionCells();
mxUtils.setCellStyles(this.model,a,b,c);
};
mxGraph.prototype.toggleCellStyleFlags=function(c,a,b){this.setCellStyleFlags(c,a,null,b);
};
mxGraph.prototype.setCellStyleFlags=function(c,a,f,b){b=b||this.getSelectionCells();
if(b!=null&&b.length>0){if(f==null){var e=this.view.getState(b[0]);
var d=(e!=null)?e.style:this.getCellStyle(b[0]);
if(d!=null){var g=parseInt(d[c]||0);
f=!((g&a)==a);
}}mxUtils.setCellStyleFlags(this.model,b,c,a,f);
}};
mxGraph.prototype.alignCells=function(e,a,d){if(a==null){a=this.getSelectionCells();
}if(a!=null&&a.length>1){if(d==null){for(var b=0;
b<a.length;
b++){var c=this.getCellGeometry(a[b]);
if(c!=null&&!this.model.isEdge(a[b])){if(d==null){if(e==mxConstants.ALIGN_CENTER){d=c.x+c.width/2;
break;
}else{if(e==mxConstants.ALIGN_RIGHT){d=c.x+c.width;
}else{if(e==mxConstants.ALIGN_TOP){d=c.y;
}else{if(e==mxConstants.ALIGN_MIDDLE){d=c.y+c.height/2;
break;
}else{if(e==mxConstants.ALIGN_BOTTOM){d=c.y+c.height;
}else{d=c.x;
}}}}}}else{if(e==mxConstants.ALIGN_RIGHT){d=Math.max(d,c.x+c.width);
}else{if(e==mxConstants.ALIGN_TOP){d=Math.min(d,c.y);
}else{if(e==mxConstants.ALIGN_BOTTOM){d=Math.max(d,c.y+c.height);
}else{d=Math.min(d,c.x);
}}}}}}}if(d!=null){this.model.beginUpdate();
try{for(var b=0;
b<a.length;
b++){var c=this.getCellGeometry(a[b]);
if(c!=null&&!this.model.isEdge(a[b])){c=c.clone();
if(e==mxConstants.ALIGN_CENTER){c.x=d-c.width/2;
}else{if(e==mxConstants.ALIGN_RIGHT){c.x=d-c.width;
}else{if(e==mxConstants.ALIGN_TOP){c.y=d;
}else{if(e==mxConstants.ALIGN_MIDDLE){c.y=d-c.height/2;
}else{if(e==mxConstants.ALIGN_BOTTOM){c.y=d-c.height;
}else{c.x=d;
}}}}}this.model.setGeometry(a[b],c);
}}this.fireEvent(new mxEventObject(mxEvent.ALIGN_CELLS,"align",e,"cells",a));
}finally{this.model.endUpdate();
}}}return a;
};
mxGraph.prototype.flipEdge=function(b){if(b!=null&&this.alternateEdgeStyle!=null){this.model.beginUpdate();
try{var a=this.model.getStyle(b);
if(a==null||a.length==0){this.model.setStyle(b,this.alternateEdgeStyle);
}else{this.model.setStyle(b,null);
}this.resetEdge(b);
this.fireEvent(new mxEventObject(mxEvent.FLIP_EDGE,"edge",b));
}finally{this.model.endUpdate();
}}return b;
};
mxGraph.prototype.addImageBundle=function(a){this.imageBundles.push(a);
};
mxGraph.prototype.removeImageBundle=function(a){var c=[];
for(var b=0;
b<this.imageBundles.length;
b++){if(this.imageBundles[b]!=a){c.push(this.imageBundles[b]);
}}this.imageBundles=c;
};
mxGraph.prototype.getImageFromBundles=function(b){if(b!=null){for(var a=0;
a<this.imageBundles.length;
a++){var c=this.imageBundles[a].getImage(b);
if(c!=null){return c;
}}}return null;
};
mxGraph.prototype.orderCells=function(a,b){if(b==null){b=mxUtils.sortCells(this.getSelectionCells(),true);
}this.model.beginUpdate();
try{this.cellsOrdered(b,a);
this.fireEvent(new mxEventObject(mxEvent.ORDER_CELLS,"back",a,"cells",b));
}finally{this.model.endUpdate();
}return b;
};
mxGraph.prototype.cellsOrdered=function(b,a){if(b!=null){this.model.beginUpdate();
try{for(var c=0;
c<b.length;
c++){var d=this.model.getParent(b[c]);
if(a){this.model.add(d,b[c],c);
}else{this.model.add(d,b[c],this.model.getChildCount(d)-1);
}}this.fireEvent(new mxEventObject(mxEvent.CELLS_ORDERED,"back",a,"cells",b));
}finally{this.model.endUpdate();
}}};
mxGraph.prototype.groupCells=function(f,c,b){if(b==null){b=mxUtils.sortCells(this.getSelectionCells(),true);
}b=this.getCellsForGroup(b);
if(f==null){f=this.createGroupCell(b);
}var e=this.getBoundsForGroup(f,b,c);
if(b.length>0&&e!=null){var d=this.model.getParent(f);
if(d==null){d=this.model.getParent(b[0]);
}this.model.beginUpdate();
try{if(this.getCellGeometry(f)==null){this.model.setGeometry(f,new mxGeometry());
}var a=this.model.getChildCount(f);
this.cellsAdded(b,f,a,null,null,false,false);
this.cellsMoved(b,-e.x,-e.y,false,true);
a=this.model.getChildCount(d);
this.cellsAdded([f],d,a,null,null,false);
this.cellsResized([f],[e]);
this.fireEvent(new mxEventObject(mxEvent.GROUP_CELLS,"group",f,"border",c,"cells",b));
}finally{this.model.endUpdate();
}}return f;
};
mxGraph.prototype.getCellsForGroup=function(b){var a=[];
if(b!=null&&b.length>0){var d=this.model.getParent(b[0]);
a.push(b[0]);
for(var c=1;
c<b.length;
c++){if(this.model.getParent(b[c])==d){a.push(b[c]);
}}}return a;
};
mxGraph.prototype.getBoundsForGroup=function(e,d,b){var a=this.getBoundingBoxFromGeometry(d);
if(a!=null){if(this.isSwimlane(e)){var c=this.getStartSize(e);
a.x-=c.width;
a.y-=c.height;
a.width+=c.width;
a.height+=c.height;
}a.x-=b;
a.y-=b;
a.width+=2*b;
a.height+=2*b;
}return a;
};
mxGraph.prototype.createGroupCell=function(a){var b=new mxCell("");
b.setVertex(true);
b.setConnectable(false);
return b;
};
mxGraph.prototype.ungroupCells=function(c){var a=[];
if(c==null){c=this.getSelectionCells();
var f=[];
for(var e=0;
e<c.length;
e++){if(this.model.getChildCount(c[e])>0){f.push(c[e]);
}}c=f;
}if(c!=null&&c.length>0){this.model.beginUpdate();
try{for(var e=0;
e<c.length;
e++){var d=this.model.getChildren(c[e]);
if(d!=null&&d.length>0){d=d.slice();
var g=this.model.getParent(c[e]);
var b=this.model.getChildCount(g);
this.cellsAdded(d,g,b,null,null,true);
a=a.concat(d);
}}this.cellsRemoved(this.addAllEdges(c));
this.fireEvent(new mxEventObject(mxEvent.UNGROUP_CELLS,"cells",c));
}finally{this.model.endUpdate();
}}return a;
};
mxGraph.prototype.removeCellsFromParent=function(b){if(b==null){b=this.getSelectionCells();
}this.model.beginUpdate();
try{var c=this.getDefaultParent();
var a=this.model.getChildCount(c);
this.cellsAdded(b,c,a,null,null,true);
this.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS_FROM_PARENT,"cells",b));
}finally{this.model.endUpdate();
}return b;
};
mxGraph.prototype.updateGroupBounds=function(c,b,a){if(c==null){c=this.getSelectionCells();
}b=(b!=null)?b:0;
a=(a!=null)?a:false;
this.model.beginUpdate();
try{for(var f=0;
f<c.length;
f++){var h=this.getCellGeometry(c[f]);
if(h!=null){var e=this.getChildCells(c[f]);
if(e!=null&&e.length>0){var g=this.getBoundingBoxFromGeometry(e);
if(g.width>0&&g.height>0){var d=(this.isSwimlane(c[f]))?this.getStartSize(c[f]):new mxRectangle();
h=h.clone();
if(a){h.x+=g.x-d.width-b;
h.y+=g.y-d.height-b;
}h.width=g.width+d.width+2*b;
h.height=g.height+d.height+2*b;
this.model.setGeometry(c[f],h);
this.moveCells(e,-g.x+d.width+b,-g.y+d.height+b);
}}}}}finally{this.model.endUpdate();
}return c;
};
mxGraph.prototype.cloneCells=function(c,v){v=(v!=null)?v:true;
var a=null;
if(c!=null){var b=new Object();
var w=[];
for(var s=0;
s<c.length;
s++){var o=mxCellPath.create(c[s]);
b[o]=c[s];
w.push(c[s]);
}if(w.length>0){var y=this.view.scale;
var d=this.view.translate;
a=this.model.cloneCells(c,true);
for(var s=0;
s<c.length;
s++){if(!v&&this.model.isEdge(a[s])&&this.getEdgeValidationError(a[s],this.model.getTerminal(a[s],true),this.model.getTerminal(a[s],false))!=null){a[s]=null;
}else{var u=this.model.getGeometry(a[s]);
if(u!=null){var e=this.view.getState(c[s]);
var x=this.view.getState(this.model.getParent(c[s]));
if(e!=null&&x!=null){var m=x.origin.x;
var l=x.origin.y;
if(this.model.isEdge(a[s])){var z=e.absolutePoints;
var h=this.model.getTerminal(c[s],true);
var k=mxCellPath.create(h);
while(h!=null&&b[k]==null){h=this.model.getParent(h);
k=mxCellPath.create(h);
}if(h==null){u.setTerminalPoint(new mxPoint(z[0].x/y-d.x,z[0].y/y-d.y),true);
}var t=this.model.getTerminal(c[s],false);
var f=mxCellPath.create(t);
while(t!=null&&b[f]==null){t=this.model.getParent(t);
f=mxCellPath.create(t);
}if(t==null){var p=z.length-1;
u.setTerminalPoint(new mxPoint(z[p].x/y-d.x,z[p].y/y-d.y),false);
}var r=u.points;
if(r!=null){for(var q=0;
q<r.length;
q++){r[q].x+=m;
r[q].y+=l;
}}}else{u.x+=m;
u.y+=l;
}}}}}}else{a=[];
}}return a;
};
mxGraph.prototype.insertVertex=function(i,c,h,g,f,d,k,b,a){var e=this.createVertex(i,c,h,g,f,d,k,b,a);
return this.addCell(e,i);
};
mxGraph.prototype.createVertex=function(k,c,i,h,g,d,l,b,a){var f=new mxGeometry(h,g,d,l);
f.relative=(a!=null)?a:false;
var e=new mxCell(i,f,b);
e.setId(c);
e.setVertex(true);
e.setConnectable(true);
return e;
};
mxGraph.prototype.insertEdge=function(b,g,e,d,f,a){var c=this.createEdge(b,g,e,d,f,a);
return this.addEdge(c,b,d,f);
};
mxGraph.prototype.createEdge=function(b,g,e,d,f,a){var c=new mxCell(e,new mxGeometry(),a);
c.setId(g);
c.setEdge(true);
c.geometry.relative=true;
return c;
};
mxGraph.prototype.addEdge=function(c,b,d,e,a){return this.addCell(c,b,a,d,e);
};
mxGraph.prototype.addCell=function(a,c,b,d,e){return this.addCells([a],c,b,d,e)[0];
};
mxGraph.prototype.addCells=function(b,c,a,d,e){if(c==null){c=this.getDefaultParent();
}if(a==null){a=this.model.getChildCount(c);
}this.model.beginUpdate();
try{this.cellsAdded(b,c,a,d,e,false,true);
this.fireEvent(new mxEventObject(mxEvent.ADD_CELLS,"cells",b,"parent",c,"index",a,"source",d,"target",e));
}finally{this.model.endUpdate();
}return b;
};
mxGraph.prototype.cellsAdded=function(r,o,h,a,k,n,m){if(r!=null&&o!=null&&h!=null){this.model.beginUpdate();
try{var p=(n)?this.view.getState(o):null;
var c=(p!=null)?p.origin:null;
var l=new mxPoint(0,0);
for(var f=0;
f<r.length;
f++){if(r[f]==null){h--;
}else{var g=this.model.getParent(r[f]);
if(c!=null&&r[f]!=o&&o!=g){var d=this.view.getState(g);
var b=(d!=null)?d.origin:l;
var e=this.model.getGeometry(r[f]);
if(e!=null){var s=b.x-c.x;
var q=b.y-c.y;
e=e.clone();
e.translate(s,q);
if(!e.relative&&this.model.isVertex(r[f])&&!this.isAllowNegativeCoordinates()){e.x=Math.max(0,e.x);
e.y=Math.max(0,e.y);
}this.model.setGeometry(r[f],e);
}}if(o==g){h--;
}this.model.add(o,r[f],h+f);
if(this.isExtendParentsOnAdd()&&this.isExtendParent(r[f])){this.extendParent(r[f]);
}if(m==null||m){this.constrainChild(r[f]);
}if(a!=null){this.cellConnected(r[f],a,true);
}if(k!=null){this.cellConnected(r[f],k,false);
}}}this.fireEvent(new mxEventObject(mxEvent.CELLS_ADDED,"cells",r,"parent",o,"index",h,"source",a,"target",k,"absolute",n));
}finally{this.model.endUpdate();
}}};
mxGraph.prototype.removeCells=function(a,b){b=(b!=null)?b:true;
if(a==null){a=this.getDeletableCells(this.getSelectionCells());
}if(b){a=this.getDeletableCells(this.addAllEdges(a));
}this.model.beginUpdate();
try{this.cellsRemoved(a);
this.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS,"cells",a,"includeEdges",b));
}finally{this.model.endUpdate();
}return a;
};
mxGraph.prototype.cellsRemoved=function(o){if(o!=null&&o.length>0){var e=this.view.scale;
var m=this.view.translate;
this.model.beginUpdate();
try{var k=new Object();
for(var l=0;
l<o.length;
l++){var c=mxCellPath.create(o[l]);
k[c]=o[l];
}for(var l=0;
l<o.length;
l++){var g=this.getConnections(o[l]);
for(var f=0;
f<g.length;
f++){var c=mxCellPath.create(g[f]);
if(k[c]==null){var h=this.model.getGeometry(g[f]);
if(h!=null){var b=this.view.getState(g[f]);
if(b!=null){h=h.clone();
var a=b.getVisibleTerminal(true)==o[l];
var p=b.absolutePoints;
var d=(a)?0:p.length-1;
h.setTerminalPoint(new mxPoint(p[d].x/e-m.x,p[d].y/e-m.y),a);
this.model.setTerminal(g[f],null,a);
this.model.setGeometry(g[f],h);
}}}}this.model.remove(o[l]);
}this.fireEvent(new mxEventObject(mxEvent.CELLS_REMOVED,"cells",o));
}finally{this.model.endUpdate();
}}};
mxGraph.prototype.splitEdge=function(f,c,d,b,a){b=b||0;
a=a||0;
if(d==null){d=this.cloneCells([f])[0];
}var e=this.model.getParent(f);
var g=this.model.getTerminal(f,true);
this.model.beginUpdate();
try{this.cellsMoved(c,b,a,false,false);
this.cellsAdded(c,e,this.model.getChildCount(e),null,null,true);
this.cellsAdded([d],e,this.model.getChildCount(e),g,c[0],false);
this.cellConnected(f,c[0],true);
this.fireEvent(new mxEventObject(mxEvent.SPLIT_EDGE,"edge",f,"cells",c,"newEdge",d,"dx",b,"dy",a));
}finally{this.model.endUpdate();
}return d;
};
mxGraph.prototype.toggleCells=function(a,b,c){if(b==null){b=this.getSelectionCells();
}if(c){b=this.addAllEdges(b);
}this.model.beginUpdate();
try{this.cellsToggled(b,a);
this.fireEvent(new mxEventObject(mxEvent.TOGGLE_CELLS,"show",a,"cells",b,"includeEdges",c));
}finally{this.model.endUpdate();
}return b;
};
mxGraph.prototype.cellsToggled=function(b,a){if(b!=null&&b.length>0){this.model.beginUpdate();
try{for(var c=0;
c<b.length;
c++){this.model.setVisible(b[c],a);
}}finally{this.model.endUpdate();
}}};
mxGraph.prototype.foldCells=function(d,c,b,a){c=(c!=null)?c:false;
if(b==null){b=this.getFoldableCells(this.getSelectionCells(),d);
}this.stopEditing(false);
this.model.beginUpdate();
try{this.cellsFolded(b,d,c,a);
this.fireEvent(new mxEventObject(mxEvent.FOLD_CELLS,"collapse",d,"recurse",c,"cells",b));
}finally{this.model.endUpdate();
}return b;
};
mxGraph.prototype.cellsFolded=function(b,f,e,a){if(b!=null&&b.length>0){this.model.beginUpdate();
try{for(var d=0;
d<b.length;
d++){if((!a||this.isCellFoldable(b[d],f))&&f!=this.isCellCollapsed(b[d])){this.model.setCollapsed(b[d],f);
this.swapBounds(b[d],f);
if(this.isExtendParent(b[d])){this.extendParent(b[d]);
}if(e){var c=this.model.getChildren(b[d]);
this.foldCells(c,f,e);
}}}this.fireEvent(new mxEventObject(mxEvent.CELLS_FOLDED,"cells",b,"collapse",f,"recurse",e));
}finally{this.model.endUpdate();
}}};
mxGraph.prototype.swapBounds=function(a,b){if(a!=null){var c=this.model.getGeometry(a);
if(c!=null){c=c.clone();
this.updateAlternateBounds(a,c,b);
c.swap();
this.model.setGeometry(a,c);
}}};
mxGraph.prototype.updateAlternateBounds=function(a,h,g){if(a!=null&&h!=null){if(h.alternateBounds==null){var e=h;
if(this.collapseToPreferredSize){var c=this.getPreferredSizeForCell(a);
if(c!=null){e=c;
var f=this.view.getState(a);
var d=(f!=null)?f.style:this.getCellStyle(a);
var b=mxUtils.getValue(d,mxConstants.STYLE_STARTSIZE);
if(b>0){e.height=Math.max(e.height,b);
}}}h.alternateBounds=new mxRectangle(h.x,h.y,e.width,e.height);
}else{h.alternateBounds.x=h.x;
h.alternateBounds.y=h.y;
}}};
mxGraph.prototype.addAllEdges=function(a){var b=a.slice();
b=b.concat(this.getAllEdges(a));
return b;
};
mxGraph.prototype.getAllEdges=function(c){var a=[];
if(c!=null){for(var e=0;
e<c.length;
e++){var f=this.model.getEdgeCount(c[e]);
for(var b=0;
b<f;
b++){a.push(this.model.getEdgeAt(c[e],b));
}var d=this.model.getChildren(c[e]);
a=a.concat(this.getAllEdges(d));
}}return a;
};
mxGraph.prototype.updateCellSize=function(b,a){a=(a!=null)?a:false;
this.model.beginUpdate();
try{this.cellSizeUpdated(b,a);
this.fireEvent(new mxEventObject(mxEvent.UPDATE_CELL_SIZE,"cell",b,"ignoreChildren",a));
}finally{this.model.endUpdate();
}return b;
};
mxGraph.prototype.cellSizeUpdated=function(l,f){if(l!=null){this.model.beginUpdate();
try{var n=this.getPreferredSizeForCell(l);
var i=this.model.getGeometry(l);
if(n!=null&&i!=null){var h=this.isCellCollapsed(l);
i=i.clone();
if(this.isSwimlane(l)){var b=this.view.getState(l);
var c=(b!=null)?b.style:this.getCellStyle(l);
var e=this.model.getStyle(l);
if(e==null){e="";
}if(mxUtils.getValue(c,mxConstants.STYLE_HORIZONTAL,true)){e=mxUtils.setStyle(e,mxConstants.STYLE_STARTSIZE,n.height+8);
if(h){i.height=n.height+8;
}i.width=n.width;
}else{e=mxUtils.setStyle(e,mxConstants.STYLE_STARTSIZE,n.width+8);
if(h){i.width=n.width+8;
}i.height=n.height;
}this.model.setStyle(l,e);
}else{i.width=n.width;
i.height=n.height;
}if(!f&&!h){var a=this.view.getBounds(this.model.getChildren(l));
if(a!=null){var k=this.view.translate;
var g=this.view.scale;
var d=(a.x+a.width)/g-i.x-k.x;
var m=(a.y+a.height)/g-i.y-k.y;
i.width=Math.max(i.width,d);
i.height=Math.max(i.height,m);
}}this.cellsResized([l],[i]);
}}finally{this.model.endUpdate();
}}};
mxGraph.prototype.getPreferredSizeForCell=function(h){var o=null;
if(h!=null){var a=this.view.getState(h);
var b=(a!=null)?a.style:this.getCellStyle(h);
if(b!=null&&!this.model.isEdge(h)){var m=b[mxConstants.STYLE_FONTSIZE]||mxConstants.DEFAULT_FONTSIZE;
var n=0;
var k=0;
if(this.getImage(a)!=null||b[mxConstants.STYLE_IMAGE]!=null){if(b[mxConstants.STYLE_SHAPE]==mxConstants.SHAPE_LABEL){if(b[mxConstants.STYLE_VERTICAL_ALIGN]==mxConstants.ALIGN_MIDDLE){n+=parseFloat(b[mxConstants.STYLE_IMAGE_WIDTH])||mxLabel.prototype.imageSize;
}if(b[mxConstants.STYLE_ALIGN]!=mxConstants.ALIGN_CENTER){k+=parseFloat(b[mxConstants.STYLE_IMAGE_HEIGHT])||mxLabel.prototype.imageSize;
}}}n+=2*(b[mxConstants.STYLE_SPACING]||0);
n+=b[mxConstants.STYLE_SPACING_LEFT]||0;
n+=b[mxConstants.STYLE_SPACING_RIGHT]||0;
k+=2*(b[mxConstants.STYLE_SPACING]||0);
k+=b[mxConstants.STYLE_SPACING_TOP]||0;
k+=b[mxConstants.STYLE_SPACING_BOTTOM]||0;
var e=this.getFoldingImage(a);
if(e!=null){n+=e.width+8;
}var g=this.getLabel(h);
if(g!=null&&g.length>0){if(!this.isHtmlLabel(h)){g=g.replace(/\n/g,"<br>");
}var l=mxUtils.getSizeForString(g,m,b[mxConstants.STYLE_FONTFAMILY]);
var c=l.width+n;
var i=l.height+k;
if(!mxUtils.getValue(b,mxConstants.STYLE_HORIZONTAL,true)){var f=i;
i=c;
c=f;
}if(this.gridEnabled){c=this.snap(c+this.gridSize/2);
i=this.snap(i+this.gridSize/2);
}o=new mxRectangle(0,0,c,i);
}else{var d=4*this.gridSize;
o=new mxRectangle(0,0,d,d);
}}}return o;
};
mxGraph.prototype.handleGesture=function(b,k){if(Math.abs(1-k.scale)>0.2){var c=this.view.scale;
var e=this.view.translate;
var i=b.width*k.scale;
var d=b.height*k.scale;
var g=b.x-(i-b.width)/2;
var f=b.y-(d-b.height)/2;
var a=new mxRectangle(this.snap(g/c)-e.x,this.snap(f/c)-e.y,this.snap(i/c),this.snap(d/c));
this.resizeCell(b.cell,a);
}};
mxGraph.prototype.resizeCell=function(a,b){return this.resizeCells([a],[b])[0];
};
mxGraph.prototype.resizeCells=function(a,b){this.model.beginUpdate();
try{this.cellsResized(a,b);
this.fireEvent(new mxEventObject(mxEvent.RESIZE_CELLS,"cells",a,"bounds",b));
}finally{this.model.endUpdate();
}return a;
};
mxGraph.prototype.cellsResized=function(a,d){if(a!=null&&d!=null&&a.length==d.length){this.model.beginUpdate();
try{for(var c=0;
c<a.length;
c++){var b=d[c];
var e=this.model.getGeometry(a[c]);
if(e!=null&&(e.x!=b.x||e.y!=b.y||e.width!=b.width||e.height!=b.height)){e=e.clone();
if(e.relative){var f=e.offset;
if(f!=null){f.x+=b.x-e.x;
f.y+=b.y-e.y;
}}else{e.x=b.x;
e.y=b.y;
}e.width=b.width;
e.height=b.height;
if(!e.relative&&this.model.isVertex(a[c])&&!this.isAllowNegativeCoordinates()){e.x=Math.max(0,e.x);
e.y=Math.max(0,e.y);
}this.model.setGeometry(a[c],e);
if(this.isExtendParent(a[c])){this.extendParent(a[c]);
}}}if(this.resetEdgesOnResize){this.resetEdges(a);
}this.fireEvent(new mxEventObject(mxEvent.CELLS_RESIZED,"cells",a,"bounds",d));
}finally{this.model.endUpdate();
}}};
mxGraph.prototype.extendParent=function(a){if(a!=null){var b=this.model.getParent(a);
var d=this.model.getGeometry(b);
if(b!=null&&d!=null&&!this.isCellCollapsed(b)){var c=this.model.getGeometry(a);
if(c!=null&&(d.width<c.x+c.width||d.height<c.y+c.height)){d=d.clone();
d.width=Math.max(d.width,c.x+c.width);
d.height=Math.max(d.height,c.y+c.height);
this.cellsResized([b],[d]);
}}}};
mxGraph.prototype.importCells=function(d,c,b,e,a){return this.moveCells(d,c,b,true,e,a);
};
mxGraph.prototype.moveCells=function(e,c,b,h,g,a){c=(c!=null)?c:0;
b=(b!=null)?b:0;
h=(h!=null)?h:false;
if(e!=null&&(c!=0||b!=0||h||g!=null)){this.model.beginUpdate();
try{if(h){e=this.cloneCells(e,this.isCloneInvalidEdges());
if(g==null){g=this.getDefaultParent();
}}var f=this.isAllowNegativeCoordinates();
if(g!=null){this.setAllowNegativeCoordinates(true);
}this.cellsMoved(e,c,b,!h&&this.isDisconnectOnMove()&&this.isAllowDanglingEdges(),g==null);
this.setAllowNegativeCoordinates(f);
if(g!=null){var d=this.model.getChildCount(g);
this.cellsAdded(e,g,d,null,null,true);
}this.fireEvent(new mxEventObject(mxEvent.MOVE_CELLS,"cells",e,"dx",c,"dy",b,"clone",h,"target",g,"event",a));
}finally{this.model.endUpdate();
}}return e;
};
mxGraph.prototype.cellsMoved=function(d,c,a,b,f){if(d!=null&&(c!=0||a!=0)){this.model.beginUpdate();
try{if(b){this.disconnectGraph(d);
}for(var e=0;
e<d.length;
e++){this.translateCell(d[e],c,a);
if(f){this.constrainChild(d[e]);
}}if(this.resetEdgesOnMove){this.resetEdges(d);
}this.fireEvent(new mxEventObject(mxEvent.CELLS_MOVED,"cells",d,"dx",a,"dy",a,"disconnect",b));
}finally{this.model.endUpdate();
}}};
mxGraph.prototype.translateCell=function(a,c,b){var d=this.model.getGeometry(a);
if(d!=null){d=d.clone();
d.translate(c,b);
if(!d.relative&&this.model.isVertex(a)&&!this.isAllowNegativeCoordinates()){d.x=Math.max(0,d.x);
d.y=Math.max(0,d.y);
}if(d.relative&&!this.model.isEdge(a)){if(d.offset==null){d.offset=new mxPoint(c,b);
}else{d.offset.x+=c;
d.offset.y+=b;
}}this.model.setGeometry(a,d);
}};
mxGraph.prototype.getCellContainmentArea=function(b){if(b!=null&&!this.model.isEdge(b)){var f=this.model.getParent(b);
if(f==this.getDefaultParent()||f==this.getCurrentRoot()){return this.getMaximumGraphBounds();
}else{if(f!=null&&f!=this.getDefaultParent()){var i=this.model.getGeometry(f);
if(i!=null){var a=0;
var k=0;
var c=i.width;
var e=i.height;
if(this.isSwimlane(f)){var d=this.getStartSize(f);
a=d.width;
c-=d.width;
k=d.height;
e-=d.height;
}return new mxRectangle(a,k,c,e);
}}}}return null;
};
mxGraph.prototype.getMaximumGraphBounds=function(){return this.maximumGraphBounds;
};
mxGraph.prototype.constrainChild=function(a){if(a!=null){var d=this.model.getGeometry(a);
var c=(this.isConstrainChild(a))?this.getCellContainmentArea(a):this.getMaximumGraphBounds();
if(d!=null&&c!=null){if(!d.relative&&(d.x<c.x||d.y<c.y||c.width<d.x+d.width||c.height<d.y+d.height)){var b=this.getOverlap(a);
if(c.width>0){d.x=Math.min(d.x,c.x+c.width-(1-b)*d.width);
}if(c.height>0){d.y=Math.min(d.y,c.y+c.height-(1-b)*d.height);
}d.x=Math.max(d.x,c.x-d.width*b);
d.y=Math.max(d.y,c.y-d.height*b);
}}}};
mxGraph.prototype.resetEdges=function(m){if(m!=null){var f=new Object();
for(var g=0;
g<m.length;
g++){var c=mxCellPath.create(m[g]);
f[c]=m[g];
}this.model.beginUpdate();
try{for(var g=0;
g<m.length;
g++){var e=this.model.getEdges(m[g]);
if(e!=null){for(var d=0;
d<e.length;
d++){var b=this.view.getState(e[d]);
var a=(b!=null)?b.getVisibleTerminal(true):this.view.getVisibleTerminal(e[d],true);
var h=(b!=null)?b.getVisibleTerminal(false):this.view.getVisibleTerminal(e[d],false);
var l=mxCellPath.create(a);
var k=mxCellPath.create(h);
if(f[l]==null||f[k]==null){this.resetEdge(e[d]);
}}}this.resetEdges(this.model.getChildren(m[g]));
}}finally{this.model.endUpdate();
}}};
mxGraph.prototype.resetEdge=function(a){var b=this.model.getGeometry(a);
if(b!=null&&b.points!=null&&b.points.length>0){b=b.clone();
b.points=[];
this.model.setGeometry(a,b);
}return a;
};
mxGraph.prototype.getAllConnectionConstraints=function(a,b){if(a!=null&&a.shape!=null&&a.shape instanceof mxStencilShape){if(a.shape.stencil!=null){return a.shape.stencil.constraints;
}}return null;
};
mxGraph.prototype.getConnectionConstraint=function(e,d,f){var b=null;
var a=e.style[(f)?mxConstants.STYLE_EXIT_X:mxConstants.STYLE_ENTRY_X];
if(a!=null){var g=e.style[(f)?mxConstants.STYLE_EXIT_Y:mxConstants.STYLE_ENTRY_Y];
if(g!=null){b=new mxPoint(parseFloat(a),parseFloat(g));
}}var c=false;
if(b!=null){c=mxUtils.getValue(e.style,(f)?mxConstants.STYLE_EXIT_PERIMETER:mxConstants.STYLE_ENTRY_PERIMETER,true);
}return new mxConnectionConstraint(b,c);
};
mxGraph.prototype.setConnectionConstraint=function(b,a,c,d){if(d!=null){this.model.beginUpdate();
try{if(d==null||d.point==null){this.setCellStyles((c)?mxConstants.STYLE_EXIT_X:mxConstants.STYLE_ENTRY_X,null,[b]);
this.setCellStyles((c)?mxConstants.STYLE_EXIT_Y:mxConstants.STYLE_ENTRY_Y,null,[b]);
this.setCellStyles((c)?mxConstants.STYLE_EXIT_PERIMETER:mxConstants.STYLE_ENTRY_PERIMETER,null,[b]);
}else{if(d.point!=null){this.setCellStyles((c)?mxConstants.STYLE_EXIT_X:mxConstants.STYLE_ENTRY_X,d.point.x,[b]);
this.setCellStyles((c)?mxConstants.STYLE_EXIT_Y:mxConstants.STYLE_ENTRY_Y,d.point.y,[b]);
if(!d.perimeter){this.setCellStyles((c)?mxConstants.STYLE_EXIT_PERIMETER:mxConstants.STYLE_ENTRY_PERIMETER,"0",[b]);
}else{this.setCellStyles((c)?mxConstants.STYLE_EXIT_PERIMETER:mxConstants.STYLE_ENTRY_PERIMETER,null,[b]);
}}}}finally{this.model.endUpdate();
}}};
mxGraph.prototype.getConnectionPoint=function(p,b){var l=null;
if(p!=null){var e=this.view.getPerimeterBounds(p);
var d=new mxPoint(e.getCenterX(),e.getCenterY());
var r=p.style[mxConstants.STYLE_DIRECTION];
var o=0;
if(r!=null){if(r=="north"){o+=270;
}else{if(r=="west"){o+=180;
}else{if(r=="south"){o+=90;
}}}if(r=="north"||r=="south"){e.x+=e.width/2-e.height/2;
e.y+=e.height/2-e.width/2;
var q=e.width;
e.width=e.height;
e.height=q;
}}if(b.point!=null){var k=1;
var i=1;
var h=0;
var g=0;
if(p.shape instanceof mxStencilShape){var m=p.style[mxConstants.STYLE_STENCIL_FLIPH];
var f=p.style[mxConstants.STYLE_STENCIL_FLIPV];
if(r=="north"||r=="south"){var q=m;
m=f;
f=q;
}if(m){k=-1;
h=-e.width;
}if(f){i=-1;
g=-e.height;
}}l=new mxPoint(e.x+b.point.x*e.width*k-h,e.y+b.point.y*e.height*i-g);
}var n=p.style[mxConstants.STYLE_ROTATION]||0;
if(b.perimeter){if(o!=0&&l!=null){var c=0;
var a=0;
if(o==90){a=1;
}else{if(o==180){c=-1;
}else{if(n==270){a=-1;
}}}l=mxUtils.getRotatedPoint(l,c,a,d);
}if(l!=null&&b.perimeter){l=this.view.getPerimeterPoint(p,l,false);
}}else{n+=o;
}if(n!=0&&l!=null){var s=mxUtils.toRadians(n);
var c=Math.cos(s);
var a=Math.sin(s);
l=mxUtils.getRotatedPoint(l,c,a,d);
}}return l;
};
mxGraph.prototype.connectCell=function(c,a,d,e){this.model.beginUpdate();
try{var b=this.model.getTerminal(c,d);
this.cellConnected(c,a,d,e);
this.fireEvent(new mxEventObject(mxEvent.CONNECT_CELL,"edge",c,"terminal",a,"source",d,"previous",b));
}finally{this.model.endUpdate();
}return c;
};
mxGraph.prototype.cellConnected=function(d,b,e,f){if(d!=null){this.model.beginUpdate();
try{var c=this.model.getTerminal(d,e);
this.setConnectionConstraint(d,b,e,f);
if(this.isPortsEnabled()){var g=null;
if(this.isPort(b)){g=b.getId();
b=this.getTerminalForPort(b,e);
}var a=(e)?mxConstants.STYLE_SOURCE_PORT:mxConstants.STYLE_TARGET_PORT;
this.setCellStyles(a,g,[d]);
}this.model.setTerminal(d,b,e);
if(this.resetEdgesOnConnect){this.resetEdge(d);
}this.fireEvent(new mxEventObject(mxEvent.CELL_CONNECTED,"edge",d,"terminal",b,"source",e,"previous",c));
}finally{this.model.endUpdate();
}}};
mxGraph.prototype.disconnectGraph=function(r){if(r!=null){this.model.beginUpdate();
try{var g=this.view.scale;
var o=this.view.translate;
var k=new Object();
for(var m=0;
m<r.length;
m++){var e=mxCellPath.create(r[m]);
k[e]=r[m];
}for(var m=0;
m<r.length;
m++){if(this.model.isEdge(r[m])){var l=this.model.getGeometry(r[m]);
if(l!=null){var d=this.view.getState(r[m]);
var h=this.view.getState(this.model.getParent(r[m]));
if(d!=null&&h!=null){l=l.clone();
var t=-h.origin.x;
var q=-h.origin.y;
var s=d.absolutePoints;
var b=this.model.getTerminal(r[m],true);
if(b!=null&&this.isCellDisconnectable(r[m],b,true)){var a=mxCellPath.create(b);
while(b!=null&&k[a]==null){b=this.model.getParent(b);
a=mxCellPath.create(b);
}if(b==null){l.setTerminalPoint(new mxPoint(s[0].x/g-o.x+t,s[0].y/g-o.y+q),true);
this.model.setTerminal(r[m],null,true);
}}var c=this.model.getTerminal(r[m],false);
if(c!=null&&this.isCellDisconnectable(r[m],c,false)){var p=mxCellPath.create(c);
while(c!=null&&k[p]==null){c=this.model.getParent(c);
p=mxCellPath.create(c);
}if(c==null){var f=s.length-1;
l.setTerminalPoint(new mxPoint(s[f].x/g-o.x+t,s[f].y/g-o.y+q),false);
this.model.setTerminal(r[m],null,false);
}}this.model.setGeometry(r[m],l);
}}}}}finally{this.model.endUpdate();
}}};
mxGraph.prototype.getCurrentRoot=function(){return this.view.currentRoot;
};
mxGraph.prototype.getTranslateForRoot=function(a){return null;
};
mxGraph.prototype.isPort=function(a){return false;
};
mxGraph.prototype.getTerminalForPort=function(a,b){return this.model.getParent(a);
};
mxGraph.prototype.getChildOffsetForCell=function(a){return null;
};
mxGraph.prototype.enterGroup=function(a){a=a||this.getSelectionCell();
if(a!=null&&this.isValidRoot(a)){this.view.setCurrentRoot(a);
this.clearSelection();
}};
mxGraph.prototype.exitGroup=function(){var a=this.model.getRoot();
var d=this.getCurrentRoot();
if(d!=null){var b=this.model.getParent(d);
while(b!=a&&!this.isValidRoot(b)&&this.model.getParent(b)!=a){b=this.model.getParent(b);
}if(b==a||this.model.getParent(b)==a){this.view.setCurrentRoot(null);
}else{this.view.setCurrentRoot(b);
}var c=this.view.getState(d);
if(c!=null){this.setSelectionCell(d);
}}};
mxGraph.prototype.home=function(){var b=this.getCurrentRoot();
if(b!=null){this.view.setCurrentRoot(null);
var a=this.view.getState(b);
if(a!=null){this.setSelectionCell(b);
}}};
mxGraph.prototype.isValidRoot=function(a){return(a!=null);
};
mxGraph.prototype.getGraphBounds=function(){return this.view.getGraphBounds();
};
mxGraph.prototype.getCellBounds=function(b,h,g){var d=[b];
if(h){d=d.concat(this.model.getEdges(b));
}var a=this.view.getBounds(d);
if(g){var c=this.model.getChildCount(b);
for(var f=0;
f<c;
f++){var e=this.getCellBounds(this.model.getChildAt(b,f),h,true);
if(a!=null){a.add(e);
}else{a=e;
}}}return a;
};
mxGraph.prototype.getBoundingBoxFromGeometry=function(g,f){f=(f!=null)?f:false;
var k=null;
if(g!=null){for(var d=0;
d<g.length;
d++){if(f||this.model.isVertex(g[d])){var c=this.getCellGeometry(g[d]);
if(c!=null){var h=c.points;
if(h!=null&&h.length>0){var e=new mxRectangle(h[0].x,h[0].y,0,0);
var a=function(i){if(i!=null){e.add(new mxRectangle(i.x,i.y,0,0));
}};
for(var b=1;
b<h.length;
b++){a(h[b]);
}a(c.getTerminalPoint(true));
a(c.getTerminalPoint(false));
}if(k==null){k=new mxRectangle(c.x,c.y,c.width,c.height);
}else{k.add(c);
}}}}}return k;
};
mxGraph.prototype.refresh=function(a){this.view.clear(a,a==null);
this.view.validate();
this.sizeDidChange();
this.fireEvent(new mxEventObject(mxEvent.REFRESH));
};
mxGraph.prototype.snap=function(a){if(this.gridEnabled){a=Math.round(a/this.gridSize)*this.gridSize;
}return a;
};
mxGraph.prototype.panGraph=function(b,a){if(this.useScrollbarsForPanning&&mxUtils.hasScrollbars(this.container)){this.container.scrollLeft=-b;
this.container.scrollTop=-a;
}else{var c=this.view.getCanvas();
if(this.dialect==mxConstants.DIALECT_SVG){if(b==0&&a==0){if(mxClient.IS_IE){c.setAttribute("transform","translate("+b+","+a+")");
}else{c.removeAttribute("transform");
}if(this.shiftPreview1!=null){var f=this.shiftPreview1.firstChild;
while(f!=null){var d=f.nextSibling;
this.container.appendChild(f);
f=d;
}this.shiftPreview1.parentNode.removeChild(this.shiftPreview1);
this.shiftPreview1=null;
this.container.appendChild(c.parentNode);
f=this.shiftPreview2.firstChild;
while(f!=null){var d=f.nextSibling;
this.container.appendChild(f);
f=d;
}this.shiftPreview2.parentNode.removeChild(this.shiftPreview2);
this.shiftPreview2=null;
}}else{c.setAttribute("transform","translate("+b+","+a+")");
if(this.shiftPreview1==null){this.shiftPreview1=document.createElement("div");
this.shiftPreview1.style.position="absolute";
this.shiftPreview1.style.overflow="visible";
this.shiftPreview2=document.createElement("div");
this.shiftPreview2.style.position="absolute";
this.shiftPreview2.style.overflow="visible";
var e=this.shiftPreview1;
var f=this.container.firstChild;
while(f!=null){var d=f.nextSibling;
if(f!=c.parentNode){e.appendChild(f);
}else{e=this.shiftPreview2;
}f=d;
}this.container.insertBefore(this.shiftPreview1,c.parentNode);
this.container.appendChild(this.shiftPreview2);
}this.shiftPreview1.style.left=b+"px";
this.shiftPreview1.style.top=a+"px";
this.shiftPreview2.style.left=b+"px";
this.shiftPreview2.style.top=a+"px";
}}else{c.style.left=b+"px";
c.style.top=a+"px";
}this.panDx=b;
this.panDy=a;
this.fireEvent(new mxEventObject(mxEvent.PAN));
}};
mxGraph.prototype.zoomIn=function(){this.zoom(this.zoomFactor);
};
mxGraph.prototype.zoomOut=function(){this.zoom(1/this.zoomFactor);
};
mxGraph.prototype.zoomActual=function(){if(this.view.scale==1){this.view.setTranslate(0,0);
}else{this.view.translate.x=0;
this.view.translate.y=0;
this.view.setScale(1);
}};
mxGraph.prototype.zoomTo=function(b,a){this.zoom(b/this.view.scale,a);
};
mxGraph.prototype.zoom=function(d,a){a=(a!=null)?a:this.centerZoom;
var i=this.view.scale*d;
var h=this.view.getState(this.getSelectionCell());
if(this.keepSelectionVisibleOnZoom&&h!=null){var e=new mxRectangle(h.x*d,h.y*d,h.width*d,h.height*d);
this.view.scale=i;
if(!this.scrollRectToVisible(e)){this.view.revalidate();
this.view.setScale(i);
}}else{if(a&&!mxUtils.hasScrollbars(this.container)){var c=this.container.offsetWidth;
var b=this.container.offsetHeight;
if(d>1){var g=(d-1)/(i*2);
c*=-g;
b*=-g;
}else{var g=(1/d-1)/(this.view.scale*2);
c*=g;
b*=g;
}this.view.scaleAndTranslate(i,this.view.translate.x+c,this.view.translate.y+b);
}else{this.view.setScale(i);
if(mxUtils.hasScrollbars(this.container)){var c=0;
var b=0;
if(a){c=this.container.offsetWidth*(d-1)/2;
b=this.container.offsetHeight*(d-1)/2;
}this.container.scrollLeft=Math.round(this.container.scrollLeft*d+c);
this.container.scrollTop=Math.round(this.container.scrollTop*d+b);
}}}};
mxGraph.prototype.zoomToRect=function(k){var o=this.container.clientWidth/k.width;
var n=this.container.clientHeight/k.height;
var h=o/n;
k.x=Math.max(0,k.x);
k.y=Math.max(0,k.y);
var e=Math.min(this.container.scrollWidth,k.x+k.width);
var l=Math.min(this.container.scrollHeight,k.y+k.height);
k.width=e-k.x;
k.height=l-k.y;
if(h<1){var c=k.height/h;
var b=(c-k.height)/2;
k.height=c;
var a=Math.min(k.y,b);
k.y=k.y-a;
l=Math.min(this.container.scrollHeight,k.y+k.height);
k.height=l-k.y;
}else{var g=k.width*h;
var m=(g-k.width)/2;
k.width=g;
var d=Math.min(k.x,m);
k.x=k.x-d;
e=Math.min(this.container.scrollWidth,k.x+k.width);
k.width=e-k.x;
}var f=this.container.clientWidth/k.width;
var i=this.view.scale*f;
if(!mxUtils.hasScrollbars(this.container)){this.view.scaleAndTranslate(i,(this.view.translate.x-k.x/this.view.scale),(this.view.translate.y-k.y/this.view.scale));
}else{this.view.setScale(i);
this.container.scrollLeft=Math.round(k.x*f);
this.container.scrollTop=Math.round(k.y*f);
}};
mxGraph.prototype.fit=function(e,d){if(this.container!=null){e=(e!=null)?e:0;
d=(d!=null)?d:false;
var g=this.container.clientWidth;
var i=this.container.clientHeight;
var a=this.view.getGraphBounds();
if(d&&a.x!=null&&a.y!=null){a.width+=a.x;
a.height+=a.y;
a.x=0;
a.y=0;
}var n=this.view.scale;
var f=a.width/n;
var h=a.height/n;
if(this.backgroundImage!=null){f=Math.max(f,this.backgroundImage.width-a.x/n);
h=Math.max(h,this.backgroundImage.height-a.y/n);
}var k=(d)?e:2*e;
var m=Math.floor(Math.min(g/(f+k),i/(h+k))*100)/100;
if(this.minFitScale!=null){m=Math.max(m,this.minFitScale);
}if(this.maxFitScale!=null){m=Math.min(m,this.maxFitScale);
}if(!d){if(!mxUtils.hasScrollbars(this.container)){var c=(a.x!=null)?Math.floor(this.view.translate.x-a.x/n+e+1):e;
var l=(a.y!=null)?Math.floor(this.view.translate.y-a.y/n+e+1):e;
this.view.scaleAndTranslate(m,c,l);
}else{this.view.setScale(m);
if(a.x!=null){this.container.scrollLeft=Math.round(a.x/n)*m-e-Math.max(0,(this.container.clientWidth-f*m)/2);
}if(a.y!=null){this.container.scrollTop=Math.round(a.y/n)*m-e-Math.max(0,(this.container.clientHeight-h*m)/2);
}}}else{if(this.view.scale!=m){this.view.setScale(m);
}}}return this.view.scale;
};
mxGraph.prototype.scrollCellToVisible=function(c,b){var a=-this.view.translate.x;
var i=-this.view.translate.y;
var g=this.view.getState(c);
if(g!=null){var f=new mxRectangle(a+g.x,i+g.y,g.width,g.height);
if(b&&this.container!=null){var d=this.container.clientWidth;
var e=this.container.clientHeight;
f.x=f.getCenterX()-d/2;
f.width=d;
f.y=f.getCenterY()-e/2;
f.height=e;
}if(this.scrollRectToVisible(f)){this.view.setTranslate(this.view.translate.x,this.view.translate.y);
}}};
mxGraph.prototype.scrollRectToVisible=function(k){var n=false;
if(k!=null){var m=this.container.offsetWidth;
var d=this.container.offsetHeight;
var b=Math.min(m,k.width);
var a=Math.min(d,k.height);
if(mxUtils.hasScrollbars(this.container)){var f=this.container;
k.x+=this.view.translate.x;
k.y+=this.view.translate.y;
var q=f.scrollLeft-k.x;
var i=Math.max(q-f.scrollLeft,0);
if(q>0){f.scrollLeft-=q+2;
}else{q=k.x+b-f.scrollLeft-f.clientWidth;
if(q>0){f.scrollLeft+=q+2;
}}var o=f.scrollTop-k.y;
var e=Math.max(0,o-f.scrollTop);
if(o>0){f.scrollTop-=o+2;
}else{o=k.y+a-f.scrollTop-f.clientHeight;
if(o>0){f.scrollTop+=o+2;
}}if(!this.useScrollbarsForPanning&&(i!=0||e!=0)){this.view.setTranslate(i,e);
}}else{var l=-this.view.translate.x;
var g=-this.view.translate.y;
var p=this.view.scale;
if(k.x+b>l+m){this.view.translate.x-=(k.x+b-m-l)/p;
n=true;
}if(k.y+a>g+d){this.view.translate.y-=(k.y+a-d-g)/p;
n=true;
}if(k.x<l){this.view.translate.x+=(l-k.x)/p;
n=true;
}if(k.y<g){this.view.translate.y+=(g-k.y)/p;
n=true;
}if(n){this.view.refresh();
if(this.selectionCellsHandler!=null){this.selectionCellsHandler.refresh();
}}}}return n;
};
mxGraph.prototype.getCellGeometry=function(a){return this.model.getGeometry(a);
};
mxGraph.prototype.isCellVisible=function(a){return this.model.isVisible(a);
};
mxGraph.prototype.isCellCollapsed=function(a){return this.model.isCollapsed(a);
};
mxGraph.prototype.isCellConnectable=function(a){return this.model.isConnectable(a);
};
mxGraph.prototype.isOrthogonal=function(b){var c=b.style[mxConstants.STYLE_ORTHOGONAL];
if(c!=null){return c;
}var a=this.view.getEdgeStyle(b);
return a==mxEdgeStyle.SegmentConnector||a==mxEdgeStyle.ElbowConnector||a==mxEdgeStyle.SideToSide||a==mxEdgeStyle.TopToBottom||a==mxEdgeStyle.EntityRelation||a==mxEdgeStyle.OrthConnector;
};
mxGraph.prototype.isLoop=function(b){var c=b.getVisibleTerminalState(true);
var a=b.getVisibleTerminalState(false);
return(c!=null&&c==a);
};
mxGraph.prototype.isCloneEvent=function(a){return mxEvent.isControlDown(a);
};
mxGraph.prototype.isToggleEvent=function(a){return(mxClient.IS_MAC)?mxEvent.isMetaDown(a):mxEvent.isControlDown(a);
};
mxGraph.prototype.isGridEnabledEvent=function(a){return a!=null&&!mxEvent.isAltDown(a);
};
mxGraph.prototype.isConstrainedEvent=function(a){return mxEvent.isShiftDown(a);
};
mxGraph.prototype.isForceMarqueeEvent=function(a){return mxEvent.isAltDown(a);
};
mxGraph.prototype.validationAlert=function(a){mxUtils.alert(a);
};
mxGraph.prototype.isEdgeValid=function(a,b,c){return this.getEdgeValidationError(a,b,c)==null;
};
mxGraph.prototype.getEdgeValidationError=function(b,a,g){if(b!=null&&!this.isAllowDanglingEdges()&&(a==null||g==null)){return"";
}if(b!=null&&this.model.getTerminal(b,true)==null&&this.model.getTerminal(b,false)==null){return null;
}if(!this.allowLoops&&a==g&&a!=null){return"";
}if(!this.isValidConnection(a,g)){return"";
}if(a!=null&&g!=null){var h="";
if(!this.multigraph){var d=this.model.getEdgesBetween(a,g,true);
if(d.length>1||(d.length==1&&d[0]!=b)){h+=(mxResources.get(this.alreadyConnectedResource)||this.alreadyConnectedResource)+"\n";
}}var k=this.model.getDirectedEdgeCount(a,true,b);
var e=this.model.getDirectedEdgeCount(g,false,b);
if(this.multiplicities!=null){for(var f=0;
f<this.multiplicities.length;
f++){var c=this.multiplicities[f].check(this,b,a,g,k,e);
if(c!=null){h+=c;
}}}var c=this.validateEdge(b,a,g);
if(c!=null){h+=c;
}return(h.length>0)?h:null;
}return(this.allowDanglingEdges)?null:"";
};
mxGraph.prototype.validateEdge=function(a,b,c){return null;
};
mxGraph.prototype.validateGraph=function(h,a){h=(h!=null)?h:this.model.getRoot();
a=(a!=null)?a:new Object();
var k=true;
var c=this.model.getChildCount(h);
for(var d=0;
d<c;
d++){var e=this.model.getChildAt(h,d);
var l=a;
if(this.isValidRoot(e)){l=new Object();
}var f=this.validateGraph(e,l);
if(f!=null){this.setCellWarning(e,f.replace(/\n/g,"<br>"));
}else{this.setCellWarning(e,null);
}k=k&&f==null;
}var g="";
if(this.isCellCollapsed(h)&&!k){g+=(mxResources.get(this.containsValidationErrorsResource)||this.containsValidationErrorsResource)+"\n";
}if(this.model.isEdge(h)){g+=this.getEdgeValidationError(h,this.model.getTerminal(h,true),this.model.getTerminal(h,false))||"";
}else{g+=this.getCellValidationError(h)||"";
}var b=this.validateCell(h,a);
if(b!=null){g+=b;
}if(this.model.getParent(h)==null){this.view.validate();
}return(g.length>0||!k)?g:null;
};
mxGraph.prototype.getCellValidationError=function(a){var b=this.model.getDirectedEdgeCount(a,true);
var c=this.model.getDirectedEdgeCount(a,false);
var f=this.model.getValue(a);
var d="";
if(this.multiplicities!=null){for(var e=0;
e<this.multiplicities.length;
e++){var g=this.multiplicities[e];
if(g.source&&mxUtils.isNode(f,g.type,g.attr,g.value)&&((g.max==0&&b>0)||(g.min==1&&b==0)||(g.max==1&&b>1))){d+=g.countError+"\n";
}else{if(!g.source&&mxUtils.isNode(f,g.type,g.attr,g.value)&&((g.max==0&&c>0)||(g.min==1&&c==0)||(g.max==1&&c>1))){d+=g.countError+"\n";
}}}}return(d.length>0)?d:null;
};
mxGraph.prototype.validateCell=function(a,b){return null;
};
mxGraph.prototype.getBackgroundImage=function(){return this.backgroundImage;
};
mxGraph.prototype.setBackgroundImage=function(a){this.backgroundImage=a;
};
mxGraph.prototype.getFoldingImage=function(b){if(b!=null&&this.foldingEnabled&&!this.getModel().isEdge(b.cell)){var a=this.isCellCollapsed(b.cell);
if(this.isCellFoldable(b.cell,!a)){return(a)?this.collapsedImage:this.expandedImage;
}}return null;
};
mxGraph.prototype.convertValueToString=function(a){var b=this.model.getValue(a);
if(b!=null){if(mxUtils.isNode(b)){return b.nodeName;
}else{if(typeof(b.toString)=="function"){return b.toString();
}}}return"";
};
mxGraph.prototype.getLabel=function(b){var a="";
if(this.labelsVisible&&b!=null){var d=this.view.getState(b);
var c=(d!=null)?d.style:this.getCellStyle(b);
if(!mxUtils.getValue(c,mxConstants.STYLE_NOLABEL,false)){a=this.convertValueToString(b);
}}return a;
};
mxGraph.prototype.isHtmlLabel=function(a){return this.isHtmlLabels();
};
mxGraph.prototype.isHtmlLabels=function(){return this.htmlLabels;
};
mxGraph.prototype.setHtmlLabels=function(a){this.htmlLabels=a;
};
mxGraph.prototype.isWrapping=function(a){var c=this.view.getState(a);
var b=(c!=null)?c.style:this.getCellStyle(a);
return(b!=null)?b[mxConstants.STYLE_WHITE_SPACE]=="wrap":false;
};
mxGraph.prototype.isLabelClipped=function(a){var c=this.view.getState(a);
var b=(c!=null)?c.style:this.getCellStyle(a);
return(b!=null)?b[mxConstants.STYLE_OVERFLOW]=="hidden":false;
};
mxGraph.prototype.getTooltip=function(e,c,a,f){var d=null;
if(e!=null){if(e.control!=null&&(c==e.control.node||c.parentNode==e.control.node)){d=this.collapseExpandResource;
d=mxResources.get(d)||d;
}if(d==null&&e.overlays!=null){e.overlays.visit(function(h,g){if(d==null&&(c==g.node||c.parentNode==g.node)){d=g.overlay.toString();
}});
}if(d==null){var b=this.selectionCellsHandler.getHandler(e.cell);
if(b!=null&&typeof(b.getTooltipForNode)=="function"){d=b.getTooltipForNode(c);
}}if(d==null){d=this.getTooltipForCell(e.cell);
}}return d;
};
mxGraph.prototype.getTooltipForCell=function(a){var b=null;
if(a!=null&&a.getTooltip!=null){b=a.getTooltip();
}else{b=this.convertValueToString(a);
}return b;
};
mxGraph.prototype.getCursorForCell=function(a){return null;
};
mxGraph.prototype.getStartSize=function(e){var a=new mxRectangle();
var d=this.view.getState(e);
var c=(d!=null)?d.style:this.getCellStyle(e);
if(c!=null){var b=parseInt(mxUtils.getValue(c,mxConstants.STYLE_STARTSIZE,mxConstants.DEFAULT_STARTSIZE));
if(mxUtils.getValue(c,mxConstants.STYLE_HORIZONTAL,true)){a.height=b;
}else{a.width=b;
}}return a;
};
mxGraph.prototype.getImage=function(a){return(a!=null&&a.style!=null)?a.style[mxConstants.STYLE_IMAGE]:null;
};
mxGraph.prototype.getVerticalAlign=function(a){return(a!=null&&a.style!=null)?(a.style[mxConstants.STYLE_VERTICAL_ALIGN]||mxConstants.ALIGN_MIDDLE):null;
};
mxGraph.prototype.getIndicatorColor=function(a){return(a!=null&&a.style!=null)?a.style[mxConstants.STYLE_INDICATOR_COLOR]:null;
};
mxGraph.prototype.getIndicatorGradientColor=function(a){return(a!=null&&a.style!=null)?a.style[mxConstants.STYLE_INDICATOR_GRADIENTCOLOR]:null;
};
mxGraph.prototype.getIndicatorShape=function(a){return(a!=null&&a.style!=null)?a.style[mxConstants.STYLE_INDICATOR_SHAPE]:null;
};
mxGraph.prototype.getIndicatorImage=function(a){return(a!=null&&a.style!=null)?a.style[mxConstants.STYLE_INDICATOR_IMAGE]:null;
};
mxGraph.prototype.getBorder=function(){return this.border;
};
mxGraph.prototype.setBorder=function(a){this.border=a;
};
mxGraph.prototype.isSwimlane=function(a){if(a!=null){if(this.model.getParent(a)!=this.model.getRoot()){var c=this.view.getState(a);
var b=(c!=null)?c.style:this.getCellStyle(a);
if(b!=null&&!this.model.isEdge(a)){return b[mxConstants.STYLE_SHAPE]==mxConstants.SHAPE_SWIMLANE;
}}}return false;
};
mxGraph.prototype.isResizeContainer=function(){return this.resizeContainer;
};
mxGraph.prototype.setResizeContainer=function(a){this.resizeContainer=a;
};
mxGraph.prototype.isEnabled=function(){return this.enabled;
};
mxGraph.prototype.setEnabled=function(a){this.enabled=a;
};
mxGraph.prototype.isEscapeEnabled=function(){return this.escapeEnabled;
};
mxGraph.prototype.setEscapeEnabled=function(a){this.escapeEnabled=a;
};
mxGraph.prototype.isInvokesStopCellEditing=function(){return this.invokesStopCellEditing;
};
mxGraph.prototype.setInvokesStopCellEditing=function(a){this.invokesStopCellEditing=a;
};
mxGraph.prototype.isEnterStopsCellEditing=function(){return this.enterStopsCellEditing;
};
mxGraph.prototype.setEnterStopsCellEditing=function(a){this.enterStopsCellEditing=a;
};
mxGraph.prototype.isCellLocked=function(a){var b=this.model.getGeometry(a);
return this.isCellsLocked()||(b!=null&&this.model.isVertex(a)&&b.relative);
};
mxGraph.prototype.isCellsLocked=function(){return this.cellsLocked;
};
mxGraph.prototype.setCellsLocked=function(a){this.cellsLocked=a;
};
mxGraph.prototype.getCloneableCells=function(a){return this.model.filterCells(a,mxUtils.bind(this,function(b){return this.isCellCloneable(b);
}));
};
mxGraph.prototype.isCellCloneable=function(a){var c=this.view.getState(a);
var b=(c!=null)?c.style:this.getCellStyle(a);
return this.isCellsCloneable()&&b[mxConstants.STYLE_CLONEABLE]!=0;
};
mxGraph.prototype.isCellsCloneable=function(){return this.cellsCloneable;
};
mxGraph.prototype.setCellsCloneable=function(a){this.cellsCloneable=a;
};
mxGraph.prototype.getExportableCells=function(a){return this.model.filterCells(a,mxUtils.bind(this,function(b){return this.canExportCell(b);
}));
};
mxGraph.prototype.canExportCell=function(a){return this.exportEnabled;
};
mxGraph.prototype.getImportableCells=function(a){return this.model.filterCells(a,mxUtils.bind(this,function(b){return this.canImportCell(b);
}));
};
mxGraph.prototype.canImportCell=function(a){return this.importEnabled;
};
mxGraph.prototype.isCellSelectable=function(a){return this.isCellsSelectable();
};
mxGraph.prototype.isCellsSelectable=function(){return this.cellsSelectable;
};
mxGraph.prototype.setCellsSelectable=function(a){this.cellsSelectable=a;
};
mxGraph.prototype.getDeletableCells=function(a){return this.model.filterCells(a,mxUtils.bind(this,function(b){return this.isCellDeletable(b);
}));
};
mxGraph.prototype.isCellDeletable=function(a){var c=this.view.getState(a);
var b=(c!=null)?c.style:this.getCellStyle(a);
return this.isCellsDeletable()&&b[mxConstants.STYLE_DELETABLE]!=0;
};
mxGraph.prototype.isCellsDeletable=function(){return this.cellsDeletable;
};
mxGraph.prototype.setCellsDeletable=function(a){this.cellsDeletable=a;
};
mxGraph.prototype.isLabelMovable=function(a){return !this.isCellLocked(a)&&((this.model.isEdge(a)&&this.edgeLabelsMovable)||(this.model.isVertex(a)&&this.vertexLabelsMovable));
};
mxGraph.prototype.getMovableCells=function(a){return this.model.filterCells(a,mxUtils.bind(this,function(b){return this.isCellMovable(b);
}));
};
mxGraph.prototype.isCellMovable=function(a){var c=this.view.getState(a);
var b=(c!=null)?c.style:this.getCellStyle(a);
return this.isCellsMovable()&&!this.isCellLocked(a)&&b[mxConstants.STYLE_MOVABLE]!=0;
};
mxGraph.prototype.isCellsMovable=function(){return this.cellsMovable;
};
mxGraph.prototype.setCellsMovable=function(a){this.cellsMovable=a;
};
mxGraph.prototype.isGridEnabled=function(){return this.gridEnabled;
};
mxGraph.prototype.setGridEnabled=function(a){this.gridEnabled=a;
};
mxGraph.prototype.isPortsEnabled=function(){return this.portsEnabled;
};
mxGraph.prototype.setPortsEnabled=function(a){this.portsEnabled=a;
};
mxGraph.prototype.getGridSize=function(){return this.gridSize;
};
mxGraph.prototype.setGridSize=function(a){this.gridSize=a;
};
mxGraph.prototype.getTolerance=function(){return this.tolerance;
};
mxGraph.prototype.setTolerance=function(a){this.tolerance=a;
};
mxGraph.prototype.isVertexLabelsMovable=function(){return this.vertexLabelsMovable;
};
mxGraph.prototype.setVertexLabelsMovable=function(a){this.vertexLabelsMovable=a;
};
mxGraph.prototype.isEdgeLabelsMovable=function(){return this.edgeLabelsMovable;
};
mxGraph.prototype.setEdgeLabelsMovable=function(a){this.edgeLabelsMovable=a;
};
mxGraph.prototype.isSwimlaneNesting=function(){return this.swimlaneNesting;
};
mxGraph.prototype.setSwimlaneNesting=function(a){this.swimlaneNesting=a;
};
mxGraph.prototype.isSwimlaneSelectionEnabled=function(){return this.swimlaneSelectionEnabled;
};
mxGraph.prototype.setSwimlaneSelectionEnabled=function(a){this.swimlaneSelectionEnabled=a;
};
mxGraph.prototype.isMultigraph=function(){return this.multigraph;
};
mxGraph.prototype.setMultigraph=function(a){this.multigraph=a;
};
mxGraph.prototype.isAllowLoops=function(){return this.allowLoops;
};
mxGraph.prototype.setAllowDanglingEdges=function(a){this.allowDanglingEdges=a;
};
mxGraph.prototype.isAllowDanglingEdges=function(){return this.allowDanglingEdges;
};
mxGraph.prototype.setConnectableEdges=function(a){this.connectableEdges=a;
};
mxGraph.prototype.isConnectableEdges=function(){return this.connectableEdges;
};
mxGraph.prototype.setCloneInvalidEdges=function(a){this.cloneInvalidEdges=a;
};
mxGraph.prototype.isCloneInvalidEdges=function(){return this.cloneInvalidEdges;
};
mxGraph.prototype.setAllowLoops=function(a){this.allowLoops=a;
};
mxGraph.prototype.isDisconnectOnMove=function(){return this.disconnectOnMove;
};
mxGraph.prototype.setDisconnectOnMove=function(a){this.disconnectOnMove=a;
};
mxGraph.prototype.isDropEnabled=function(){return this.dropEnabled;
};
mxGraph.prototype.setDropEnabled=function(a){this.dropEnabled=a;
};
mxGraph.prototype.isSplitEnabled=function(){return this.splitEnabled;
};
mxGraph.prototype.setSplitEnabled=function(a){this.splitEnabled=a;
};
mxGraph.prototype.isCellResizable=function(a){var c=this.view.getState(a);
var b=(c!=null)?c.style:this.getCellStyle(a);
return this.isCellsResizable()&&!this.isCellLocked(a)&&b[mxConstants.STYLE_RESIZABLE]!=0;
};
mxGraph.prototype.isCellsResizable=function(){return this.cellsResizable;
};
mxGraph.prototype.setCellsResizable=function(a){this.cellsResizable=a;
};
mxGraph.prototype.isTerminalPointMovable=function(a,b){return true;
};
mxGraph.prototype.isCellBendable=function(a){var c=this.view.getState(a);
var b=(c!=null)?c.style:this.getCellStyle(a);
return this.isCellsBendable()&&!this.isCellLocked(a)&&b[mxConstants.STYLE_BENDABLE]!=0;
};
mxGraph.prototype.isCellsBendable=function(){return this.cellsBendable;
};
mxGraph.prototype.setCellsBendable=function(a){this.cellsBendable=a;
};
mxGraph.prototype.isCellEditable=function(a){var c=this.view.getState(a);
var b=(c!=null)?c.style:this.getCellStyle(a);
return this.isCellsEditable()&&!this.isCellLocked(a)&&b[mxConstants.STYLE_EDITABLE]!=0;
};
mxGraph.prototype.isCellsEditable=function(){return this.cellsEditable;
};
mxGraph.prototype.setCellsEditable=function(a){this.cellsEditable=a;
};
mxGraph.prototype.isCellDisconnectable=function(a,b,c){return this.isCellsDisconnectable()&&!this.isCellLocked(a);
};
mxGraph.prototype.isCellsDisconnectable=function(){return this.cellsDisconnectable;
};
mxGraph.prototype.setCellsDisconnectable=function(a){this.cellsDisconnectable=a;
};
mxGraph.prototype.isValidSource=function(a){return(a==null&&this.allowDanglingEdges)||(a!=null&&(!this.model.isEdge(a)||this.connectableEdges)&&this.isCellConnectable(a));
};
mxGraph.prototype.isValidTarget=function(a){return this.isValidSource(a);
};
mxGraph.prototype.isValidConnection=function(a,b){return this.isValidSource(a)&&this.isValidTarget(b);
};
mxGraph.prototype.setConnectable=function(a){this.connectionHandler.setEnabled(a);
};
mxGraph.prototype.isConnectable=function(a){return this.connectionHandler.isEnabled();
};
mxGraph.prototype.setTooltips=function(a){this.tooltipHandler.setEnabled(a);
};
mxGraph.prototype.setPanning=function(a){this.panningHandler.panningEnabled=a;
};
mxGraph.prototype.isEditing=function(a){if(this.cellEditor!=null){var b=this.cellEditor.getEditingCell();
return(a==null)?b!=null:a==b;
}return false;
};
mxGraph.prototype.isAutoSizeCell=function(a){var c=this.view.getState(a);
var b=(c!=null)?c.style:this.getCellStyle(a);
return this.isAutoSizeCells()||b[mxConstants.STYLE_AUTOSIZE]==1;
};
mxGraph.prototype.isAutoSizeCells=function(){return this.autoSizeCells;
};
mxGraph.prototype.setAutoSizeCells=function(a){this.autoSizeCells=a;
};
mxGraph.prototype.isExtendParent=function(a){return !this.getModel().isEdge(a)&&this.isExtendParents();
};
mxGraph.prototype.isExtendParents=function(){return this.extendParents;
};
mxGraph.prototype.setExtendParents=function(a){this.extendParents=a;
};
mxGraph.prototype.isExtendParentsOnAdd=function(){return this.extendParentsOnAdd;
};
mxGraph.prototype.setExtendParentsOnAdd=function(a){this.extendParentsOnAdd=a;
};
mxGraph.prototype.isConstrainChild=function(a){return this.isConstrainChildren()&&!this.getModel().isEdge(this.getModel().getParent(a));
};
mxGraph.prototype.isConstrainChildren=function(){return this.constrainChildren;
};
mxGraph.prototype.setConstrainChildren=function(a){this.constrainChildren=a;
};
mxGraph.prototype.isAllowNegativeCoordinates=function(){return this.allowNegativeCoordinates;
};
mxGraph.prototype.setAllowNegativeCoordinates=function(a){this.allowNegativeCoordinates=a;
};
mxGraph.prototype.getOverlap=function(a){return(this.isAllowOverlapParent(a))?this.defaultOverlap:0;
};
mxGraph.prototype.isAllowOverlapParent=function(a){return false;
};
mxGraph.prototype.getFoldableCells=function(a,b){return this.model.filterCells(a,mxUtils.bind(this,function(c){return this.isCellFoldable(c,b);
}));
};
mxGraph.prototype.isCellFoldable=function(a,d){var c=this.view.getState(a);
var b=(c!=null)?c.style:this.getCellStyle(a);
return this.model.getChildCount(a)>0&&b[mxConstants.STYLE_FOLDABLE]!=0;
};
mxGraph.prototype.isValidDropTarget=function(a,c,b){return a!=null&&((this.isSplitEnabled()&&this.isSplitTarget(a,c,b))||(!this.model.isEdge(a)&&(this.isSwimlane(a)||(this.model.getChildCount(a)>0&&!this.isCellCollapsed(a)))));
};
mxGraph.prototype.isSplitTarget=function(d,c,b){if(this.model.isEdge(d)&&c!=null&&c.length==1&&this.isCellConnectable(c[0])&&this.getEdgeValidationError(d,this.model.getTerminal(d,true),c[0])==null){var e=this.model.getTerminal(d,true);
var a=this.model.getTerminal(d,false);
return(!this.model.isAncestor(c[0],e)&&!this.model.isAncestor(c[0],a));
}return false;
};
mxGraph.prototype.getDropTarget=function(c,b,a){if(!this.isSwimlaneNesting()){for(var e=0;
e<c.length;
e++){if(this.isSwimlane(c[e])){return null;
}}}var g=mxUtils.convertPoint(this.container,mxEvent.getClientX(b),mxEvent.getClientY(b));
g.x-=this.panDx;
g.y-=this.panDy;
var f=this.getSwimlaneAt(g.x,g.y);
if(a==null){a=f;
}else{if(f!=null){var d=this.model.getParent(f);
while(d!=null&&this.isSwimlane(d)&&d!=a){d=this.model.getParent(d);
}if(d==a){a=f;
}}}while(a!=null&&!this.isValidDropTarget(a,c,b)&&!this.model.isLayer(a)){a=this.model.getParent(a);
}return(!this.model.isLayer(a)&&mxUtils.indexOf(c,a)<0)?a:null;
};
mxGraph.prototype.getDefaultParent=function(){var b=this.defaultParent;
if(b==null){b=this.getCurrentRoot();
if(b==null){var a=this.model.getRoot();
b=this.model.getChildAt(a,0);
}}return b;
};
mxGraph.prototype.setDefaultParent=function(a){this.defaultParent=a;
};
mxGraph.prototype.getSwimlane=function(a){while(a!=null&&!this.isSwimlane(a)){a=this.model.getParent(a);
}return a;
};
mxGraph.prototype.getSwimlaneAt=function(b,h,e){e=e||this.getDefaultParent();
if(e!=null){var c=this.model.getChildCount(e);
for(var d=0;
d<c;
d++){var g=this.model.getChildAt(e,d);
var a=this.getSwimlaneAt(b,h,g);
if(a!=null){return a;
}else{if(this.isSwimlane(g)){var f=this.view.getState(g);
if(this.intersects(f,b,h)){return g;
}}}}}return null;
};
mxGraph.prototype.getCellAt=function(g,f,h,e,b){e=(e!=null)?e:true;
b=(b!=null)?b:true;
h=(h!=null)?h:this.getDefaultParent();
if(h!=null){var c=this.model.getChildCount(h);
for(var d=c-1;
d>=0;
d--){var k=this.model.getChildAt(h,d);
var l=this.getCellAt(g,f,k,e,b);
if(l!=null){return l;
}else{if(this.isCellVisible(k)&&(b&&this.model.isEdge(k)||e&&this.model.isVertex(k))){var a=this.view.getState(k);
if(this.intersects(a,g,f)){return k;
}}}}}return null;
};
mxGraph.prototype.intersects=function(a,g,f){if(a!=null){var h=a.absolutePoints;
if(h!=null){var c=this.tolerance*this.tolerance;
var k=h[0];
for(var b=1;
b<h.length;
b++){var d=h[b];
var e=mxUtils.ptSegDistSq(k.x,k.y,d.x,d.y,g,f);
if(e<=c){return true;
}k=d;
}}else{if(mxUtils.contains(a,g,f)){return true;
}}}return false;
};
mxGraph.prototype.hitsSwimlaneContent=function(d,a,f){var c=this.getView().getState(d);
var b=this.getStartSize(d);
if(c!=null){var e=this.getView().getScale();
a-=c.x;
f-=c.y;
if(b.width>0&&a>0&&a>b.width*e){return true;
}else{if(b.height>0&&f>0&&f>b.height*e){return true;
}}}return false;
};
mxGraph.prototype.getChildVertices=function(a){return this.getChildCells(a,true,false);
};
mxGraph.prototype.getChildEdges=function(a){return this.getChildCells(a,false,true);
};
mxGraph.prototype.getChildCells=function(f,d,b){f=(f!=null)?f:this.getDefaultParent();
d=(d!=null)?d:false;
b=(b!=null)?b:false;
var c=this.model.getChildCells(f,d,b);
var a=[];
for(var e=0;
e<c.length;
e++){if(this.isCellVisible(c[e])){a.push(c[e]);
}}return a;
};
mxGraph.prototype.getConnections=function(a,b){return this.getEdges(a,b,true,true,false);
};
mxGraph.prototype.getIncomingEdges=function(a,b){return this.getEdges(a,b,true,false,false);
};
mxGraph.prototype.getOutgoingEdges=function(a,b){return this.getEdges(a,b,false,true,false);
};
mxGraph.prototype.getEdges=function(p,o,f,l,e,c){f=(f!=null)?f:true;
l=(l!=null)?l:true;
e=(e!=null)?e:true;
c=(c!=null)?c:false;
var h=[];
var m=this.isCellCollapsed(p);
var g=this.model.getChildCount(p);
for(var k=0;
k<g;
k++){var d=this.model.getChildAt(p,k);
if(m||!this.isCellVisible(d)){h=h.concat(this.model.getEdges(d,f,l));
}}h=h.concat(this.model.getEdges(p,f,l));
var q=[];
for(var k=0;
k<h.length;
k++){var b=this.view.getState(h[k]);
var a=(b!=null)?b.getVisibleTerminal(true):this.view.getVisibleTerminal(h[k],true);
var n=(b!=null)?b.getVisibleTerminal(false):this.view.getVisibleTerminal(h[k],false);
if((e&&a==n)||((a!=n)&&((f&&n==p&&(o==null||this.isValidAncestor(a,o,c)))||(l&&a==p&&(o==null||this.isValidAncestor(n,o,c)))))){q.push(h[k]);
}}return q;
};
mxGraph.prototype.isValidAncestor=function(a,b,c){return(c?this.model.isAncestor(b,a):this.model.getParent(a)==b);
};
mxGraph.prototype.getOpposites=function(e,h,b,k){b=(b!=null)?b:true;
k=(k!=null)?k:true;
var m=[];
var f=new Object();
if(e!=null){for(var g=0;
g<e.length;
g++){var c=this.view.getState(e[g]);
var a=(c!=null)?c.getVisibleTerminal(true):this.view.getVisibleTerminal(e[g],true);
var l=(c!=null)?c.getVisibleTerminal(false):this.view.getVisibleTerminal(e[g],false);
if(a==h&&l!=null&&l!=h&&k){var d=mxCellPath.create(l);
if(f[d]==null){f[d]=l;
m.push(l);
}}else{if(l==h&&a!=null&&a!=h&&b){var d=mxCellPath.create(a);
if(f[d]==null){f[d]=a;
m.push(a);
}}}}}return m;
};
mxGraph.prototype.getEdgesBetween=function(b,h,e){e=(e!=null)?e:false;
var f=this.getEdges(b);
var k=[];
for(var g=0;
g<f.length;
g++){var d=this.view.getState(f[g]);
var a=(d!=null)?d.getVisibleTerminal(true):this.view.getVisibleTerminal(f[g],true);
var c=(d!=null)?d.getVisibleTerminal(false):this.view.getVisibleTerminal(f[g],false);
if((a==b&&c==h)||(!e&&a==h&&c==b)){k.push(f[g]);
}}return k;
};
mxGraph.prototype.getPointForEvent=function(a,f){var d=mxUtils.convertPoint(this.container,mxEvent.getClientX(a),mxEvent.getClientY(a));
var b=this.view.scale;
var c=this.view.translate;
var e=(f!=false)?this.gridSize/2:0;
d.x=this.snap(d.x/b-c.x-e);
d.y=this.snap(d.y/b-c.y-e);
return d;
};
mxGraph.prototype.getCells=function(g,f,c,m,h,n){n=(n!=null)?n:[];
if(c>0||m>0){var l=g+c;
var a=f+m;
h=h||this.getDefaultParent();
if(h!=null){var d=this.model.getChildCount(h);
for(var e=0;
e<d;
e++){var k=this.model.getChildAt(h,e);
var b=this.view.getState(k);
if(this.isCellVisible(k)&&b!=null){if(b.x>=g&&b.y>=f&&b.x+b.width<=l&&b.y+b.height<=a){n.push(k);
}else{this.getCells(g,f,c,m,k,n);
}}}}}return n;
};
mxGraph.prototype.getCellsBeyond=function(c,g,h,f,k){var l=[];
if(f||k){if(h==null){h=this.getDefaultParent();
}if(h!=null){var d=this.model.getChildCount(h);
for(var e=0;
e<d;
e++){var b=this.model.getChildAt(h,e);
var a=this.view.getState(b);
if(this.isCellVisible(b)&&a!=null){if((!f||a.x>=c)&&(!k||a.y>=g)){l.push(b);
}}}}}return l;
};
mxGraph.prototype.findTreeRoots=function(p,m,c){m=(m!=null)?m:false;
c=(c!=null)?c:false;
var r=[];
if(p!=null){var h=this.getModel();
var f=h.getChildCount(p);
var d=null;
var n=0;
for(var g=0;
g<f;
g++){var q=h.getChildAt(p,g);
if(this.model.isVertex(q)&&this.isCellVisible(q)){var b=this.getConnections(q,(m)?p:null);
var l=0;
var k=0;
for(var e=0;
e<b.length;
e++){var a=this.view.getVisibleTerminal(b[e],true);
if(a==q){l++;
}else{k++;
}}if((c&&l==0&&k>0)||(!c&&k==0&&l>0)){r.push(q);
}var o=(c)?k-l:l-k;
if(o>n){n=o;
d=q;
}}}if(r.length==0&&d!=null){r.push(d);
}}return r;
};
mxGraph.prototype.traverse=function(k,d,f,c,n){if(f!=null&&k!=null){d=(d!=null)?d:true;
n=n||[];
var b=mxCellPath.create(k);
if(n[b]==null){n[b]=k;
var o=f(k,c);
if(o==null||o){var a=this.model.getEdgeCount(k);
if(a>0){for(var g=0;
g<a;
g++){var l=this.model.getEdgeAt(k,g);
var m=this.model.getTerminal(l,true)==k;
if(!d||m){var h=this.model.getTerminal(l,!m);
this.traverse(h,d,f,l,n);
}}}}}}};
mxGraph.prototype.isCellSelected=function(a){return this.getSelectionModel().isSelected(a);
};
mxGraph.prototype.isSelectionEmpty=function(){return this.getSelectionModel().isEmpty();
};
mxGraph.prototype.clearSelection=function(){return this.getSelectionModel().clear();
};
mxGraph.prototype.getSelectionCount=function(){return this.getSelectionModel().cells.length;
};
mxGraph.prototype.getSelectionCell=function(){return this.getSelectionModel().cells[0];
};
mxGraph.prototype.getSelectionCells=function(){return this.getSelectionModel().cells.slice();
};
mxGraph.prototype.setSelectionCell=function(a){this.getSelectionModel().setCell(a);
};
mxGraph.prototype.setSelectionCells=function(a){this.getSelectionModel().setCells(a);
};
mxGraph.prototype.addSelectionCell=function(a){this.getSelectionModel().addCell(a);
};
mxGraph.prototype.addSelectionCells=function(a){this.getSelectionModel().addCells(a);
};
mxGraph.prototype.removeSelectionCell=function(a){this.getSelectionModel().removeCell(a);
};
mxGraph.prototype.removeSelectionCells=function(a){this.getSelectionModel().removeCells(a);
};
mxGraph.prototype.selectRegion=function(c,a){var b=this.getCells(c.x,c.y,c.width,c.height);
this.selectCellsForEvent(b,a);
return b;
};
mxGraph.prototype.selectNextCell=function(){this.selectCell(true);
};
mxGraph.prototype.selectPreviousCell=function(){this.selectCell();
};
mxGraph.prototype.selectParentCell=function(){this.selectCell(false,true);
};
mxGraph.prototype.selectChildCell=function(){this.selectCell(false,false,true);
};
mxGraph.prototype.selectCell=function(a,h,b){var d=this.selectionModel;
var m=(d.cells.length>0)?d.cells[0]:null;
if(d.cells.length>1){d.clear();
}var l=(m!=null)?this.model.getParent(m):this.getDefaultParent();
var e=this.model.getChildCount(l);
if(m==null&&e>0){var c=this.model.getChildAt(l,0);
this.setSelectionCell(c);
}else{if((m==null||h)&&this.view.getState(l)!=null&&this.model.getGeometry(l)!=null){if(this.getCurrentRoot()!=l){this.setSelectionCell(l);
}}else{if(m!=null&&b){var g=this.model.getChildCount(m);
if(g>0){var c=this.model.getChildAt(m,0);
this.setSelectionCell(c);
}}else{if(e>0){var f=l.getIndex(m);
if(a){f++;
var c=this.model.getChildAt(l,f%e);
this.setSelectionCell(c);
}else{f--;
var k=(f<0)?e-1:f;
var c=this.model.getChildAt(l,k);
this.setSelectionCell(c);
}}}}}};
mxGraph.prototype.selectAll=function(b){b=b||this.getDefaultParent();
var a=this.model.getChildren(b);
if(a!=null){this.setSelectionCells(a);
}};
mxGraph.prototype.selectVertices=function(a){this.selectCells(true,false,a);
};
mxGraph.prototype.selectEdges=function(a){this.selectCells(false,true,a);
};
mxGraph.prototype.selectCells=function(c,a,e){e=e||this.getDefaultParent();
var d=mxUtils.bind(this,function(f){return this.view.getState(f)!=null&&this.model.getChildCount(f)==0&&((this.model.isVertex(f)&&c)||(this.model.isEdge(f)&&a));
});
var b=this.model.filterDescendants(d,e);
this.setSelectionCells(b);
};
mxGraph.prototype.selectCellForEvent=function(a,b){var c=this.isCellSelected(a);
if(this.isToggleEvent(b)){if(c){this.removeSelectionCell(a);
}else{this.addSelectionCell(a);
}}else{if(!c||this.getSelectionCount()!=1){this.setSelectionCell(a);
}}};
mxGraph.prototype.selectCellsForEvent=function(b,a){if(this.isToggleEvent(a)){this.addSelectionCells(b);
}else{this.setSelectionCells(b);
}};
mxGraph.prototype.createHandler=function(c){var a=null;
if(c!=null){if(this.model.isEdge(c.cell)){var b=this.view.getEdgeStyle(c);
if(this.isLoop(c)||b==mxEdgeStyle.ElbowConnector||b==mxEdgeStyle.SideToSide||b==mxEdgeStyle.TopToBottom){a=new mxElbowEdgeHandler(c);
}else{if(b==mxEdgeStyle.SegmentConnector||b==mxEdgeStyle.OrthConnector){a=new mxEdgeSegmentHandler(c);
}else{a=new mxEdgeHandler(c);
}}}else{a=new mxVertexHandler(c);
}}return a;
};
mxGraph.prototype.addMouseListener=function(a){if(this.mouseListeners==null){this.mouseListeners=[];
}this.mouseListeners.push(a);
};
mxGraph.prototype.removeMouseListener=function(b){if(this.mouseListeners!=null){for(var a=0;
a<this.mouseListeners.length;
a++){if(this.mouseListeners[a]==b){this.mouseListeners.splice(a,1);
break;
}}}};
mxGraph.prototype.updateMouseEvent=function(a){if(a.graphX==null||a.graphY==null){var b=mxUtils.convertPoint(this.container,a.getX(),a.getY());
a.graphX=b.x-this.panDx;
a.graphY=b.y-this.panDy;
}};
mxGraph.prototype.fireMouseEvent=function(g,f,d){if(d==null){d=this;
}this.updateMouseEvent(f);
if(g==mxEvent.MOUSE_DOWN){this.isMouseDown=true;
}if(mxClient.IS_TOUCH&&this.doubleTapEnabled&&g==mxEvent.MOUSE_DOWN){var e=new Date().getTime();
if(e-this.lastTouchTime<this.doubleTapTimeout&&Math.abs(this.lastTouchX-f.getX())<this.doubleTapTolerance&&Math.abs(this.lastTouchY-f.getY())<this.doubleTapTolerance){this.lastTouchTime=0;
this.dblClick(f.getEvent(),f.getCell());
f.getEvent().cancelBubble=true;
}else{this.lastTouchX=f.getX();
this.lastTouchY=f.getY();
this.lastTouchTime=e;
}}var h=f.getEvent().detail!=2;
if(mxClient.IS_IE&&document.compatMode=="CSS1Compat"){if((this.lastMouseX!=null&&Math.abs(this.lastMouseX-f.getX())>this.doubleTapTolerance)||(this.lastMouseY!=null&&Math.abs(this.lastMouseY-f.getY())>this.doubleTapTolerance)){h=true;
}if(g==mxEvent.MOUSE_UP){this.lastMouseX=f.getX();
this.lastMouseY=f.getY();
}}if((g!=mxEvent.MOUSE_UP||this.isMouseDown)&&h){if(g==mxEvent.MOUSE_UP){this.isMouseDown=false;
}if(!this.isEditing()&&(mxClient.IS_OP||mxClient.IS_SF||mxClient.IS_GC||(mxClient.IS_IE&&mxClient.IS_SVG)||f.getEvent().target!=this.container)){if(g==mxEvent.MOUSE_MOVE&&this.isMouseDown&&this.autoScroll){this.scrollPointToVisible(f.getGraphX(),f.getGraphY(),this.autoExtend);
}if(this.mouseListeners!=null){var b=[d,f];
f.getEvent().returnValue=true;
for(var c=0;
c<this.mouseListeners.length;
c++){var a=this.mouseListeners[c];
if(g==mxEvent.MOUSE_DOWN){a.mouseDown.apply(a,b);
}else{if(g==mxEvent.MOUSE_MOVE){a.mouseMove.apply(a,b);
}else{if(g==mxEvent.MOUSE_UP){a.mouseUp.apply(a,b);
}}}}}if(g==mxEvent.MOUSE_UP){this.click(f);
}}}else{if(g==mxEvent.MOUSE_UP){this.isMouseDown=false;
}}};
mxGraph.prototype.destroy=function(){if(!this.destroyed){this.destroyed=true;
if(this.tooltipHandler!=null){this.tooltipHandler.destroy();
}if(this.selectionCellsHandler!=null){this.selectionCellsHandler.destroy();
}if(this.panningHandler!=null){this.panningHandler.destroy();
}if(this.connectionHandler!=null){this.connectionHandler.destroy();
}if(this.graphHandler!=null){this.graphHandler.destroy();
}if(this.cellEditor!=null){this.cellEditor.destroy();
}if(this.view!=null){this.view.destroy();
}if(this.model!=null&&this.graphModelChangeListener!=null){this.model.removeListener(this.graphModelChangeListener);
this.graphModelChangeListener=null;
}this.container=null;
}};
function mxCellOverlay(b,a,f,e,d,c){this.image=b;
this.tooltip=a;
this.align=(f!=null)?f:this.align;
this.verticalAlign=(e!=null)?e:this.verticalAlign;
this.offset=(d!=null)?d:new mxPoint();
this.cursor=(c!=null)?c:"help";
}mxCellOverlay.prototype=new mxEventSource();
mxCellOverlay.prototype.constructor=mxCellOverlay;
mxCellOverlay.prototype.image=null;
mxCellOverlay.prototype.tooltip=null;
mxCellOverlay.prototype.align=mxConstants.ALIGN_RIGHT;
mxCellOverlay.prototype.verticalAlign=mxConstants.ALIGN_BOTTOM;
mxCellOverlay.prototype.offset=null;
mxCellOverlay.prototype.cursor=null;
mxCellOverlay.prototype.defaultOverlap=0.5;
mxCellOverlay.prototype.getBounds=function(a){var c=a.view.graph.getModel().isEdge(a.cell);
var l=a.view.scale;
var k=null;
var d=this.image.width;
var b=this.image.height;
if(c){var i=a.absolutePoints;
if(i.length%2==1){k=i[Math.floor(i.length/2)];
}else{var e=i.length/2;
var g=i[e-1];
var f=i[e];
k=new mxPoint(g.x+(f.x-g.x)/2,g.y+(f.y-g.y)/2);
}}else{k=new mxPoint();
if(this.align==mxConstants.ALIGN_LEFT){k.x=a.x;
}else{if(this.align==mxConstants.ALIGN_CENTER){k.x=a.x+a.width/2;
}else{k.x=a.x+a.width;
}}if(this.verticalAlign==mxConstants.ALIGN_TOP){k.y=a.y;
}else{if(this.verticalAlign==mxConstants.ALIGN_MIDDLE){k.y=a.y+a.height/2;
}else{k.y=a.y+a.height;
}}}return new mxRectangle(k.x-(d*this.defaultOverlap-this.offset.x)*l,k.y-(b*this.defaultOverlap-this.offset.y)*l,d*l,b*l);
};
mxCellOverlay.prototype.toString=function(){return this.tooltip;
};
function mxOutline(b,a){this.source=b;
if(a!=null){this.init(a);
}}mxOutline.prototype.source=null;
mxOutline.prototype.outline=null;
mxOutline.prototype.graphRenderHint=mxConstants.RENDERING_HINT_FASTER;
mxOutline.prototype.enabled=true;
mxOutline.prototype.showViewport=true;
mxOutline.prototype.border=10;
mxOutline.prototype.sizerSize=8;
mxOutline.prototype.updateOnPan=false;
mxOutline.prototype.sizerImage=null;
mxOutline.prototype.suspended=false;
mxOutline.prototype.init=function(b){this.outline=new mxGraph(b,this.source.getModel(),this.graphRenderHint,this.source.getStylesheet());
this.outline.foldingEnabled=false;
this.outline.autoScroll=false;
var d=this.outline.graphModelChanged;
this.outline.graphModelChanged=mxUtils.bind(this,function(e){if(!this.suspended&&this.outline!=null){d.apply(this.outline,arguments);
}});
if(mxClient.IS_SVG){var c=this.outline.getView().getCanvas().parentNode;
c.setAttribute("shape-rendering","optimizeSpeed");
c.setAttribute("image-rendering","optimizeSpeed");
}this.outline.labelsVisible=false;
this.outline.setEnabled(false);
this.updateHandler=mxUtils.bind(this,function(f,e){if(!this.suspended&&!this.active){this.update();
}});
this.source.getModel().addListener(mxEvent.CHANGE,this.updateHandler);
this.outline.addMouseListener(this);
var a=this.source.getView();
a.addListener(mxEvent.SCALE,this.updateHandler);
a.addListener(mxEvent.TRANSLATE,this.updateHandler);
a.addListener(mxEvent.SCALE_AND_TRANSLATE,this.updateHandler);
a.addListener(mxEvent.DOWN,this.updateHandler);
a.addListener(mxEvent.UP,this.updateHandler);
mxEvent.addListener(this.source.container,"scroll",this.updateHandler);
this.panHandler=mxUtils.bind(this,function(e){if(this.updateOnPan){this.updateHandler.apply(this,arguments);
}});
this.source.addListener(mxEvent.PAN,this.panHandler);
this.refreshHandler=mxUtils.bind(this,function(e){this.outline.setStylesheet(this.source.getStylesheet());
this.outline.refresh();
});
this.source.addListener(mxEvent.REFRESH,this.refreshHandler);
this.bounds=new mxRectangle(0,0,0,0);
this.selectionBorder=new mxRectangleShape(this.bounds,null,mxConstants.OUTLINE_COLOR,mxConstants.OUTLINE_STROKEWIDTH);
this.selectionBorder.dialect=(this.outline.dialect!=mxConstants.DIALECT_SVG)?mxConstants.DIALECT_VML:mxConstants.DIALECT_SVG;
this.selectionBorder.crisp=true;
this.selectionBorder.init(this.outline.getView().getOverlayPane());
mxEvent.redirectMouseEvents(this.selectionBorder.node,this.outline);
this.selectionBorder.node.style.background="";
this.sizer=this.createSizer();
this.sizer.init(this.outline.getView().getOverlayPane());
if(this.enabled){this.sizer.node.style.cursor="pointer";
}mxEvent.addListener(this.sizer.node,(mxClient.IS_TOUCH)?"touchstart":"mousedown",mxUtils.bind(this,function(e){this.outline.fireMouseEvent(mxEvent.MOUSE_DOWN,new mxMouseEvent(e));
}));
this.selectionBorder.node.style.display=(this.showViewport)?"":"none";
this.sizer.node.style.display=this.selectionBorder.node.style.display;
this.selectionBorder.node.style.cursor="move";
this.update(false);
};
mxOutline.prototype.isEnabled=function(){return this.enabled;
};
mxOutline.prototype.setEnabled=function(a){this.enabled=a;
};
mxOutline.prototype.setZoomEnabled=function(a){this.sizer.node.style.visibility=(a)?"visible":"hidden";
};
mxOutline.prototype.refresh=function(){this.update(true);
};
mxOutline.prototype.createSizer=function(){if(this.sizerImage!=null){var a=new mxImageShape(new mxRectangle(0,0,this.sizerImage.width,this.sizerImage.height),this.sizerImage.src);
a.dialect=this.outline.dialect;
return a;
}else{var a=new mxRectangleShape(new mxRectangle(0,0,this.sizerSize,this.sizerSize),mxConstants.OUTLINE_HANDLE_FILLCOLOR,mxConstants.OUTLINE_HANDLE_STROKECOLOR);
a.dialect=this.outline.dialect;
a.crisp=true;
return a;
}};
mxOutline.prototype.getSourceContainerSize=function(){return new mxRectangle(0,0,this.source.container.scrollWidth,this.source.container.scrollHeight);
};
mxOutline.prototype.getOutlineOffset=function(a){return null;
};
mxOutline.prototype.update=function(g){if(this.source!=null){var v=this.source.view.scale;
var k=this.source.getGraphBounds();
var i=new mxRectangle(k.x/v+this.source.panDx,k.y/v+this.source.panDy,k.width/v,k.height/v);
var o=new mxRectangle(0,0,this.source.container.clientWidth/v,this.source.container.clientHeight/v);
var c=i.clone();
c.add(o);
var p=this.getSourceContainerSize();
var l=Math.max(p.width/v,c.width);
var s=Math.max(p.height/v,c.height);
var a=Math.max(0,this.outline.container.clientWidth-this.border);
var d=Math.max(0,this.outline.container.clientHeight-this.border);
var e=Math.min(a/l,d/s);
var A=e;
if(A>0){if(this.outline.getView().scale!=A){this.outline.getView().scale=A;
g=true;
}var u=this.outline.getView();
if(u.currentRoot!=this.source.getView().currentRoot){u.setCurrentRoot(this.source.getView().currentRoot);
}var n=this.source.view.translate;
var y=n.x+this.source.panDx;
var x=n.y+this.source.panDy;
var z=this.getOutlineOffset(A);
if(z!=null){y+=z.x;
x+=z.y;
}if(i.x<0){y=y-i.x;
}if(i.y<0){x=x-i.y;
}if(u.translate.x!=y||u.translate.y!=x){u.translate.x=y;
u.translate.y=x;
g=true;
}var h=u.translate;
A=this.source.getView().scale;
var r=A/u.scale;
var q=1/u.scale;
var m=this.source.container;
this.bounds=new mxRectangle((h.x-n.x-this.source.panDx)/q,(h.y-n.y-this.source.panDy)/q,(m.clientWidth/r),(m.clientHeight/r));
this.bounds.x+=this.source.container.scrollLeft*u.scale/A;
this.bounds.y+=this.source.container.scrollTop*u.scale/A;
var w=this.selectionBorder.bounds;
if(w.x!=this.bounds.x||w.y!=this.bounds.y||w.width!=this.bounds.width||w.height!=this.bounds.height){this.selectionBorder.bounds=this.bounds;
this.selectionBorder.redraw();
}var w=this.sizer.bounds;
var f=new mxRectangle(this.bounds.x+this.bounds.width-w.width/2,this.bounds.y+this.bounds.height-w.height/2,w.width,w.height);
if(w.x!=f.x||w.y!=f.y||w.width!=f.width||w.height!=f.height){this.sizer.bounds=f;
if(this.sizer.node.style.visibility!="hidden"){this.sizer.redraw();
}}if(g){this.outline.view.revalidate();
}}}};
mxOutline.prototype.mouseDown=function(a,b){if(this.enabled&&this.showViewport){this.zoom=b.isSource(this.sizer);
this.startX=b.getX();
this.startY=b.getY();
this.active=true;
if(this.source.useScrollbarsForPanning&&mxUtils.hasScrollbars(this.source.container)){this.dx0=this.source.container.scrollLeft;
this.dy0=this.source.container.scrollTop;
}else{this.dx0=0;
this.dy0=0;
}}b.consume();
};
mxOutline.prototype.mouseMove=function(e,f){if(this.active){this.selectionBorder.node.style.display=(this.showViewport)?"":"none";
this.sizer.node.style.display=this.selectionBorder.node.style.display;
var k=f.getX()-this.startX;
var h=f.getY()-this.startY;
var a=null;
if(!this.zoom){var d=this.outline.getView().scale;
a=new mxRectangle(this.bounds.x+k,this.bounds.y+h,this.bounds.width,this.bounds.height);
this.selectionBorder.bounds=a;
this.selectionBorder.redraw();
k/=d;
k*=this.source.getView().scale;
h/=d;
h*=this.source.getView().scale;
this.source.panGraph(-k-this.dx0,-h-this.dy0);
}else{var c=this.source.container;
var i=c.clientWidth/c.clientHeight;
h=k/i;
a=new mxRectangle(this.bounds.x,this.bounds.y,Math.max(1,this.bounds.width+k),Math.max(1,this.bounds.height+h));
this.selectionBorder.bounds=a;
this.selectionBorder.redraw();
}var g=this.sizer.bounds;
this.sizer.bounds=new mxRectangle(a.x+a.width-g.width/2,a.y+a.height-g.height/2,g.width,g.height);
if(this.sizer.node.style.visibility!="hidden"){this.sizer.redraw();
}f.consume();
}};
mxOutline.prototype.mouseUp=function(e,f){if(this.active){var c=f.getX()-this.startX;
var b=f.getY()-this.startY;
if(Math.abs(c)>0||Math.abs(b)>0){if(!this.zoom){if(!this.source.useScrollbarsForPanning||!mxUtils.hasScrollbars(this.source.container)){this.source.panGraph(0,0);
c/=this.outline.getView().scale;
b/=this.outline.getView().scale;
var d=this.source.getView().translate;
this.source.getView().setTranslate(d.x-c,d.y-b);
}}else{var a=this.selectionBorder.bounds.width;
var g=this.source.getView().scale;
this.source.zoomTo(g-(c*g)/a,false);
}this.update();
f.consume();
}this.index=null;
this.active=false;
}};
mxOutline.prototype.destroy=function(){if(this.source!=null){this.source.removeListener(this.panHandler);
this.source.removeListener(this.refreshHandler);
this.source.getModel().removeListener(this.updateHandler);
this.source.getView().removeListener(this.updateHandler);
mxEvent.addListener(this.source.container,"scroll",this.updateHandler);
this.source=null;
}if(this.outline!=null){this.outline.removeMouseListener(this);
this.outline.destroy();
this.outline=null;
}if(this.selectionBorder!=null){this.selectionBorder.destroy();
this.selectionBorder=null;
}if(this.sizer!=null){this.sizer.destroy();
this.sizer=null;
}};
function mxMultiplicity(a,g,e,k,c,i,b,d,h,f){this.source=a;
this.type=g;
this.attr=e;
this.value=k;
this.min=(c!=null)?c:0;
this.max=(i!=null)?i:"n";
this.validNeighbors=b;
this.countError=mxResources.get(d)||d;
this.typeError=mxResources.get(h)||h;
this.validNeighborsAllowed=(f!=null)?f:true;
}mxMultiplicity.prototype.type=null;
mxMultiplicity.prototype.attr=null;
mxMultiplicity.prototype.value=null;
mxMultiplicity.prototype.source=null;
mxMultiplicity.prototype.min=null;
mxMultiplicity.prototype.max=null;
mxMultiplicity.prototype.validNeighbors=null;
mxMultiplicity.prototype.validNeighborsAllowed=true;
mxMultiplicity.prototype.countError=null;
mxMultiplicity.prototype.typeError=null;
mxMultiplicity.prototype.check=function(f,d,e,h,c,b){var a="";
if((this.source&&this.checkTerminal(f,e,d))||(!this.source&&this.checkTerminal(f,h,d))){if(this.countError!=null&&((this.source&&(this.max==0||(c>=this.max)))||(!this.source&&(this.max==0||(b>=this.max))))){a+=this.countError+"\n";
}if(this.validNeighbors!=null&&this.typeError!=null&&this.validNeighbors.length>0){var g=this.checkNeighbors(f,d,e,h);
if(!g){a+=this.typeError+"\n";
}}}return(a.length>0)?a:null;
};
mxMultiplicity.prototype.checkNeighbors=function(h,c,a,f){var g=h.model.getValue(a);
var e=h.model.getValue(f);
var i=!this.validNeighborsAllowed;
var b=this.validNeighbors;
for(var d=0;
d<b.length;
d++){if(this.source&&this.checkType(h,e,b[d])){i=this.validNeighborsAllowed;
break;
}else{if(!this.source&&this.checkType(h,g,b[d])){i=this.validNeighborsAllowed;
break;
}}}return i;
};
mxMultiplicity.prototype.checkTerminal=function(d,a,b){var c=d.model.getValue(a);
return this.checkType(d,c,this.type,this.attr,this.value);
};
mxMultiplicity.prototype.checkType=function(d,c,b,a,e){if(c!=null){if(!isNaN(c.nodeType)){return mxUtils.isNode(c,b,a,e);
}else{return c==b;
}}return false;
};
function mxLayoutManager(a){this.undoHandler=mxUtils.bind(this,function(c,b){if(this.isEnabled()){this.beforeUndo(b.getProperty("edit"));
}});
this.moveHandler=mxUtils.bind(this,function(c,b){if(this.isEnabled()){this.cellsMoved(b.getProperty("cells"),b.getProperty("event"));
}});
this.setGraph(a);
}mxLayoutManager.prototype=new mxEventSource();
mxLayoutManager.prototype.constructor=mxLayoutManager;
mxLayoutManager.prototype.graph=null;
mxLayoutManager.prototype.bubbling=true;
mxLayoutManager.prototype.enabled=true;
mxLayoutManager.prototype.updateHandler=null;
mxLayoutManager.prototype.moveHandler=null;
mxLayoutManager.prototype.isEnabled=function(){return this.enabled;
};
mxLayoutManager.prototype.setEnabled=function(a){this.enabled=a;
};
mxLayoutManager.prototype.isBubbling=function(){return this.bubbling;
};
mxLayoutManager.prototype.setBubbling=function(a){this.bubbling=a;
};
mxLayoutManager.prototype.getGraph=function(){return this.graph;
};
mxLayoutManager.prototype.setGraph=function(b){if(this.graph!=null){var a=this.graph.getModel();
a.removeListener(this.undoHandler);
this.graph.removeListener(this.moveHandler);
}this.graph=b;
if(this.graph!=null){var a=this.graph.getModel();
a.addListener(mxEvent.BEFORE_UNDO,this.undoHandler);
this.graph.addListener(mxEvent.MOVE_CELLS,this.moveHandler);
}};
mxLayoutManager.prototype.getLayout=function(a){return null;
};
mxLayoutManager.prototype.beforeUndo=function(c){var b=this.getCellsForChanges(c.changes);
var a=this.getGraph().getModel();
if(this.isBubbling()){var d=a.getParents(b);
while(d.length>0){b=b.concat(d);
d=a.getParents(d);
}}this.layoutCells(mxUtils.sortCells(b,false));
};
mxLayoutManager.prototype.cellsMoved=function(d,b){if(d!=null&&b!=null){var a=mxUtils.convertPoint(this.getGraph().container,mxEvent.getClientX(b),mxEvent.getClientY(b));
var c=this.getGraph().getModel();
for(var e=0;
e<d.length;
e++){var f=this.getLayout(c.getParent(d[e]));
if(f!=null){f.moveCell(d[e],a.x,a.y);
}}}};
mxLayoutManager.prototype.getCellsForChanges=function(e){var a=[];
var f=new Object();
for(var d=0;
d<e.length;
d++){var h=e[d];
if(h instanceof mxRootChange){return[];
}else{var c=this.getCellsForChange(h);
for(var b=0;
b<c.length;
b++){if(c[b]!=null){var g=mxCellPath.create(c[b]);
if(f[g]==null){f[g]=c[b];
a.push(c[b]);
}}}}}return a;
};
mxLayoutManager.prototype.getCellsForChange=function(b){var a=this.getGraph().getModel();
if(b instanceof mxChildChange){return[b.child,b.previous,a.getParent(b.child)];
}else{if(b instanceof mxTerminalChange||b instanceof mxGeometryChange){return[b.cell,a.getParent(b.cell)];
}}return[];
};
mxLayoutManager.prototype.layoutCells=function(b){if(b.length>0){var a=this.getGraph().getModel();
a.beginUpdate();
try{var d=null;
for(var c=0;
c<b.length;
c++){if(b[c]!=a.getRoot()&&b[c]!=d){d=b[c];
this.executeLayout(this.getLayout(d),d);
}}this.fireEvent(new mxEventObject(mxEvent.LAYOUT_CELLS,"cells",b));
}finally{a.endUpdate();
}}};
mxLayoutManager.prototype.executeLayout=function(b,a){if(b!=null&&a!=null){b.execute(a);
}};
mxLayoutManager.prototype.destroy=function(){this.setGraph(null);
};
function mxSpaceManager(c,b,d,a){this.resizeHandler=mxUtils.bind(this,function(f,e){if(this.isEnabled()){this.cellsResized(e.getProperty("cells"));
}});
this.foldHandler=mxUtils.bind(this,function(f,e){if(this.isEnabled()){this.cellsResized(e.getProperty("cells"));
}});
this.shiftRightwards=(b!=null)?b:true;
this.shiftDownwards=(d!=null)?d:true;
this.extendParents=(a!=null)?a:true;
this.setGraph(c);
}mxSpaceManager.prototype=new mxEventSource();
mxSpaceManager.prototype.constructor=mxSpaceManager;
mxSpaceManager.prototype.graph=null;
mxSpaceManager.prototype.enabled=true;
mxSpaceManager.prototype.shiftRightwards=true;
mxSpaceManager.prototype.shiftDownwards=true;
mxSpaceManager.prototype.extendParents=true;
mxSpaceManager.prototype.resizeHandler=null;
mxSpaceManager.prototype.foldHandler=null;
mxSpaceManager.prototype.isCellIgnored=function(a){return !this.getGraph().getModel().isVertex(a);
};
mxSpaceManager.prototype.isCellShiftable=function(a){return this.getGraph().getModel().isVertex(a)&&this.getGraph().isCellMovable(a);
};
mxSpaceManager.prototype.isEnabled=function(){return this.enabled;
};
mxSpaceManager.prototype.setEnabled=function(a){this.enabled=a;
};
mxSpaceManager.prototype.isShiftRightwards=function(){return this.shiftRightwards;
};
mxSpaceManager.prototype.setShiftRightwards=function(a){this.shiftRightwards=a;
};
mxSpaceManager.prototype.isShiftDownwards=function(){return this.shiftDownwards;
};
mxSpaceManager.prototype.setShiftDownwards=function(a){this.shiftDownwards=a;
};
mxSpaceManager.prototype.isExtendParents=function(){return this.extendParents;
};
mxSpaceManager.prototype.setExtendParents=function(a){this.extendParents=a;
};
mxSpaceManager.prototype.getGraph=function(){return this.graph;
};
mxSpaceManager.prototype.setGraph=function(a){if(this.graph!=null){this.graph.removeListener(this.resizeHandler);
this.graph.removeListener(this.foldHandler);
}this.graph=a;
if(this.graph!=null){this.graph.addListener(mxEvent.RESIZE_CELLS,this.resizeHandler);
this.graph.addListener(mxEvent.FOLD_CELLS,this.foldHandler);
}};
mxSpaceManager.prototype.cellsResized=function(b){if(b!=null){var a=this.graph.getModel();
a.beginUpdate();
try{for(var c=0;
c<b.length;
c++){if(!this.isCellIgnored(b[c])){this.cellResized(b[c]);
break;
}}}finally{a.endUpdate();
}}};
mxSpaceManager.prototype.cellResized=function(b){var c=this.getGraph();
var o=c.getView();
var h=c.getModel();
var k=o.getState(b);
var s=o.getState(h.getParent(b));
if(k!=null&&s!=null){var g=this.getCellsToShift(k);
var u=h.getGeometry(b);
if(g!=null&&u!=null){var a=o.translate;
var t=o.scale;
var q=k.x-s.origin.x-a.x*t;
var e=k.y-s.origin.y-a.y*t;
var r=k.x+k.width;
var l=k.y+k.height;
var n=k.width-u.width*t+q-u.x*t;
var m=k.height-u.height*t+e-u.y*t;
var f=1-u.width*t/k.width;
var d=1-u.height*t/k.height;
h.beginUpdate();
try{for(var p=0;
p<g.length;
p++){if(g[p]!=b&&this.isCellShiftable(g[p])){this.shiftCell(g[p],n,m,q,e,r,l,f,d,this.isExtendParents()&&c.isExtendParent(g[p]));
}}}finally{h.endUpdate();
}}}};
mxSpaceManager.prototype.shiftCell=function(l,q,p,e,i,k,a,d,c,h){var n=this.getGraph();
var b=n.getView().getState(l);
if(b!=null){var g=n.getModel();
var f=g.getGeometry(l);
if(f!=null){g.beginUpdate();
try{if(this.isShiftRightwards()){if(b.x>=k){f=f.clone();
f.translate(-q,0);
}else{var o=Math.max(0,b.x-x0);
f=f.clone();
f.translate(-d*o,0);
}}if(this.isShiftDownwards()){if(b.y>=a){f=f.clone();
f.translate(0,-p);
}else{var m=Math.max(0,b.y-i);
f=f.clone();
f.translate(0,-c*m);
}}if(f!=g.getGeometry(l)){g.setGeometry(l,f);
if(h){n.extendParent(l);
}}}finally{g.endUpdate();
}}}};
mxSpaceManager.prototype.getCellsToShift=function(d){var c=this.getGraph();
var b=c.getModel().getParent(d.cell);
var e=this.isShiftDownwards();
var a=this.isShiftRightwards();
return c.getCellsBeyond(d.x+((e)?0:d.width),d.y+((e&&a)?0:d.height),b,a,e);
};
mxSpaceManager.prototype.destroy=function(){this.setGraph(null);
};
function mxSwimlaneManager(d,b,c,a){this.horizontal=(b!=null)?b:true;
this.addEnabled=(c!=null)?c:true;
this.resizeEnabled=(a!=null)?a:true;
this.addHandler=mxUtils.bind(this,function(f,e){if(this.isEnabled()&&this.isAddEnabled()){this.cellsAdded(e.getProperty("cells"));
}});
this.resizeHandler=mxUtils.bind(this,function(f,e){if(this.isEnabled()&&this.isResizeEnabled()){this.cellsResized(e.getProperty("cells"));
}});
this.setGraph(d);
}mxSwimlaneManager.prototype=new mxEventSource();
mxSwimlaneManager.prototype.constructor=mxSwimlaneManager;
mxSwimlaneManager.prototype.graph=null;
mxSwimlaneManager.prototype.enabled=true;
mxSwimlaneManager.prototype.horizontal=true;
mxSwimlaneManager.prototype.addEnabled=true;
mxSwimlaneManager.prototype.resizeEnabled=true;
mxSwimlaneManager.prototype.addHandler=null;
mxSwimlaneManager.prototype.resizeHandler=null;
mxSwimlaneManager.prototype.isEnabled=function(){return this.enabled;
};
mxSwimlaneManager.prototype.setEnabled=function(a){this.enabled=a;
};
mxSwimlaneManager.prototype.isHorizontal=function(){return this.horizontal;
};
mxSwimlaneManager.prototype.setHorizontal=function(a){this.horizontal=a;
};
mxSwimlaneManager.prototype.isAddEnabled=function(){return this.addEnabled;
};
mxSwimlaneManager.prototype.setAddEnabled=function(a){this.addEnabled=a;
};
mxSwimlaneManager.prototype.isResizeEnabled=function(){return this.resizeEnabled;
};
mxSwimlaneManager.prototype.setResizeEnabled=function(a){this.resizeEnabled=a;
};
mxSwimlaneManager.prototype.getGraph=function(){return this.graph;
};
mxSwimlaneManager.prototype.setGraph=function(a){if(this.graph!=null){this.graph.removeListener(this.addHandler);
this.graph.removeListener(this.resizeHandler);
}this.graph=a;
if(this.graph!=null){this.graph.addListener(mxEvent.ADD_CELLS,this.addHandler);
this.graph.addListener(mxEvent.CELLS_RESIZED,this.resizeHandler);
}};
mxSwimlaneManager.prototype.isSwimlaneIgnored=function(a){return !this.getGraph().isSwimlane(a);
};
mxSwimlaneManager.prototype.isCellHorizontal=function(a){if(this.graph.isSwimlane(a)){var c=this.graph.view.getState(a);
var b=(c!=null)?c.style:this.graph.getCellStyle(a);
return mxUtils.getValue(b,mxConstants.STYLE_HORIZONTAL,1)==1;
}return !this.isHorizontal();
};
mxSwimlaneManager.prototype.cellsAdded=function(b){if(b!=null){var a=this.getGraph().getModel();
a.beginUpdate();
try{for(var c=0;
c<b.length;
c++){if(!this.isSwimlaneIgnored(b[c])){this.swimlaneAdded(b[c]);
}}}finally{a.endUpdate();
}}};
mxSwimlaneManager.prototype.swimlaneAdded=function(e){var b=this.getGraph().getModel();
var d=b.getParent(e);
var a=b.getChildCount(d);
var f=null;
for(var c=0;
c<a;
c++){var g=b.getChildAt(d,c);
if(g!=e&&!this.isSwimlaneIgnored(g)){f=b.getGeometry(g);
if(f!=null){break;
}}}if(f!=null){this.resizeSwimlane(e,f.width,f.height);
}};
mxSwimlaneManager.prototype.cellsResized=function(b){if(b!=null){var a=this.getGraph().getModel();
a.beginUpdate();
try{for(var e=0;
e<b.length;
e++){if(!this.isSwimlaneIgnored(b[e])){var h=a.getGeometry(b[e]);
if(h!=null){var d=new mxRectangle(0,0,h.width,h.height);
var g=b[e];
var f=g;
while(f!=null){g=f;
f=a.getParent(f);
var c=(this.graph.isSwimlane(f))?this.graph.getStartSize(f):new mxRectangle();
d.width+=c.width;
d.height+=c.height;
}this.resizeSwimlane(g,d.width,d.height);
}}}}finally{a.endUpdate();
}}};
mxSwimlaneManager.prototype.resizeSwimlane=function(l,m,g){var k=this.getGraph().getModel();
k.beginUpdate();
try{if(!this.isSwimlaneIgnored(l)){var e=k.getGeometry(l);
if(e!=null){var a=this.isCellHorizontal(l);
if((a&&e.height!=g)||(!a&&e.width!=m)){e=e.clone();
if(a){e.height=g;
}else{e.width=m;
}k.setGeometry(l,e);
}}}var f=(this.graph.isSwimlane(l))?this.graph.getStartSize(l):new mxRectangle();
m-=f.width;
g-=f.height;
var c=k.getChildCount(l);
for(var d=0;
d<c;
d++){var b=k.getChildAt(l,d);
this.resizeSwimlane(b,m,g);
}}finally{k.endUpdate();
}};
mxSwimlaneManager.prototype.destroy=function(){this.setGraph(null);
};
function mxTemporaryCellStates(a,g,b){this.view=a;
g=(g!=null)?g:1;
this.oldBounds=a.getGraphBounds();
this.oldStates=a.getStates();
this.oldScale=a.getScale();
a.setStates(new mxDictionary());
a.setScale(g);
if(b!=null){var e=a.createState(new mxCell());
for(var c=0;
c<b.length;
c++){a.validateBounds(e,b[c]);
}var f=null;
for(var c=0;
c<b.length;
c++){var d=a.validatePoints(e,b[c]);
if(f==null){f=d;
}else{f.add(d);
}}if(f==null){f=new mxRectangle();
}a.setGraphBounds(f);
}}mxTemporaryCellStates.prototype.view=null;
mxTemporaryCellStates.prototype.oldStates=null;
mxTemporaryCellStates.prototype.oldBounds=null;
mxTemporaryCellStates.prototype.oldScale=null;
mxTemporaryCellStates.prototype.destroy=function(){this.view.setScale(this.oldScale);
this.view.setStates(this.oldStates);
this.view.setGraphBounds(this.oldBounds);
};
function mxCellStatePreview(a){this.graph=a;
this.deltas=new Object();
}mxCellStatePreview.prototype.graph=null;
mxCellStatePreview.prototype.deltas=null;
mxCellStatePreview.prototype.count=0;
mxCellStatePreview.prototype.isEmpty=function(){return this.count==0;
};
mxCellStatePreview.prototype.moveState=function(d,b,a,e,c){e=(e!=null)?e:true;
c=(c!=null)?c:true;
var g=mxCellPath.create(d.cell);
var f=this.deltas[g];
if(f==null){f=new mxPoint(b,a);
this.deltas[g]=f;
this.count++;
}else{if(e){f.X+=b;
f.Y+=a;
}else{f.X=b;
f.Y=a;
}}if(c){this.addEdges(d);
}return f;
};
mxCellStatePreview.prototype.show=function(f){var c=this.graph.getModel();
var b=c.getRoot();
for(var h in this.deltas){var a=mxCellPath.resolve(b,h);
var e=this.graph.view.getState(a);
var g=this.deltas[h];
var d=this.graph.view.getState(c.getParent(a));
this.translateState(d,e,g.x,g.y);
}for(var h in this.deltas){var a=mxCellPath.resolve(b,h);
var e=this.graph.view.getState(a);
var g=this.deltas[h];
var d=this.graph.view.getState(c.getParent(a));
this.revalidateState(d,e,g.x,g.y,f);
}};
mxCellStatePreview.prototype.translateState=function(g,a,k,h){if(a!=null){var f=this.graph.getModel();
if(f.isVertex(a.cell)){a.invalid=true;
this.graph.view.validateBounds(g,a.cell);
var e=f.getGeometry(a.cell);
var b=mxCellPath.create(a.cell);
if((k!=0||h!=0)&&e!=null&&(!e.relative||this.deltas[b]!=null)){a.x+=k;
a.y+=h;
}}var c=f.getChildCount(a.cell);
for(var d=0;
d<c;
d++){this.translateState(a,this.graph.view.getState(f.getChildAt(a.cell,d)),k,h);
}}};
mxCellStatePreview.prototype.revalidateState=function(h,a,l,k,g){if(a!=null){a.invalid=true;
this.graph.view.validatePoints(h,a.cell);
var b=mxCellPath.create(a.cell);
var f=this.graph.getModel();
var e=this.graph.getCellGeometry(a.cell);
if((l!=0||k!=0)&&e!=null&&e.relative&&f.isVertex(a.cell)&&(h==null||f.isVertex(h.cell)||this.deltas[b]!=null)){a.x+=l;
a.y+=k;
this.graph.cellRenderer.redraw(a);
}if(g!=null){g(a);
}var c=f.getChildCount(a.cell);
for(var d=0;
d<c;
d++){this.revalidateState(a,this.graph.view.getState(f.getChildAt(a.cell,d)),l,k,g);
}}};
mxCellStatePreview.prototype.addEdges=function(d){var a=this.graph.getModel();
var e=a.getEdgeCount(d.cell);
for(var b=0;
b<e;
b++){var c=this.graph.view.getState(a.getEdgeAt(d.cell,b));
if(c!=null){this.moveState(c,0,0);
}}};
function mxConnectionConstraint(a,b){this.point=a;
this.perimeter=(b!=null)?b:true;
}mxConnectionConstraint.prototype.point=null;
mxConnectionConstraint.prototype.perimeter=null;
function mxGraphHandler(a){this.graph=a;
this.graph.addMouseListener(this);
this.panHandler=mxUtils.bind(this,function(){this.updatePreviewShape();
});
this.graph.addListener(mxEvent.PAN,this.panHandler);
}mxGraphHandler.prototype.graph=null;
mxGraphHandler.prototype.maxCells=(mxClient.IS_IE)?20:50;
mxGraphHandler.prototype.enabled=true;
mxGraphHandler.prototype.highlightEnabled=true;
mxGraphHandler.prototype.cloneEnabled=true;
mxGraphHandler.prototype.moveEnabled=true;
mxGraphHandler.prototype.guidesEnabled=false;
mxGraphHandler.prototype.guide=null;
mxGraphHandler.prototype.currentDx=null;
mxGraphHandler.prototype.currentDy=null;
mxGraphHandler.prototype.updateCursor=true;
mxGraphHandler.prototype.selectEnabled=true;
mxGraphHandler.prototype.removeCellsFromParent=true;
mxGraphHandler.prototype.connectOnDrop=false;
mxGraphHandler.prototype.scrollOnMove=true;
mxGraphHandler.prototype.minimumSize=6;
mxGraphHandler.prototype.previewColor="black";
mxGraphHandler.prototype.htmlPreview=false;
mxGraphHandler.prototype.shape=null;
mxGraphHandler.prototype.scaleGrid=false;
mxGraphHandler.prototype.crisp=true;
mxGraphHandler.prototype.isEnabled=function(){return this.enabled;
};
mxGraphHandler.prototype.setEnabled=function(a){this.enabled=a;
};
mxGraphHandler.prototype.isCloneEnabled=function(){return this.cloneEnabled;
};
mxGraphHandler.prototype.setCloneEnabled=function(a){this.cloneEnabled=a;
};
mxGraphHandler.prototype.isMoveEnabled=function(){return this.moveEnabled;
};
mxGraphHandler.prototype.setMoveEnabled=function(a){this.moveEnabled=a;
};
mxGraphHandler.prototype.isSelectEnabled=function(){return this.selectEnabled;
};
mxGraphHandler.prototype.setSelectEnabled=function(a){this.selectEnabled=a;
};
mxGraphHandler.prototype.isRemoveCellsFromParent=function(){return this.removeCellsFromParent;
};
mxGraphHandler.prototype.setRemoveCellsFromParent=function(a){this.removeCellsFromParent=a;
};
mxGraphHandler.prototype.getInitialCellForEvent=function(a){return a.getCell();
};
mxGraphHandler.prototype.isDelayedSelection=function(a){return this.graph.isCellSelected(a);
};
mxGraphHandler.prototype.mouseDown=function(c,d){if(!d.isConsumed()&&this.isEnabled()&&this.graph.isEnabled()&&!this.graph.isForceMarqueeEvent(d.getEvent())&&d.getState()!=null){var a=this.getInitialCellForEvent(d);
this.cell=null;
this.delayedSelection=this.isDelayedSelection(a);
if(this.isSelectEnabled()&&!this.delayedSelection){this.graph.selectCellForEvent(a,d.getEvent());
}if(this.isMoveEnabled()){var b=this.graph.model;
var e=b.getGeometry(a);
if(this.graph.isCellMovable(a)&&((!b.isEdge(a)||this.graph.getSelectionCount()>1||(e.points!=null&&e.points.length>0)||b.getTerminal(a,true)==null||b.getTerminal(a,false)==null)||this.graph.allowDanglingEdges||(this.graph.isCloneEvent(d.getEvent())&&this.graph.isCellsCloneable()))){this.start(a,d.getX(),d.getY());
}this.cellWasClicked=true;
if((!mxClient.IS_SF&&!mxClient.IS_GC)||d.getSource().nodeName!="SELECT"){d.consume();
}else{if(mxClient.IS_SF&&d.getSource().nodeName=="SELECT"){this.cellWasClicked=false;
this.first=null;
}}}}};
mxGraphHandler.prototype.getGuideStates=function(){var c=this.graph.getDefaultParent();
var a=this.graph.getModel();
var b=mxUtils.bind(this,function(d){return this.graph.view.getState(d)!=null&&a.isVertex(d)&&a.getGeometry(d)!=null&&!a.getGeometry(d).relative;
});
return this.graph.view.getCellStates(a.filterDescendants(b,c));
};
mxGraphHandler.prototype.getCells=function(a){if(!this.delayedSelection&&this.graph.isCellMovable(a)){return[a];
}else{return this.graph.getMovableCells(this.graph.getSelectionCells());
}};
mxGraphHandler.prototype.getPreviewBounds=function(c){var d=this.graph.getView().getBounds(c);
if(d!=null){if(d.width<this.minimumSize){var b=this.minimumSize-d.width;
d.x-=b/2;
d.width=this.minimumSize;
}if(d.height<this.minimumSize){var a=this.minimumSize-d.height;
d.y-=a/2;
d.height=this.minimumSize;
}}return d;
};
mxGraphHandler.prototype.createPreviewShape=function(b){var a=new mxRectangleShape(b,null,this.previewColor);
a.isDashed=true;
a.crisp=this.crisp;
if(this.htmlPreview){a.dialect=mxConstants.DIALECT_STRICTHTML;
a.init(this.graph.container);
}else{a.dialect=(this.graph.dialect!=mxConstants.DIALECT_SVG)?mxConstants.DIALECT_VML:mxConstants.DIALECT_SVG;
a.init(this.graph.getView().getOverlayPane());
if(a.dialect==mxConstants.DIALECT_SVG){a.node.setAttribute("style","pointer-events:none;");
}else{a.node.style.background="";
}}return a;
};
mxGraphHandler.prototype.start=function(b,a,c){this.cell=b;
this.first=mxUtils.convertPoint(this.graph.container,a,c);
this.cells=this.getCells(this.cell);
this.bounds=this.getPreviewBounds(this.cells);
if(this.guidesEnabled){this.guide=new mxGuide(this.graph,this.getGuideStates());
}};
mxGraphHandler.prototype.useGuidesForEvent=function(a){return(this.guide!=null)?this.guide.isEnabledForEvent(a.getEvent()):true;
};
mxGraphHandler.prototype.snap=function(a){var b=(this.scaleGrid)?this.graph.view.scale:1;
a.x=this.graph.snap(a.x/b)*b;
a.y=this.graph.snap(a.y/b)*b;
return a;
};
mxGraphHandler.prototype.mouseMove=function(c,y){var b=this.graph;
if(!y.isConsumed()&&b.isMouseDown&&this.cell!=null&&this.first!=null&&this.bounds!=null){var p=mxUtils.convertPoint(b.container,y.getX(),y.getY());
var l=p.x-this.first.x;
var k=p.y-this.first.y;
var o=b.tolerance;
if(this.shape!=null||Math.abs(l)>o||Math.abs(k)>o){if(this.highlight==null){this.highlight=new mxCellHighlight(this.graph,mxConstants.DROP_TARGET_COLOR,3);
}if(this.shape==null){this.shape=this.createPreviewShape(this.bounds);
}var t=b.isGridEnabledEvent(y.getEvent());
var n=true;
if(this.guide!=null&&this.useGuidesForEvent(y)){var u=this.guide.move(this.bounds,new mxPoint(l,k),t);
n=false;
l=u.x;
k=u.y;
}else{if(t){var i=b.getView().translate;
var A=b.getView().scale;
var x=this.bounds.x-(b.snap(this.bounds.x/A-i.x)+i.x)*A;
var w=this.bounds.y-(b.snap(this.bounds.y/A-i.y)+i.y)*A;
var m=this.snap(new mxPoint(l,k));
l=m.x-x;
k=m.y-w;
}}if(this.guide!=null&&n){this.guide.hide();
}if(b.isConstrainedEvent(y.getEvent())){if(Math.abs(l)>Math.abs(k)){k=0;
}else{l=0;
}}this.currentDx=l;
this.currentDy=k;
this.updatePreviewShape();
var z=null;
var a=y.getCell();
if(b.isDropEnabled()&&this.highlightEnabled){z=b.getDropTarget(this.cells,y.getEvent(),a);
}var h=z;
var d=b.getModel();
while(h!=null&&h!=this.cells[0]){h=d.getParent(h);
}var s=b.isCloneEvent(y.getEvent())&&b.isCellsCloneable()&&this.isCloneEnabled();
var g=b.getView().getState(z);
var f=false;
if(g!=null&&h==null&&(d.getParent(this.cell)!=z||s)){if(this.target!=z){this.target=z;
this.setHighlightColor(mxConstants.DROP_TARGET_COLOR);
}f=true;
}else{this.target=null;
if(this.connectOnDrop&&a!=null&&this.cells.length==1&&b.getModel().isVertex(a)&&b.isCellConnectable(a)){g=b.getView().getState(a);
if(g!=null){var r=b.getEdgeValidationError(null,this.cell,a);
var q=(r==null)?mxConstants.VALID_COLOR:mxConstants.INVALID_CONNECT_TARGET_COLOR;
this.setHighlightColor(q);
f=true;
}}}if(g!=null&&f){this.highlight.highlight(g);
}else{this.highlight.hide();
}}y.consume();
mxEvent.consume(y.getEvent());
}else{if((this.isMoveEnabled()||this.isCloneEnabled())&&this.updateCursor&&!y.isConsumed()&&y.getState()!=null&&!b.isMouseDown){var e=b.getCursorForCell(y.getCell());
if(e==null&&b.isEnabled()&&b.isCellMovable(y.getCell())){if(b.getModel().isEdge(y.getCell())){e=mxConstants.CURSOR_MOVABLE_EDGE;
}else{e=mxConstants.CURSOR_MOVABLE_VERTEX;
}}y.getState().setCursor(e);
y.consume();
}}};
mxGraphHandler.prototype.updatePreviewShape=function(){if(this.shape!=null){this.shape.bounds=new mxRectangle(this.bounds.x+this.currentDx-this.graph.panDx,this.bounds.y+this.currentDy-this.graph.panDy,this.bounds.width,this.bounds.height);
this.shape.redraw();
}};
mxGraphHandler.prototype.setHighlightColor=function(a){if(this.highlight!=null){this.highlight.setHighlightColor(a);
}};
mxGraphHandler.prototype.mouseUp=function(b,e){if(!e.isConsumed()){var g=this.graph;
if(this.cell!=null&&this.first!=null&&this.shape!=null&&this.currentDx!=null&&this.currentDy!=null){var a=g.getView().scale;
var d=g.isCloneEvent(e.getEvent())&&g.isCellsCloneable()&&this.isCloneEnabled();
var i=this.currentDx/a;
var h=this.currentDy/a;
var f=e.getCell();
if(this.connectOnDrop&&this.target==null&&f!=null&&g.getModel().isVertex(f)&&g.isCellConnectable(f)&&g.isEdgeValid(null,this.cell,f)){g.connectionHandler.connect(this.cell,f,e.getEvent());
}else{var c=this.target;
if(g.isSplitEnabled()&&g.isSplitTarget(c,this.cells,e.getEvent())){g.splitEdge(c,this.cells,null,i,h);
}else{this.moveCells(this.cells,i,h,d,this.target,e.getEvent());
}}}else{if(this.isSelectEnabled()&&this.delayedSelection&&this.cell!=null){this.selectDelayed(e);
}}}if(this.cellWasClicked){e.consume();
}this.reset();
};
mxGraphHandler.prototype.selectDelayed=function(a){this.graph.selectCellForEvent(this.cell,a.getEvent());
};
mxGraphHandler.prototype.reset=function(){this.destroyShapes();
this.cellWasClicked=false;
this.delayedSelection=false;
this.currentDx=null;
this.currentDy=null;
this.guides=null;
this.first=null;
this.cell=null;
this.target=null;
};
mxGraphHandler.prototype.shouldRemoveCellsFromParent=function(d,c,a){if(this.graph.getModel().isVertex(d)){var b=this.graph.getView().getState(d);
var e=mxUtils.convertPoint(this.graph.container,mxEvent.getClientX(a),mxEvent.getClientY(a));
return b!=null&&!mxUtils.contains(b,e.x,e.y);
}return false;
};
mxGraphHandler.prototype.moveCells=function(d,c,b,f,e,a){if(f){d=this.graph.getCloneableCells(d);
}if(e==null&&this.isRemoveCellsFromParent()&&this.shouldRemoveCellsFromParent(this.graph.getModel().getParent(this.cell),d,a)){e=this.graph.getDefaultParent();
}d=this.graph.moveCells(d,c-this.graph.panDx/this.graph.view.scale,b-this.graph.panDy/this.graph.view.scale,f,e,a);
if(this.isSelectEnabled()&&this.scrollOnMove){this.graph.scrollCellToVisible(d[0]);
}if(f){this.graph.setSelectionCells(d);
}};
mxGraphHandler.prototype.destroyShapes=function(){if(this.shape!=null){this.shape.destroy();
this.shape=null;
}if(this.guide!=null){this.guide.destroy();
this.guide=null;
}if(this.highlight!=null){this.highlight.destroy();
this.highlight=null;
}};
mxGraphHandler.prototype.destroy=function(){this.graph.removeMouseListener(this);
this.graph.removeListener(this.panHandler);
this.destroyShapes();
};
function mxPanningHandler(b,a){if(b!=null){this.graph=b;
this.factoryMethod=a;
this.graph.addMouseListener(this);
this.init();
}}mxPanningHandler.prototype=new mxPopupMenu();
mxPanningHandler.prototype.constructor=mxPanningHandler;
mxPanningHandler.prototype.graph=null;
mxPanningHandler.prototype.usePopupTrigger=true;
mxPanningHandler.prototype.useLeftButtonForPanning=false;
mxPanningHandler.prototype.selectOnPopup=true;
mxPanningHandler.prototype.clearSelectionOnBackground=true;
mxPanningHandler.prototype.ignoreCell=false;
mxPanningHandler.prototype.previewEnabled=true;
mxPanningHandler.prototype.useGrid=false;
mxPanningHandler.prototype.panningEnabled=true;
mxPanningHandler.prototype.isPanningEnabled=function(){return this.panningEnabled;
};
mxPanningHandler.prototype.setPanningEnabled=function(a){this.panningEnabled=a;
};
mxPanningHandler.prototype.init=function(){mxPopupMenu.prototype.init.apply(this);
mxEvent.addListener(this.div,(mxClient.IS_TOUCH)?"touchmove":"mousemove",mxUtils.bind(this,function(a){this.graph.tooltipHandler.hide();
}));
};
mxPanningHandler.prototype.isPanningTrigger=function(b){var a=b.getEvent();
return(this.useLeftButtonForPanning&&(this.ignoreCell||b.getState()==null)&&mxEvent.isLeftMouseButton(a))||(mxEvent.isControlDown(a)&&mxEvent.isShiftDown(a))||(this.usePopupTrigger&&mxEvent.isPopupTrigger(a));
};
mxPanningHandler.prototype.mouseDown=function(a,b){if(!b.isConsumed()&&this.isEnabled()){this.hideMenu();
this.dx0=-this.graph.container.scrollLeft;
this.dy0=-this.graph.container.scrollTop;
this.popupTrigger=this.isPopupTrigger(b);
this.panningTrigger=this.isPanningEnabled()&&this.isPanningTrigger(b);
this.startX=b.getX();
this.startY=b.getY();
if(this.panningTrigger){this.consumePanningTrigger(b);
}}};
mxPanningHandler.prototype.consumePanningTrigger=function(a){a.consume();
};
mxPanningHandler.prototype.mouseMove=function(d,e){var b=e.getX()-this.startX;
var a=e.getY()-this.startY;
if(this.active){if(this.previewEnabled){if(this.useGrid){b=this.graph.snap(b);
a=this.graph.snap(a);
}this.graph.panGraph(b+this.dx0,a+this.dy0);
}this.fireEvent(new mxEventObject(mxEvent.PAN,"event",e));
e.consume();
}else{if(this.panningTrigger){var c=this.active;
this.active=Math.abs(b)>this.graph.tolerance||Math.abs(a)>this.graph.tolerance;
if(!c&&this.active){this.fireEvent(new mxEventObject(mxEvent.PAN_START,"event",e));
}}}};
mxPanningHandler.prototype.mouseUp=function(b,c){var i=Math.abs(c.getX()-this.startX);
var h=Math.abs(c.getY()-this.startY);
if(this.active){if(!this.graph.useScrollbarsForPanning||!mxUtils.hasScrollbars(this.graph.container)){i=c.getX()-this.startX;
h=c.getY()-this.startY;
if(this.useGrid){i=this.graph.snap(i);
h=this.graph.snap(h);
}var a=this.graph.getView().scale;
var g=this.graph.getView().translate;
this.graph.panGraph(0,0);
this.panGraph(g.x+i/a,g.y+h/a);
}this.active=false;
this.fireEvent(new mxEventObject(mxEvent.PAN_END,"event",c));
c.consume();
}else{if(this.popupTrigger){if(i<this.graph.tolerance&&h<this.graph.tolerance){var f=this.getCellForPopupEvent(c);
if(this.graph.isEnabled()&&this.selectOnPopup&&f!=null&&!this.graph.isCellSelected(f)){this.graph.setSelectionCell(f);
}else{if(this.clearSelectionOnBackground&&f==null){this.graph.clearSelection();
}}this.graph.tooltipHandler.hide();
var e=mxUtils.getScrollOrigin();
var d=new mxPoint(c.getX()+e.x,c.getY()+e.y);
this.popup(d.x+1,d.y+1,f,c.getEvent());
c.consume();
}}}this.panningTrigger=false;
this.popupTrigger=false;
};
mxPanningHandler.prototype.getCellForPopupEvent=function(a){return a.getCell();
};
mxPanningHandler.prototype.panGraph=function(b,a){this.graph.getView().setTranslate(b,a);
};
mxPanningHandler.prototype.destroy=function(){this.graph.removeMouseListener(this);
mxPopupMenu.prototype.destroy.apply(this);
};
function mxCellMarker(c,d,a,b){if(c!=null){this.graph=c;
this.validColor=(d!=null)?d:mxConstants.DEFAULT_VALID_COLOR;
this.invalidColor=(d!=null)?a:mxConstants.DEFAULT_INVALID_COLOR;
this.hotspot=(b!=null)?b:mxConstants.DEFAULT_HOTSPOT;
this.highlight=new mxCellHighlight(c);
}}mxCellMarker.prototype=new mxEventSource();
mxCellMarker.prototype.constructor=mxCellMarker;
mxCellMarker.prototype.graph=null;
mxCellMarker.prototype.enabled=true;
mxCellMarker.prototype.hotspot=mxConstants.DEFAULT_HOTSPOT;
mxCellMarker.prototype.hotspotEnabled=false;
mxCellMarker.prototype.validColor=null;
mxCellMarker.prototype.invalidColor=null;
mxCellMarker.prototype.currentColor=null;
mxCellMarker.prototype.validState=null;
mxCellMarker.prototype.markedState=null;
mxCellMarker.prototype.setEnabled=function(a){this.enabled=a;
};
mxCellMarker.prototype.isEnabled=function(){return this.enabled;
};
mxCellMarker.prototype.setHotspot=function(a){this.hotspot=a;
};
mxCellMarker.prototype.getHotspot=function(){return this.hotspot;
};
mxCellMarker.prototype.setHotspotEnabled=function(a){this.hotspotEnabled=a;
};
mxCellMarker.prototype.isHotspotEnabled=function(){return this.hotspotEnabled;
};
mxCellMarker.prototype.hasValidState=function(){return this.validState!=null;
};
mxCellMarker.prototype.getValidState=function(){return this.validState;
};
mxCellMarker.prototype.getMarkedState=function(){return this.markedState;
};
mxCellMarker.prototype.reset=function(){this.validState=null;
if(this.markedState!=null){this.markedState=null;
this.unmark();
}};
mxCellMarker.prototype.process=function(b){var c=null;
if(this.isEnabled()){c=this.getState(b);
var d=(c!=null)?this.isValidState(c):false;
var a=this.getMarkerColor(b.getEvent(),c,d);
if(d){this.validState=c;
}else{this.validState=null;
}if(c!=this.markedState||a!=this.currentColor){this.currentColor=a;
if(c!=null&&this.currentColor!=null){this.markedState=c;
this.mark();
}else{if(this.markedState!=null){this.markedState=null;
this.unmark();
}}}}return c;
};
mxCellMarker.prototype.markCell=function(a,b){var c=this.graph.getView().getState(a);
if(c!=null){this.currentColor=(b!=null)?b:this.validColor;
this.markedState=c;
this.mark();
}};
mxCellMarker.prototype.mark=function(){this.highlight.setHighlightColor(this.currentColor);
this.highlight.highlight(this.markedState);
this.fireEvent(new mxEventObject(mxEvent.MARK,"state",this.markedState));
};
mxCellMarker.prototype.unmark=function(){this.mark();
};
mxCellMarker.prototype.isValidState=function(a){return true;
};
mxCellMarker.prototype.getMarkerColor=function(a,b,c){return(c)?this.validColor:this.invalidColor;
};
mxCellMarker.prototype.getState=function(b){var a=this.graph.getView();
cell=this.getCell(b);
var c=this.getStateToMark(a.getState(cell));
return(c!=null&&this.intersects(c,b))?c:null;
};
mxCellMarker.prototype.getCell=function(a){return a.getCell();
};
mxCellMarker.prototype.getStateToMark=function(a){return a;
};
mxCellMarker.prototype.intersects=function(b,a){if(this.hotspotEnabled){return mxUtils.intersectsHotspot(b,a.getGraphX(),a.getGraphY(),this.hotspot,mxConstants.MIN_HOTSPOT_SIZE,mxConstants.MAX_HOTSPOT_SIZE);
}return true;
};
mxCellMarker.prototype.destroy=function(){this.graph.getView().removeListener(this.resetHandler);
this.graph.getModel().removeListener(this.resetHandler);
this.highlight.destroy();
};
function mxSelectionCellsHandler(a){this.graph=a;
this.handlers=new mxDictionary();
this.graph.addMouseListener(this);
this.refreshHandler=mxUtils.bind(this,function(c,b){if(this.isEnabled()){this.refresh();
}});
this.graph.getSelectionModel().addListener(mxEvent.CHANGE,this.refreshHandler);
this.graph.getModel().addListener(mxEvent.CHANGE,this.refreshHandler);
this.graph.getView().addListener(mxEvent.SCALE,this.refreshHandler);
this.graph.getView().addListener(mxEvent.TRANSLATE,this.refreshHandler);
this.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE,this.refreshHandler);
this.graph.getView().addListener(mxEvent.DOWN,this.refreshHandler);
this.graph.getView().addListener(mxEvent.UP,this.refreshHandler);
}mxSelectionCellsHandler.prototype=new mxEventSource();
mxSelectionCellsHandler.prototype.constructor=mxSelectionCellsHandler;
mxSelectionCellsHandler.prototype.graph=null;
mxSelectionCellsHandler.prototype.enabled=true;
mxSelectionCellsHandler.prototype.refreshHandler=null;
mxSelectionCellsHandler.prototype.maxHandlers=100;
mxSelectionCellsHandler.prototype.handlers=null;
mxSelectionCellsHandler.prototype.isEnabled=function(){return this.enabled;
};
mxSelectionCellsHandler.prototype.setEnabled=function(a){this.enabled=a;
};
mxSelectionCellsHandler.prototype.getHandler=function(a){return this.handlers.get(a);
};
mxSelectionCellsHandler.prototype.reset=function(){this.handlers.visit(function(a,b){b.reset.apply(b);
});
};
mxSelectionCellsHandler.prototype.refresh=function(){var e=this.handlers;
this.handlers=new mxDictionary();
var b=this.graph.getSelectionCells();
for(var a=0;
a<b.length;
a++){var d=this.graph.view.getState(b[a]);
if(d!=null){var c=e.remove(b[a]);
if(c!=null){if(c.state!=d){c.destroy();
c=null;
}else{c.redraw();
}}if(c==null){c=this.graph.createHandler(d);
this.fireEvent(new mxEventObject(mxEvent.ADD,"state",d));
}if(c!=null){this.handlers.put(b[a],c);
}}}e.visit(mxUtils.bind(this,function(f,g){this.fireEvent(new mxEventObject(mxEvent.REMOVE,"state",g.state));
g.destroy();
}));
};
mxSelectionCellsHandler.prototype.mouseDown=function(b,c){if(this.graph.isEnabled()&&this.isEnabled()){var a=[b,c];
this.handlers.visit(function(d,e){e.mouseDown.apply(e,a);
});
}};
mxSelectionCellsHandler.prototype.mouseMove=function(b,c){if(this.graph.isEnabled()&&this.isEnabled()){var a=[b,c];
this.handlers.visit(function(d,e){e.mouseMove.apply(e,a);
});
}};
mxSelectionCellsHandler.prototype.mouseUp=function(b,c){if(this.graph.isEnabled()&&this.isEnabled()){var a=[b,c];
this.handlers.visit(function(d,e){e.mouseUp.apply(e,a);
});
}};
mxSelectionCellsHandler.prototype.destroy=function(){this.graph.removeMouseListener(this);
if(this.refreshHandler!=null){this.graph.getSelectionModel().removeListener(this.refreshHandler);
this.graph.getModel().removeListener(this.refreshHandler);
this.graph.getView().removeListener(this.refreshHandler);
this.refreshHandler=null;
}};
function mxConnectionHandler(b,a){if(b!=null){this.graph=b;
this.factoryMethod=a;
this.init();
}}mxConnectionHandler.prototype=new mxEventSource();
mxConnectionHandler.prototype.constructor=mxConnectionHandler;
mxConnectionHandler.prototype.graph=null;
mxConnectionHandler.prototype.factoryMethod=true;
mxConnectionHandler.prototype.moveIconFront=false;
mxConnectionHandler.prototype.moveIconBack=false;
mxConnectionHandler.prototype.connectImage=null;
mxConnectionHandler.prototype.targetConnectImage=false;
mxConnectionHandler.prototype.enabled=true;
mxConnectionHandler.prototype.select=true;
mxConnectionHandler.prototype.createTarget=false;
mxConnectionHandler.prototype.marker=null;
mxConnectionHandler.prototype.constraintHandler=null;
mxConnectionHandler.prototype.error=null;
mxConnectionHandler.prototype.waypointsEnabled=false;
mxConnectionHandler.prototype.tapAndHoldEnabled=true;
mxConnectionHandler.prototype.tapAndHoldDelay=500;
mxConnectionHandler.prototype.tapAndHoldInProgress=false;
mxConnectionHandler.prototype.tapAndHoldValid=false;
mxConnectionHandler.prototype.tapAndHoldTolerance=4;
mxConnectionHandler.prototype.initialTouchX=0;
mxConnectionHandler.prototype.initialTouchY=0;
mxConnectionHandler.prototype.ignoreMouseDown=false;
mxConnectionHandler.prototype.first=null;
mxConnectionHandler.prototype.connectIconOffset=new mxPoint(0,mxConstants.TOOLTIP_VERTICAL_OFFSET);
mxConnectionHandler.prototype.edgeState=null;
mxConnectionHandler.prototype.changeHandler=null;
mxConnectionHandler.prototype.drillHandler=null;
mxConnectionHandler.prototype.mouseDownCounter=0;
mxConnectionHandler.prototype.movePreviewAway=mxClient.IS_VML;
mxConnectionHandler.prototype.isEnabled=function(){return this.enabled;
};
mxConnectionHandler.prototype.setEnabled=function(a){this.enabled=a;
};
mxConnectionHandler.prototype.isCreateTarget=function(){return this.createTarget;
};
mxConnectionHandler.prototype.setCreateTarget=function(a){this.createTarget=a;
};
mxConnectionHandler.prototype.createShape=function(){var b=new mxPolyline([],mxConstants.INVALID_COLOR);
b.isDashed=true;
b.dialect=(this.graph.dialect!=mxConstants.DIALECT_SVG)?mxConstants.DIALECT_VML:mxConstants.DIALECT_SVG;
b.init(this.graph.getView().getOverlayPane());
if(this.graph.dialect==mxConstants.DIALECT_SVG){b.pipe.setAttribute("style","pointer-events:none;");
b.innerNode.setAttribute("style","pointer-events:none;");
}else{var a=mxUtils.bind(this,function(c){var d=mxUtils.convertPoint(this.graph.container,mxEvent.getClientX(c),mxEvent.getClientY(c));
return this.graph.view.getState(this.graph.getCellAt(d.x,d.y));
});
mxEvent.redirectMouseEvents(b.node,this.graph,a);
}return b;
};
mxConnectionHandler.prototype.init=function(){this.graph.addMouseListener(this);
this.marker=this.createMarker();
this.constraintHandler=new mxConstraintHandler(this.graph);
this.changeHandler=mxUtils.bind(this,function(a){if(this.iconState!=null){this.iconState=this.graph.getView().getState(this.iconState.cell);
}if(this.iconState!=null){this.redrawIcons(this.icons,this.iconState);
this.constraintHandler.reset();
}else{this.reset();
}});
this.graph.getModel().addListener(mxEvent.CHANGE,this.changeHandler);
this.graph.getView().addListener(mxEvent.SCALE,this.changeHandler);
this.graph.getView().addListener(mxEvent.TRANSLATE,this.changeHandler);
this.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE,this.changeHandler);
this.drillHandler=mxUtils.bind(this,function(a){this.destroyIcons(this.icons);
});
this.graph.addListener(mxEvent.START_EDITING,this.drillHandler);
this.graph.getView().addListener(mxEvent.DOWN,this.drillHandler);
this.graph.getView().addListener(mxEvent.UP,this.drillHandler);
};
mxConnectionHandler.prototype.isConnectableCell=function(a){return true;
};
mxConnectionHandler.prototype.createMarker=function(){var a=new mxCellMarker(this.graph);
a.hotspotEnabled=true;
a.getCell=mxUtils.bind(this,function(c,b){var b=mxCellMarker.prototype.getCell.apply(a,arguments);
this.error=null;
if(!this.isConnectableCell(b)){return null;
}if(b!=null){if(this.isConnecting()){if(this.previous!=null){this.error=this.validateConnection(this.previous.cell,b);
if(this.error!=null&&this.error.length==0){b=null;
if(this.isCreateTarget()){this.error=null;
}}}}else{if(!this.isValidSource(b)){b=null;
}}}else{if(this.isConnecting()&&!this.isCreateTarget()&&!this.graph.allowDanglingEdges){this.error="";
}}return b;
});
a.isValidState=mxUtils.bind(this,function(b){if(this.isConnecting()){return this.error==null;
}else{return mxCellMarker.prototype.isValidState.apply(a,arguments);
}});
a.getMarkerColor=mxUtils.bind(this,function(b,c,d){return(this.connectImage==null||this.isConnecting())?mxCellMarker.prototype.getMarkerColor.apply(a,arguments):null;
});
a.intersects=mxUtils.bind(this,function(c,b){if(this.connectImage!=null||this.isConnecting()){return true;
}return mxCellMarker.prototype.intersects.apply(a,arguments);
});
return a;
};
mxConnectionHandler.prototype.start=function(c,b,d,a){this.previous=c;
this.first=new mxPoint(b,d);
this.edgeState=(a!=null)?a:this.createEdgeState(null);
this.marker.currentColor=this.marker.validColor;
this.marker.markedState=c;
this.marker.mark();
this.fireEvent(new mxEventObject(mxEvent.START,"state",this.previous));
};
mxConnectionHandler.prototype.isConnecting=function(){return this.first!=null&&this.shape!=null;
};
mxConnectionHandler.prototype.isValidSource=function(a){return this.graph.isValidSource(a);
};
mxConnectionHandler.prototype.isValidTarget=function(a){return true;
};
mxConnectionHandler.prototype.validateConnection=function(a,b){if(!this.isValidTarget(b)){return"";
}return this.graph.getEdgeValidationError(null,a,b);
};
mxConnectionHandler.prototype.getConnectImage=function(a){return this.connectImage;
};
mxConnectionHandler.prototype.isMoveIconToFrontForState=function(a){if(a.text!=null&&a.text.node.parentNode==this.graph.container){return true;
}return this.moveIconFront;
};
mxConnectionHandler.prototype.createIcons=function(f){var g=this.getConnectImage(f);
if(g!=null&&f!=null){this.iconState=f;
var c=[];
var e=new mxRectangle(0,0,g.width,g.height);
var d=new mxImageShape(e,g.src,null,null,0);
d.preserveImageAspect=false;
if(this.isMoveIconToFrontForState(f)){d.dialect=mxConstants.DIALECT_STRICTHTML;
d.init(this.graph.container);
}else{d.dialect=(this.graph.dialect==mxConstants.DIALECT_SVG)?mxConstants.DIALECT_SVG:mxConstants.DIALECT_VML;
d.init(this.graph.getView().getOverlayPane());
if(this.moveIconBack&&d.node.previousSibling!=null){d.node.parentNode.insertBefore(d.node,d.node.parentNode.firstChild);
}}d.node.style.cursor=mxConstants.CURSOR_CONNECT;
var b=mxUtils.bind(this,function(){return(this.currentState!=null)?this.currentState:f;
});
var a=mxUtils.bind(this,function(h){if(!mxEvent.isConsumed(h)){this.icon=d;
this.graph.fireMouseEvent(mxEvent.MOUSE_DOWN,new mxMouseEvent(h,b()));
}});
mxEvent.redirectMouseEvents(d.node,this.graph,b,a);
c.push(d);
this.redrawIcons(c,this.iconState);
return c;
}return null;
};
mxConnectionHandler.prototype.redrawIcons=function(a,b){if(a!=null&&a[0]!=null&&b!=null){var c=this.getIconPosition(a[0],b);
a[0].bounds.x=c.x;
a[0].bounds.y=c.y;
a[0].redraw();
}};
mxConnectionHandler.prototype.getIconPosition=function(c,d){var e=this.graph.getView().scale;
var a=d.getCenterX();
var f=d.getCenterY();
if(this.graph.isSwimlane(d.cell)){var b=this.graph.getStartSize(d.cell);
a=(b.width!=0)?d.x+b.width*e/2:a;
f=(b.height!=0)?d.y+b.height*e/2:f;
}return new mxPoint(a-c.bounds.width/2,f-c.bounds.height/2);
};
mxConnectionHandler.prototype.destroyIcons=function(b){if(b!=null){this.iconState=null;
for(var a=0;
a<b.length;
a++){b[a].destroy();
}}};
mxConnectionHandler.prototype.isStartEvent=function(a){return !this.graph.isForceMarqueeEvent(a.getEvent())&&((this.constraintHandler.currentFocus!=null&&this.constraintHandler.currentConstraint!=null)||(this.previous!=null&&this.error==null&&(this.icons==null||(this.icons!=null&&this.icon!=null))));
};
mxConnectionHandler.prototype.mouseDown=function(a,c){this.mouseDownCounter++;
if(this.isEnabled()&&this.graph.isEnabled()&&!c.isConsumed()&&!this.isConnecting()&&this.isStartEvent(c)){if(this.constraintHandler.currentConstraint!=null&&this.constraintHandler.currentFocus!=null&&this.constraintHandler.currentPoint!=null){this.sourceConstraint=this.constraintHandler.currentConstraint;
this.previous=this.constraintHandler.currentFocus;
this.first=this.constraintHandler.currentPoint.clone();
}else{this.first=new mxPoint(c.getGraphX(),c.getGraphY());
}this.edgeState=this.createEdgeState(c);
this.mouseDownCounter=1;
if(this.waypointsEnabled&&this.shape==null){this.waypoints=null;
this.shape=this.createShape();
}if(this.previous==null&&this.edgeState!=null){var e=this.graph.getPointForEvent(c.getEvent());
this.edgeState.cell.geometry.setTerminalPoint(e,true);
}this.fireEvent(new mxEventObject(mxEvent.START,"state",this.previous));
c.consume();
}else{if(mxClient.IS_TOUCH&&this.tapAndHoldEnabled&&!this.tapAndHoldInProgress&&this.isEnabled()&&this.graph.isEnabled()&&!this.isConnecting()){this.tapAndHoldInProgress=true;
this.initialTouchX=c.getX();
this.initialTouchY=c.getY();
var d=this.graph.view.getState(this.marker.getCell(c));
var b=function(){if(this.tapAndHoldValid){this.tapAndHold(c,d);
}this.tapAndHoldInProgress=false;
this.tapAndHoldValid=false;
};
if(this.tapAndHoldThread){window.clearTimeout(this.tapAndHoldThread);
}this.tapAndHoldThread=window.setTimeout(mxUtils.bind(this,b),this.tapAndHoldDelay);
this.tapAndHoldValid=true;
}}this.selectedIcon=this.icon;
this.icon=null;
};
mxConnectionHandler.prototype.tapAndHold=function(a,b){if(b!=null){this.marker.currentColor=this.marker.validColor;
this.marker.markedState=b;
this.marker.mark();
this.first=new mxPoint(a.getGraphX(),a.getGraphY());
this.edgeState=this.createEdgeState(a);
this.previous=b;
this.fireEvent(new mxEventObject(mxEvent.START,"state",this.previous));
}};
mxConnectionHandler.prototype.isImmediateConnectSource=function(a){return !this.graph.isCellMovable(a.cell);
};
mxConnectionHandler.prototype.createEdgeState=function(a){return null;
};
mxConnectionHandler.prototype.updateCurrentState=function(a){var b=this.marker.process(a);
this.constraintHandler.update(a,this.first==null);
this.currentState=b;
};
mxConnectionHandler.prototype.convertWaypoint=function(a){var c=this.graph.getView().getScale();
var b=this.graph.getView().getTranslate();
a.x=a.x/c-b.x;
a.y=a.y/c-b.y;
};
mxConnectionHandler.prototype.mouseMove=function(b,y){if(this.tapAndHoldValid){this.tapAndHoldValid=Math.abs(this.initialTouchX-y.getX())<this.tapAndHoldTolerance&&Math.abs(this.initialTouchY-y.getY())<this.tapAndHoldTolerance;
}if(!y.isConsumed()&&(this.ignoreMouseDown||this.first!=null||!this.graph.isMouseDown)){if(!this.isEnabled()&&this.currentState!=null){this.destroyIcons(this.icons);
this.currentState=null;
}if(this.first!=null||(this.isEnabled()&&this.graph.isEnabled())){this.updateCurrentState(y);
}if(this.first!=null){var n=this.graph.getView();
var A=n.scale;
var s=new mxPoint(this.graph.snap(y.getGraphX()/A)*A,this.graph.snap(y.getGraphY()/A)*A);
var a=null;
var r=s;
if(this.constraintHandler.currentConstraint!=null&&this.constraintHandler.currentFocus!=null&&this.constraintHandler.currentPoint!=null){a=this.constraintHandler.currentConstraint;
r=this.constraintHandler.currentPoint.clone();
}var f=this.first;
if(this.selectedIcon!=null){var l=this.selectedIcon.bounds.width;
var v=this.selectedIcon.bounds.height;
if(this.currentState!=null&&this.targetConnectImage){var c=this.getIconPosition(this.selectedIcon,this.currentState);
this.selectedIcon.bounds.x=c.x;
this.selectedIcon.bounds.y=c.y;
}else{var d=new mxRectangle(y.getGraphX()+this.connectIconOffset.x,y.getGraphY()+this.connectIconOffset.y,l,v);
this.selectedIcon.bounds=d;
}this.selectedIcon.redraw();
}if(this.edgeState!=null){this.edgeState.absolutePoints=[null,(this.currentState!=null)?null:r];
this.graph.view.updateFixedTerminalPoint(this.edgeState,this.previous,true,this.sourceConstraint);
if(this.currentState!=null){if(a==null){a=this.graph.getConnectionConstraint(this.edgeState,this.previous,false);
}this.edgeState.setAbsoluteTerminalPoint(null,false);
this.graph.view.updateFixedTerminalPoint(this.edgeState,this.currentState,false,a);
}var e=null;
if(this.waypoints!=null){e=[];
for(var t=0;
t<this.waypoints.length;
t++){var q=this.waypoints[t].clone();
this.convertWaypoint(q);
e[t]=q;
}}this.graph.view.updatePoints(this.edgeState,e,this.previous,this.currentState);
this.graph.view.updateFloatingTerminalPoints(this.edgeState,this.previous,this.currentState);
r=this.edgeState.absolutePoints[this.edgeState.absolutePoints.length-1];
f=this.edgeState.absolutePoints[0];
}else{if(this.currentState!=null){if(this.constraintHandler.currentConstraint==null){var x=this.getTargetPerimeterPoint(this.currentState,y);
if(x!=null){r=x;
}}}if(this.sourceConstraint==null&&this.previous!=null){var p=(this.waypoints!=null&&this.waypoints.length>0)?this.waypoints[0]:r;
var x=this.getSourcePerimeterPoint(this.previous,p,y);
if(x!=null){f=x;
}}}if(this.currentState==null&&this.movePreviewAway){var x=f;
if(this.edgeState!=null&&this.edgeState.absolutePoints.length>2){var o=this.edgeState.absolutePoints[this.edgeState.absolutePoints.length-2];
if(o!=null){x=o;
}}var m=r.x-x.x;
var k=r.y-x.y;
var u=Math.sqrt(m*m+k*k);
if(u==0){return;
}r.x-=m*4/u;
r.y-=k*4/u;
}if(this.shape==null){var m=Math.abs(s.x-this.first.x);
var k=Math.abs(s.y-this.first.y);
if(m>this.graph.tolerance||k>this.graph.tolerance){this.shape=this.createShape();
this.updateCurrentState(y);
}}if(this.shape!=null){if(this.edgeState!=null){this.shape.points=this.edgeState.absolutePoints;
}else{var B=[f];
if(this.waypoints!=null){B=B.concat(this.waypoints);
}B.push(r);
this.shape.points=B;
}this.drawPreview();
}mxEvent.consume(y.getEvent());
y.consume();
}else{if(!this.isEnabled()||!this.graph.isEnabled()){this.constraintHandler.reset();
}else{if(this.previous!=this.currentState&&this.edgeState==null){this.destroyIcons(this.icons);
this.icons=null;
if(this.currentState!=null&&this.error==null){this.icons=this.createIcons(this.currentState);
if(this.icons==null){this.currentState.setCursor(mxConstants.CURSOR_CONNECT);
y.consume();
}}this.previous=this.currentState;
}else{if(this.previous==this.currentState&&this.currentState!=null&&this.icons==null&&!this.graph.isMouseDown){y.consume();
}}}}if(this.constraintHandler.currentConstraint!=null){this.marker.reset();
}if(!this.graph.isMouseDown&&this.currentState!=null&&this.icons!=null){var g=false;
var z=y.getSource();
for(var t=0;
t<this.icons.length&&!g;
t++){g=z==this.icons[t].node||z.parentNode==this.icons[t].node;
}if(!g){this.updateIcons(this.currentState,this.icons,y);
}}}else{this.constraintHandler.reset();
}};
mxConnectionHandler.prototype.getTargetPerimeterPoint=function(g,f){var a=null;
var b=g.view;
var e=b.getPerimeterFunction(g);
if(e!=null){var d=(this.waypoints!=null&&this.waypoints.length>0)?this.waypoints[this.waypoints.length-1]:new mxPoint(this.previous.getCenterX(),this.previous.getCenterY());
var c=e(b.getPerimeterBounds(g),this.edgeState,d,false);
if(c!=null){a=c;
}}else{a=new mxPoint(g.getCenterX(),g.getCenterY());
}return a;
};
mxConnectionHandler.prototype.getSourcePerimeterPoint=function(a,f,i){var l=null;
var k=a.view;
var d=k.getPerimeterFunction(a);
var h=new mxPoint(a.getCenterX(),a.getCenterY());
if(d!=null){var b=mxUtils.getValue(a.style,mxConstants.STYLE_ROTATION,0);
var g=-b*(Math.PI/180);
if(b!=0){f=mxUtils.getRotatedPoint(new mxPoint(f.x,f.y),Math.cos(g),Math.sin(g),h);
}var e=d(k.getPerimeterBounds(a),a,f,false);
if(e!=null){if(b!=0){e=mxUtils.getRotatedPoint(new mxPoint(e.x,e.y),Math.cos(-g),Math.sin(-g),h);
}l=e;
}}else{l=h;
}return l;
};
mxConnectionHandler.prototype.updateIcons=function(c,a,b){};
mxConnectionHandler.prototype.isStopEvent=function(a){return a.getState()!=null;
};
mxConnectionHandler.prototype.addWaypointForEvent=function(e){var b=mxUtils.convertPoint(this.graph.container,e.getX(),e.getY());
var d=Math.abs(b.x-this.first.x);
var c=Math.abs(b.y-this.first.y);
var a=this.waypoints!=null||(this.mouseDownCounter>1&&(d>this.graph.tolerance||c>this.graph.tolerance));
if(a){if(this.waypoints==null){this.waypoints=[];
}var f=this.graph.view.scale;
var b=new mxPoint(this.graph.snap(e.getGraphX()/f)*f,this.graph.snap(e.getGraphY()/f)*f);
this.waypoints.push(b);
}};
mxConnectionHandler.prototype.mouseUp=function(a,b){if(!b.isConsumed()&&this.isConnecting()){if(this.waypointsEnabled&&!this.isStopEvent(b)){this.addWaypointForEvent(b);
b.consume();
return;
}if(this.error==null){var c=(this.previous!=null)?this.previous.cell:null;
var d=null;
if(this.constraintHandler.currentConstraint!=null&&this.constraintHandler.currentFocus!=null){d=this.constraintHandler.currentFocus.cell;
}if(d==null&&this.marker.hasValidState()){d=this.marker.validState.cell;
}this.connect(c,d,b.getEvent(),b.getCell());
}else{if(this.previous!=null&&this.marker.validState!=null&&this.previous.cell==this.marker.validState.cell){this.graph.selectCellForEvent(this.marker.source,evt);
}if(this.error.length>0){this.graph.validationAlert(this.error);
}}this.destroyIcons(this.icons);
b.consume();
}if(this.first!=null){this.reset();
}this.tapAndHoldInProgress=false;
this.tapAndHoldValid=false;
};
mxConnectionHandler.prototype.reset=function(){if(this.shape!=null){this.shape.destroy();
this.shape=null;
}this.destroyIcons(this.icons);
this.icons=null;
this.marker.reset();
this.constraintHandler.reset();
this.selectedIcon=null;
this.edgeState=null;
this.previous=null;
this.error=null;
this.sourceConstraint=null;
this.mouseDownCounter=0;
this.first=null;
this.icon=null;
this.fireEvent(new mxEventObject(mxEvent.RESET));
};
mxConnectionHandler.prototype.drawPreview=function(){var b=this.error==null;
var a=this.getEdgeColor(b);
if(this.shape.dialect==mxConstants.DIALECT_SVG){this.shape.innerNode.setAttribute("stroke",a);
}else{this.shape.node.strokecolor=a;
}this.shape.strokewidth=this.getEdgeWidth(b);
this.shape.redraw();
mxUtils.repaintGraph(this.graph,this.shape.points[1]);
};
mxConnectionHandler.prototype.getEdgeColor=function(a){return(a)?mxConstants.VALID_COLOR:mxConstants.INVALID_COLOR;
};
mxConnectionHandler.prototype.getEdgeWidth=function(a){return(a)?3:1;
};
mxConnectionHandler.prototype.connect=function(b,n,r,a){if(n!=null||this.isCreateTarget()||this.graph.allowDanglingEdges){var l=this.graph.getModel();
var d=null;
l.beginUpdate();
try{if(b!=null&&n==null&&this.isCreateTarget()){n=this.createTargetVertex(r,b);
if(n!=null){a=this.graph.getDropTarget([n],r,a);
if(a==null||!this.graph.getModel().isEdge(a)){var h=this.graph.getView().getState(a);
if(h!=null){var k=l.getGeometry(n);
k.x-=h.origin.x;
k.y-=h.origin.y;
}}else{a=this.graph.getDefaultParent();
}this.graph.addCell(n,a);
}}var q=this.graph.getDefaultParent();
if(b!=null&&n!=null&&l.getParent(b)==l.getParent(n)&&l.getParent(l.getParent(b))!=l.getRoot()){q=l.getParent(b);
if((b.geometry!=null&&b.geometry.relative)&&(n.geometry!=null&&n.geometry.relative)){q=l.getParent(q);
}}var p=null;
var c=null;
if(this.edgeState!=null){p=this.edgeState.cell.value;
c=this.edgeState.cell.style;
}d=this.insertEdge(q,null,p,b,n,c);
if(d!=null){this.graph.setConnectionConstraint(d,b,true,this.sourceConstraint);
this.graph.setConnectionConstraint(d,n,false,this.constraintHandler.currentConstraint);
if(this.edgeState!=null){l.setGeometry(d,this.edgeState.cell.geometry);
}var g=l.getGeometry(d);
if(g==null){g=new mxGeometry();
g.relative=true;
l.setGeometry(d,g);
}if(this.waypoints!=null&&this.waypoints.length>0){var u=this.graph.view.scale;
var o=this.graph.view.translate;
g.points=[];
for(var f=0;
f<this.waypoints.length;
f++){var t=this.waypoints[f];
g.points.push(new mxPoint(t.x/u-o.x,t.y/u-o.y));
}}if(n==null){var t=this.graph.getPointForEvent(r,false);
t.x-=this.graph.panDx/this.graph.view.scale;
t.y-=this.graph.panDy/this.graph.view.scale;
g.setTerminalPoint(t,false);
}this.fireEvent(new mxEventObject(mxEvent.CONNECT,"cell",d,"event",r,"target",a));
}}catch(m){mxLog.show();
mxLog.debug(m.message);
}finally{l.endUpdate();
}if(this.select){this.selectCells(d,n);
}}};
mxConnectionHandler.prototype.selectCells=function(a,b){this.graph.setSelectionCell(a);
};
mxConnectionHandler.prototype.insertEdge=function(b,g,e,d,f,a){if(this.factoryMethod==null){return this.graph.insertEdge(b,g,e,d,f,a);
}else{var c=this.createEdge(e,d,f,a);
c=this.graph.addEdge(c,b,d,f);
return c;
}};
mxConnectionHandler.prototype.createTargetVertex=function(c,e){var f=this.graph.getCellGeometry(e);
while(f!=null&&f.relative){e=this.graph.getModel().getParent(e);
f=this.graph.getCellGeometry(e);
}var g=this.graph.cloneCells([e])[0];
var f=this.graph.getModel().getGeometry(g);
if(f!=null){var a=this.graph.getPointForEvent(c);
f.x=this.graph.snap(a.x-f.width/2)-this.graph.panDx/this.graph.view.scale;
f.y=this.graph.snap(a.y-f.height/2)-this.graph.panDy/this.graph.view.scale;
if(this.first!=null){var d=this.graph.view.getState(e);
if(d!=null){var b=this.getAlignmentTolerance();
if(Math.abs(this.graph.snap(this.first.x)-this.graph.snap(a.x))<=b){f.x=d.x;
}else{if(Math.abs(this.graph.snap(this.first.y)-this.graph.snap(a.y))<=b){f.y=d.y;
}}}}}return g;
};
mxConnectionHandler.prototype.getAlignmentTolerance=function(){return(this.graph.isGridEnabled())?this.graph.gridSize:this.graph.tolerance;
};
mxConnectionHandler.prototype.createEdge=function(d,c,f,a){var b=null;
if(this.factoryMethod!=null){b=this.factoryMethod(c,f,a);
}if(b==null){b=new mxCell(d||"");
b.setEdge(true);
b.setStyle(a);
var e=new mxGeometry();
e.relative=true;
b.setGeometry(e);
}return b;
};
mxConnectionHandler.prototype.destroy=function(){this.graph.removeMouseListener(this);
if(this.shape!=null){this.shape.destroy();
this.shape=null;
}if(this.marker!=null){this.marker.destroy();
this.marker=null;
}if(this.constraintHandler!=null){this.constraintHandler.destroy();
this.constraintHandler=null;
}if(this.changeHandler!=null){this.graph.getModel().removeListener(this.changeHandler);
this.graph.getView().removeListener(this.changeHandler);
this.changeHandler=null;
}if(this.drillHandler!=null){this.graph.removeListener(this.drillHandler);
this.graph.getView().removeListener(this.drillHandler);
this.drillHandler=null;
}};
function mxConstraintHandler(a){this.graph=a;
}mxConstraintHandler.prototype.pointImage=new mxImage(mxClient.imageBasePath+"/point.gif",5,5);
mxConstraintHandler.prototype.graph=null;
mxConstraintHandler.prototype.enabled=true;
mxConstraintHandler.prototype.highlightColor=mxConstants.DEFAULT_VALID_COLOR;
mxConstraintHandler.prototype.isEnabled=function(){return this.enabled;
};
mxConstraintHandler.prototype.setEnabled=function(a){this.enabled=a;
};
mxConstraintHandler.prototype.reset=function(){if(this.focusIcons!=null){for(var a=0;
a<this.focusIcons.length;
a++){this.focusIcons[a].destroy();
}this.focusIcons=null;
}if(this.focusHighlight!=null){this.focusHighlight.destroy();
this.focusHighlight=null;
}this.currentConstraint=null;
this.currentFocusArea=null;
this.currentPoint=null;
this.currentFocus=null;
this.focusPoints=null;
};
mxConstraintHandler.prototype.getTolerance=function(){return this.graph.getTolerance();
};
mxConstraintHandler.prototype.getImageForConstraint=function(b,c,a){return this.pointImage;
};
mxConstraintHandler.prototype.isEventIgnored=function(a,b){return false;
};
mxConstraintHandler.prototype.update=function(n,c){if(this.isEnabled()&&!this.isEventIgnored(n)){var p=this.getTolerance();
var k=new mxRectangle(n.getGraphX()-p,n.getGraphY()-p,2*p,2*p);
var h=(n.getCell()!=null)?this.graph.isCellConnectable(n.getCell()):false;
if((this.currentFocusArea==null||(!mxUtils.intersects(this.currentFocusArea,k)||(n.getState()!=null&&this.currentFocus!=null&&h)))){this.currentFocusArea=null;
if(n.getState()!=this.currentFocus){this.currentFocus=null;
this.constraints=(n.getState()!=null&&h)?this.graph.getAllConnectionConstraints(n.getState(),c):null;
if(this.constraints!=null){this.currentFocus=n.getState();
this.currentFocusArea=new mxRectangle(n.getState().x,n.getState().y,n.getState().width,n.getState().height);
if(this.focusIcons!=null){for(var f=0;
f<this.focusIcons.length;
f++){this.focusIcons[f].destroy();
}this.focusIcons=null;
this.focusPoints=null;
}this.focusIcons=[];
this.focusPoints=[];
for(var f=0;
f<this.constraints.length;
f++){var m=this.graph.getConnectionPoint(n.getState(),this.constraints[f]);
var g=this.getImageForConstraint(n.getState(),this.constraints[f],m);
var b=g.src;
var a=new mxRectangle(m.x-g.width/2,m.y-g.height/2,g.width,g.height);
var o=new mxImageShape(a,b);
o.dialect=(this.graph.dialect==mxConstants.DIALECT_SVG)?mxConstants.DIALECT_SVG:mxConstants.DIALECT_VML;
o.init(this.graph.getView().getOverlayPane());
if(o.node.previousSibling!=null){o.node.parentNode.insertBefore(o.node,o.node.parentNode.firstChild);
}var l=mxUtils.bind(this,function(){return(this.currentFocus!=null)?this.currentFocus:n.getState();
});
o.redraw();
mxEvent.redirectMouseEvents(o.node,this.graph,l);
this.currentFocusArea.add(o.bounds);
this.focusIcons.push(o);
this.focusPoints.push(m);
}this.currentFocusArea.grow(p);
}else{if(this.focusIcons!=null){if(this.focusHighlight!=null){this.focusHighlight.destroy();
this.focusHighlight=null;
}for(var f=0;
f<this.focusIcons.length;
f++){this.focusIcons[f].destroy();
}this.focusIcons=null;
this.focusPoints=null;
}}}}this.currentConstraint=null;
this.currentPoint=null;
if(this.focusIcons!=null&&this.constraints!=null&&(n.getState()==null||this.currentFocus==n.getState())){for(var f=0;
f<this.focusIcons.length;
f++){if(mxUtils.intersects(this.focusIcons[f].bounds,k)){this.currentConstraint=this.constraints[f];
this.currentPoint=this.focusPoints[f];
var e=this.focusIcons[f].bounds.clone();
e.grow((mxClient.IS_IE)?3:2);
if(mxClient.IS_IE){e.width-=1;
e.height-=1;
}if(this.focusHighlight==null){var d=new mxRectangleShape(e,null,this.highlightColor,3);
d.dialect=(this.graph.dialect==mxConstants.DIALECT_SVG)?mxConstants.DIALECT_SVG:mxConstants.DIALECT_VML;
d.init(this.graph.getView().getOverlayPane());
this.focusHighlight=d;
var l=mxUtils.bind(this,function(){return(this.currentFocus!=null)?this.currentFocus:n.getState();
});
mxEvent.redirectMouseEvents(d.node,this.graph,l);
}else{this.focusHighlight.bounds=e;
this.focusHighlight.redraw();
}break;
}}}if(this.currentConstraint==null&&this.focusHighlight!=null){this.focusHighlight.destroy();
this.focusHighlight=null;
}}};
mxConstraintHandler.prototype.destroy=function(){this.reset();
};
function mxRubberband(a){if(a!=null){this.graph=a;
this.graph.addMouseListener(this);
this.panHandler=mxUtils.bind(this,function(){this.repaint();
});
this.graph.addListener(mxEvent.PAN,this.panHandler);
if(mxClient.IS_IE){mxEvent.addListener(window,"unload",mxUtils.bind(this,function(){this.destroy();
}));
}}}mxRubberband.prototype.defaultOpacity=20;
mxRubberband.prototype.enabled=true;
mxRubberband.prototype.div=null;
mxRubberband.prototype.sharedDiv=null;
mxRubberband.prototype.currentX=0;
mxRubberband.prototype.currentY=0;
mxRubberband.prototype.isEnabled=function(){return this.enabled;
};
mxRubberband.prototype.setEnabled=function(a){this.enabled=a;
};
mxRubberband.prototype.mouseDown=function(c,d){if(!d.isConsumed()&&this.isEnabled()&&this.graph.isEnabled()&&(this.graph.isForceMarqueeEvent(d.getEvent())||d.getState()==null)){var e=mxUtils.getOffset(this.graph.container);
var b=mxUtils.getScrollOrigin(this.graph.container);
b.x-=e.x;
b.y-=e.y;
this.start(d.getX()+b.x,d.getY()+b.y);
if(mxClient.IS_NS&&!mxClient.IS_SF&&!mxClient.IS_GC){var a=this.graph.container;
function f(g){var h=new mxMouseEvent(g);
var i=mxUtils.convertPoint(a,h.getX(),h.getY());
h.graphX=i.x;
h.graphY=i.y;
return h;
}this.dragHandler=mxUtils.bind(this,function(g){this.mouseMove(this.graph,f(g));
});
this.dropHandler=mxUtils.bind(this,function(g){this.mouseUp(this.graph,f(g));
});
mxEvent.addListener(document,"mousemove",this.dragHandler);
mxEvent.addListener(document,"mouseup",this.dropHandler);
}d.consume(false);
}};
mxRubberband.prototype.start=function(a,b){this.first=new mxPoint(a,b);
};
mxRubberband.prototype.mouseMove=function(b,c){if(!c.isConsumed()&&this.first!=null){var f=mxUtils.getScrollOrigin(this.graph.container);
var a=mxUtils.getOffset(this.graph.container);
f.x-=a.x;
f.y-=a.y;
var e=c.getX()+f.x;
var d=c.getY()+f.y;
var i=this.first.x-e;
var h=this.first.y-d;
var g=this.graph.tolerance;
if(this.div!=null||Math.abs(i)>g||Math.abs(h)>g){if(this.div==null){this.div=this.createShape();
}mxUtils.clearSelection();
this.update(e,d);
c.consume();
}}};
mxRubberband.prototype.createShape=function(){if(this.sharedDiv==null){this.sharedDiv=document.createElement("div");
this.sharedDiv.className="mxRubberband";
mxUtils.setOpacity(this.sharedDiv,this.defaultOpacity);
}this.graph.container.appendChild(this.sharedDiv);
return this.sharedDiv;
};
mxRubberband.prototype.mouseUp=function(a,c){var d=this.div!=null;
this.reset();
if(d){var b=new mxRectangle(this.x,this.y,this.width,this.height);
this.graph.selectRegion(b,c.getEvent());
c.consume();
}};
mxRubberband.prototype.reset=function(){if(this.div!=null){this.div.parentNode.removeChild(this.div);
}if(this.dragHandler!=null){mxEvent.removeListener(document,"mousemove",this.dragHandler);
this.dragHandler=null;
}if(this.dropHandler!=null){mxEvent.removeListener(document,"mouseup",this.dropHandler);
this.dropHandler=null;
}this.currentX=0;
this.currentY=0;
this.first=null;
this.div=null;
};
mxRubberband.prototype.update=function(a,b){this.currentX=a;
this.currentY=b;
this.repaint();
};
mxRubberband.prototype.repaint=function(){if(this.div!=null){var a=this.currentX-this.graph.panDx;
var d=this.currentY-this.graph.panDy;
this.x=Math.min(this.first.x,a);
this.y=Math.min(this.first.y,d);
this.width=Math.max(this.first.x,a)-this.x;
this.height=Math.max(this.first.y,d)-this.y;
var c=(mxClient.IS_VML)?this.graph.panDx:0;
var b=(mxClient.IS_VML)?this.graph.panDy:0;
this.div.style.left=(this.x+c)+"px";
this.div.style.top=(this.y+b)+"px";
this.div.style.width=Math.max(1,this.width)+"px";
this.div.style.height=Math.max(1,this.height)+"px";
}};
mxRubberband.prototype.destroy=function(){if(!this.destroyed){this.destroyed=true;
this.graph.removeMouseListener(this);
this.graph.removeListener(this.panHandler);
this.reset();
if(this.sharedDiv!=null){this.sharedDiv=null;
}}};
function mxVertexHandler(a){if(a!=null){this.state=a;
this.init();
}}mxVertexHandler.prototype.graph=null;
mxVertexHandler.prototype.state=null;
mxVertexHandler.prototype.singleSizer=false;
mxVertexHandler.prototype.index=null;
mxVertexHandler.prototype.allowHandleBoundsCheck=true;
mxVertexHandler.prototype.crisp=true;
mxVertexHandler.prototype.handleImage=null;
mxVertexHandler.prototype.tolerance=0;
mxVertexHandler.prototype.init=function(){this.graph=this.state.view.graph;
this.selectionBounds=this.getSelectionBounds(this.state);
this.bounds=new mxRectangle(this.selectionBounds.x,this.selectionBounds.y,this.selectionBounds.width,this.selectionBounds.height);
this.selectionBorder=this.createSelectionShape(this.bounds);
this.selectionBorder.dialect=(this.graph.dialect!=mxConstants.DIALECT_SVG)?mxConstants.DIALECT_VML:mxConstants.DIALECT_SVG;
this.selectionBorder.init(this.graph.getView().getOverlayPane());
if(this.selectionBorder.dialect==mxConstants.DIALECT_SVG){this.selectionBorder.node.setAttribute("pointer-events","none");
}else{this.selectionBorder.node.style.background="";
}if(this.graph.isCellMovable(this.state.cell)){this.selectionBorder.node.style.cursor=mxConstants.CURSOR_MOVABLE_VERTEX;
}mxEvent.redirectMouseEvents(this.selectionBorder.node,this.graph,this.state);
if(mxGraphHandler.prototype.maxCells<=0||this.graph.getSelectionCount()<mxGraphHandler.prototype.maxCells){var b=this.graph.isCellResizable(this.state.cell);
this.sizers=[];
if(b||(this.graph.isLabelMovable(this.state.cell)&&this.state.width>=2&&this.state.height>=2)){var a=0;
if(b){if(!this.singleSizer){this.sizers.push(this.createSizer("nw-resize",a++));
this.sizers.push(this.createSizer("n-resize",a++));
this.sizers.push(this.createSizer("ne-resize",a++));
this.sizers.push(this.createSizer("w-resize",a++));
this.sizers.push(this.createSizer("e-resize",a++));
this.sizers.push(this.createSizer("sw-resize",a++));
this.sizers.push(this.createSizer("s-resize",a++));
}this.sizers.push(this.createSizer("se-resize",a++));
}var c=this.graph.model.getGeometry(this.state.cell);
if(c!=null&&!c.relative&&!this.graph.isSwimlane(this.state.cell)&&this.graph.isLabelMovable(this.state.cell)){this.labelShape=this.createSizer(mxConstants.CURSOR_LABEL_HANDLE,mxEvent.LABEL_HANDLE,mxConstants.LABEL_HANDLE_SIZE,mxConstants.LABEL_HANDLE_FILLCOLOR);
this.sizers.push(this.labelShape);
}}else{if(this.graph.isCellMovable(this.state.cell)&&!this.graph.isCellResizable(this.state.cell)&&this.state.width<2&&this.state.height<2){this.labelShape=this.createSizer(mxConstants.CURSOR_MOVABLE_VERTEX,null,null,mxConstants.LABEL_HANDLE_FILLCOLOR);
this.sizers.push(this.labelShape);
}}}this.redraw();
};
mxVertexHandler.prototype.getSelectionBounds=function(a){return new mxRectangle(a.x,a.y,a.width,a.height);
};
mxVertexHandler.prototype.createSelectionShape=function(b){var a=new mxRectangleShape(b,null,this.getSelectionColor());
a.strokewidth=this.getSelectionStrokeWidth();
a.isDashed=this.isSelectionDashed();
a.crisp=this.crisp;
return a;
};
mxVertexHandler.prototype.getSelectionColor=function(){return mxConstants.VERTEX_SELECTION_COLOR;
};
mxVertexHandler.prototype.getSelectionStrokeWidth=function(){return mxConstants.VERTEX_SELECTION_STROKEWIDTH;
};
mxVertexHandler.prototype.isSelectionDashed=function(){return mxConstants.VERTEX_SELECTION_DASHED;
};
mxVertexHandler.prototype.createSizer=function(e,a,b,f){b=b||mxConstants.HANDLE_SIZE;
var c=new mxRectangle(0,0,b,b);
var d=this.createSizerShape(c,a,f);
if(this.state.text!=null&&this.state.text.node.parentNode==this.graph.container){d.bounds.height-=1;
d.bounds.width-=1;
d.dialect=mxConstants.DIALECT_STRICTHTML;
d.init(this.graph.container);
}else{d.dialect=(this.graph.dialect!=mxConstants.DIALECT_SVG)?mxConstants.DIALECT_VML:mxConstants.DIALECT_SVG;
d.init(this.graph.getView().getOverlayPane());
}mxEvent.redirectMouseEvents(d.node,this.graph,this.state);
if(this.graph.isEnabled()){d.node.style.cursor=e;
}if(!this.isSizerVisible(a)){d.node.style.visibility="hidden";
}return d;
};
mxVertexHandler.prototype.isSizerVisible=function(a){return true;
};
mxVertexHandler.prototype.createSizerShape=function(c,b,d){if(this.handleImage!=null){c.width=this.handleImage.width;
c.height=this.handleImage.height;
return new mxImageShape(c,this.handleImage.src);
}else{var a=new mxRectangleShape(c,d||mxConstants.HANDLE_FILLCOLOR,mxConstants.HANDLE_STROKECOLOR);
a.crisp=this.crisp;
return a;
}};
mxVertexHandler.prototype.moveSizerTo=function(b,a,c){if(b!=null){b.bounds.x=a-b.bounds.width/2;
b.bounds.y=c-b.bounds.height/2;
b.redraw();
}};
mxVertexHandler.prototype.getHandleForEvent=function(c){if(c.isSource(this.labelShape)){return mxEvent.LABEL_HANDLE;
}if(this.sizers!=null){var a=this.tolerance;
var d=(this.allowHandleBoundsCheck&&(mxClient.IS_IE||a>0))?new mxRectangle(c.getGraphX()-a,c.getGraphY()-a,2*a,2*a):null;
for(var b=0;
b<this.sizers.length;
b++){if(c.isSource(this.sizers[b])||(d!=null&&this.sizers[b].node.style.visibility!="hidden"&&mxUtils.intersects(this.sizers[b].bounds,d))){return b;
}}}return null;
};
mxVertexHandler.prototype.mouseDown=function(a,b){if(!b.isConsumed()&&this.graph.isEnabled()&&!this.graph.isForceMarqueeEvent(b.getEvent())&&(this.tolerance>0||b.getState()==this.state)){var c=this.getHandleForEvent(b);
if(c!=null){this.start(b.getX(),b.getY(),c);
b.consume();
}}};
mxVertexHandler.prototype.start=function(a,d,b){var c=mxUtils.convertPoint(this.graph.container,a,d);
this.startX=c.x;
this.startY=c.y;
this.index=b;
this.selectionBorder.node.style.visibility="hidden";
this.preview=this.createSelectionShape(this.bounds);
if(this.state.text!=null&&this.state.text.node.parentNode==this.graph.container){this.preview.dialect=mxConstants.DIALECT_STRICTHTML;
this.preview.init(this.graph.container);
}else{this.preview.dialect=(this.graph.dialect!=mxConstants.DIALECT_SVG)?mxConstants.DIALECT_VML:mxConstants.DIALECT_SVG;
this.preview.init(this.graph.view.getOverlayPane());
}};
mxVertexHandler.prototype.mouseMove=function(d,e){if(!e.isConsumed()&&this.index!=null){var a=new mxPoint(e.getGraphX(),e.getGraphY());
var g=this.graph.isGridEnabledEvent(e.getEvent());
var h=this.graph.getView().scale;
if(this.index==mxEvent.LABEL_HANDLE){if(g){a.x=this.graph.snap(a.x/h)*h;
a.y=this.graph.snap(a.y/h)*h;
}this.moveSizerTo(this.sizers[this.sizers.length-1],a.x,a.y);
e.consume();
}else{if(this.index!=null){var c=a.x-this.startX;
var b=a.y-this.startY;
var f=this.graph.view.translate;
this.bounds=this.union(this.selectionBounds,c,b,this.index,g,h,f);
this.drawPreview();
e.consume();
}}}else{if(this.getHandleForEvent(e)!=null){e.consume(false);
}}};
mxVertexHandler.prototype.mouseUp=function(d,e){if(!e.isConsumed()&&this.index!=null&&this.state!=null){var a=new mxPoint(e.getGraphX(),e.getGraphY());
var g=this.graph.getView().scale;
var f=this.graph.isGridEnabledEvent(e.getEvent());
var c=(a.x-this.startX)/g;
var b=(a.y-this.startY)/g;
this.resizeCell(this.state.cell,c,b,this.index,f);
this.reset();
e.consume();
}};
mxVertexHandler.prototype.reset=function(){this.index=null;
if(this.preview!=null){this.preview.destroy();
this.preview=null;
}if(this.selectionBorder!=null){this.selectionBounds=this.getSelectionBounds(this.state);
this.selectionBorder.node.style.visibility="visible";
this.bounds=new mxRectangle(this.selectionBounds.x,this.selectionBounds.y,this.selectionBounds.width,this.selectionBounds.height);
this.drawPreview();
}};
mxVertexHandler.prototype.resizeCell=function(a,c,b,d,g){var f=this.graph.model.getGeometry(a);
if(d==mxEvent.LABEL_HANDLE){var h=this.graph.view.scale;
c=(this.labelShape.bounds.getCenterX()-this.startX)/h;
b=(this.labelShape.bounds.getCenterY()-this.startY)/h;
f=f.clone();
if(f.offset==null){f.offset=new mxPoint(c,b);
}else{f.offset.x+=c;
f.offset.y+=b;
}this.graph.model.setGeometry(a,f);
}else{var e=this.union(f,c,b,d,g,1,new mxPoint(0,0));
this.graph.resizeCell(a,e);
}};
mxVertexHandler.prototype.union=function(b,q,p,f,g,e,h){if(this.singleSizer){var m=b.x+b.width+q;
var l=b.y+b.height+p;
if(g){m=this.graph.snap(m/e)*e;
l=this.graph.snap(l/e)*e;
}var k=new mxRectangle(b.x,b.y,0,0);
k.add(new mxRectangle(m,l,0,0));
return k;
}else{var d=b.x-h.x*e;
var n=d+b.width;
var i=b.y-h.y*e;
var a=i+b.height;
if(f>4){a=a+p;
if(g){a=this.graph.snap(a/e)*e;
}}else{if(f<3){i=i+p;
if(g){i=this.graph.snap(i/e)*e;
}}}if(f==0||f==3||f==5){d+=q;
if(g){d=this.graph.snap(d/e)*e;
}}else{if(f==2||f==4||f==7){n+=q;
if(g){n=this.graph.snap(n/e)*e;
}}}var c=n-d;
var o=a-i;
if(c<0){d+=c;
c=Math.abs(c);
}if(o<0){i+=o;
o=Math.abs(o);
}return new mxRectangle(d+h.x*e,i+h.y*e,c,o);
}};
mxVertexHandler.prototype.redraw=function(){this.selectionBounds=this.getSelectionBounds(this.state);
this.bounds=new mxRectangle(this.selectionBounds.x,this.selectionBounds.y,this.selectionBounds.width,this.selectionBounds.height);
if(this.sizers!=null){var d=this.state;
var e=d.x+d.width;
var c=d.y+d.height;
if(this.singleSizer){this.moveSizerTo(this.sizers[0],e,c);
}else{var a=d.x+d.width/2;
var f=d.y+d.height/2;
if(this.sizers.length>1){this.moveSizerTo(this.sizers[0],d.x,d.y);
this.moveSizerTo(this.sizers[1],a,d.y);
this.moveSizerTo(this.sizers[2],e,d.y);
this.moveSizerTo(this.sizers[3],d.x,f);
this.moveSizerTo(this.sizers[4],e,f);
this.moveSizerTo(this.sizers[5],d.x,c);
this.moveSizerTo(this.sizers[6],a,c);
this.moveSizerTo(this.sizers[7],e,c);
this.moveSizerTo(this.sizers[8],a+d.absoluteOffset.x,f+d.absoluteOffset.y);
}else{if(this.state.width>=2&&this.state.height>=2){this.moveSizerTo(this.sizers[0],a+d.absoluteOffset.x,f+d.absoluteOffset.y);
}else{this.moveSizerTo(this.sizers[0],d.x,d.y);
}}}}this.drawPreview();
};
mxVertexHandler.prototype.drawPreview=function(){if(this.preview!=null){this.preview.bounds=this.bounds;
if(this.preview.node.parentNode==this.graph.container){this.preview.bounds.width=Math.max(0,this.preview.bounds.width-1);
this.preview.bounds.height=Math.max(0,this.preview.bounds.height-1);
}this.preview.redraw();
}this.selectionBorder.bounds=this.bounds;
this.selectionBorder.redraw();
};
mxVertexHandler.prototype.destroy=function(){if(this.preview!=null){this.preview.destroy();
this.preview=null;
}this.selectionBorder.destroy();
this.selectionBorder=null;
this.labelShape=null;
if(this.sizers!=null){for(var a=0;
a<this.sizers.length;
a++){this.sizers[a].destroy();
this.sizers[a]=null;
}}};
function mxEdgeHandler(a){if(a!=null){this.state=a;
this.init();
}}mxEdgeHandler.prototype.graph=null;
mxEdgeHandler.prototype.state=null;
mxEdgeHandler.prototype.marker=null;
mxEdgeHandler.prototype.constraintHandler=null;
mxEdgeHandler.prototype.error=null;
mxEdgeHandler.prototype.shape=null;
mxEdgeHandler.prototype.bends=null;
mxEdgeHandler.prototype.labelShape=null;
mxEdgeHandler.prototype.cloneEnabled=true;
mxEdgeHandler.prototype.addEnabled=false;
mxEdgeHandler.prototype.removeEnabled=false;
mxEdgeHandler.prototype.preferHtml=false;
mxEdgeHandler.prototype.allowHandleBoundsCheck=true;
mxEdgeHandler.prototype.snapToTerminals=false;
mxEdgeHandler.prototype.crisp=true;
mxEdgeHandler.prototype.handleImage=null;
mxEdgeHandler.prototype.tolerance=0;
mxEdgeHandler.prototype.init=function(){this.graph=this.state.view.graph;
this.marker=this.createMarker();
this.constraintHandler=new mxConstraintHandler(this.graph);
this.points=[];
this.abspoints=this.getSelectionPoints(this.state);
this.shape=this.createSelectionShape(this.abspoints);
this.shape.dialect=(this.graph.dialect!=mxConstants.DIALECT_SVG)?mxConstants.DIALECT_VML:mxConstants.DIALECT_SVG;
this.shape.init(this.graph.getView().getOverlayPane());
this.shape.node.style.cursor=mxConstants.CURSOR_MOVABLE_EDGE;
var d=(mxClient.IS_TOUCH)?"touchstart":"mousedown";
var e=(mxClient.IS_TOUCH)?"touchmove":"mousemove";
var a=(mxClient.IS_TOUCH)?"touchend":"mouseup";
mxEvent.addListener(this.shape.node,"dblclick",mxUtils.bind(this,function(f){this.graph.dblClick(f,this.state.cell);
}));
mxEvent.addListener(this.shape.node,d,mxUtils.bind(this,function(f){if(this.addEnabled&&this.isAddPointEvent(f)){this.addPoint(this.state,f);
}else{this.graph.fireMouseEvent(mxEvent.MOUSE_DOWN,new mxMouseEvent(f,this.state));
}}));
mxEvent.addListener(this.shape.node,e,mxUtils.bind(this,function(g){var f=this.state.cell;
if(this.index!=null){var h=mxUtils.convertPoint(this.graph.container,mxEvent.getClientX(g),mxEvent.getClientY(g));
f=this.graph.getCellAt(h.x,h.y);
if(this.graph.isSwimlane(f)&&this.graph.hitsSwimlaneContent(f,h.x,h.y)){f=null;
}}this.graph.fireMouseEvent(mxEvent.MOUSE_MOVE,new mxMouseEvent(g,this.graph.getView().getState(f)));
}));
mxEvent.addListener(this.shape.node,a,mxUtils.bind(this,function(f){this.graph.fireMouseEvent(mxEvent.MOUSE_UP,new mxMouseEvent(f,this.state));
}));
this.preferHtml=this.state.text!=null&&this.state.text.node.parentNode==this.graph.container;
if(!this.preferHtml){var b=this.state.getVisibleTerminalState(true);
if(b!=null){this.preferHtml=b.text!=null&&b.text.node.parentNode==this.graph.container;
}if(!this.preferHtml){var c=this.state.getVisibleTerminalState(false);
if(c!=null){this.preferHtml=c.text!=null&&c.text.node.parentNode==this.graph.container;
}}}if(this.graph.getSelectionCount()<mxGraphHandler.prototype.maxCells||mxGraphHandler.prototype.maxCells<=0){this.bends=this.createBends();
}this.label=new mxPoint(this.state.absoluteOffset.x,this.state.absoluteOffset.y);
this.labelShape=new mxRectangleShape(new mxRectangle(),mxConstants.LABEL_HANDLE_FILLCOLOR,mxConstants.HANDLE_STROKECOLOR);
this.initBend(this.labelShape);
this.labelShape.node.style.cursor=mxConstants.CURSOR_LABEL_HANDLE;
mxEvent.redirectMouseEvents(this.labelShape.node,this.graph,this.state);
this.redraw();
};
mxEdgeHandler.prototype.isAddPointEvent=function(a){return mxEvent.isShiftDown(a);
};
mxEdgeHandler.prototype.isRemovePointEvent=function(a){return mxEvent.isShiftDown(a);
};
mxEdgeHandler.prototype.getSelectionPoints=function(a){return a.absolutePoints;
};
mxEdgeHandler.prototype.createSelectionShape=function(b){var a=new mxPolyline(b,this.getSelectionColor());
a.strokewidth=this.getSelectionStrokeWidth();
a.isDashed=this.isSelectionDashed();
return a;
};
mxEdgeHandler.prototype.getSelectionColor=function(){return mxConstants.EDGE_SELECTION_COLOR;
};
mxEdgeHandler.prototype.getSelectionStrokeWidth=function(){return mxConstants.EDGE_SELECTION_STROKEWIDTH;
};
mxEdgeHandler.prototype.isSelectionDashed=function(){return mxConstants.EDGE_SELECTION_DASHED;
};
mxEdgeHandler.prototype.isConnectableCell=function(a){return true;
};
mxEdgeHandler.prototype.createMarker=function(){var a=new mxCellMarker(this.graph);
var b=this;
a.getCell=function(e){var c=mxCellMarker.prototype.getCell.apply(this,arguments);
if(!b.isConnectableCell(c)){return null;
}var d=b.graph.getModel();
if(c==b.state.cell||(c!=null&&!b.graph.connectableEdges&&d.isEdge(c))){c=null;
}return c;
};
a.isValidState=function(f){var d=b.graph.getModel();
var c=b.graph.view.getTerminalPort(f,b.graph.view.getState(d.getTerminal(b.state.cell,!b.isSource)),!b.isSource);
var h=(c!=null)?c.cell:null;
var e=(b.isSource)?f.cell:h;
var g=(b.isSource)?h:f.cell;
b.error=b.validateConnection(e,g);
return b.error==null;
};
return a;
};
mxEdgeHandler.prototype.validateConnection=function(a,b){return this.graph.getEdgeValidationError(this.state.cell,a,b);
};
mxEdgeHandler.prototype.createBends=function(){var a=this.state.cell;
var f=[];
for(var e=0;
e<this.abspoints.length;
e++){if(this.isHandleVisible(e)){var g=e==0;
var h=e==this.abspoints.length-1;
var d=g||h;
if(d||this.graph.isCellBendable(a)){var c=this.createHandleShape(e);
this.initBend(c);
if(mxClient.IS_TOUCH){c.node.setAttribute("pointer-events","none");
}if(this.isHandleEnabled(e)){if(mxClient.IS_TOUCH){var b=mxUtils.bind(this,function(i){var k=mxUtils.convertPoint(this.graph.container,mxEvent.getClientX(i),mxEvent.getClientY(i));
return this.graph.view.getState(this.graph.getCellAt(k.x,k.y));
});
mxEvent.redirectMouseEvents(c.node,this.graph,b);
}else{c.node.style.cursor=mxConstants.CURSOR_BEND_HANDLE;
mxEvent.redirectMouseEvents(c.node,this.graph,this.state);
}}f.push(c);
if(!d){this.points.push(new mxPoint(0,0));
c.node.style.visibility="hidden";
}}}}return f;
};
mxEdgeHandler.prototype.isHandleEnabled=function(a){return true;
};
mxEdgeHandler.prototype.isHandleVisible=function(a){return true;
};
mxEdgeHandler.prototype.createHandleShape=function(a){if(this.handleImage!=null){return new mxImageShape(new mxRectangle(0,0,this.handleImage.width,this.handleImage.height),this.handleImage.src);
}else{var b=mxConstants.HANDLE_SIZE;
if(this.preferHtml){b-=1;
}return new mxRectangleShape(new mxRectangle(0,0,b,b),mxConstants.HANDLE_FILLCOLOR,mxConstants.HANDLE_STROKECOLOR);
}};
mxEdgeHandler.prototype.initBend=function(a){a.crisp=this.crisp;
if(this.preferHtml){a.dialect=mxConstants.DIALECT_STRICTHTML;
a.init(this.graph.container);
}else{a.dialect=(this.graph.dialect!=mxConstants.DIALECT_SVG)?mxConstants.DIALECT_VML:mxConstants.DIALECT_SVG;
a.init(this.graph.getView().getOverlayPane());
}};
mxEdgeHandler.prototype.getHandleForEvent=function(c){if(this.bends!=null){var a=this.tolerance;
var d=(this.allowHandleBoundsCheck&&(mxClient.IS_IE||a>0))?new mxRectangle(c.getGraphX()-a,c.getGraphY()-a,2*a,2*a):null;
for(var b=0;
b<this.bends.length;
b++){if(c.isSource(this.bends[b])||(d!=null&&this.bends[b].node.style.visibility!="hidden"&&mxUtils.intersects(this.bends[b].bounds,d))){return b;
}}}if(c.isSource(this.labelShape)||c.isSource(this.state.text)){if((!mxClient.IS_SF&&!mxClient.IS_GC)||c.getSource().nodeName!="SELECT"){return mxEvent.LABEL_HANDLE;
}}return null;
};
mxEdgeHandler.prototype.mouseDown=function(a,b){var c=null;
c=this.getHandleForEvent(b);
if(c!=null&&!b.isConsumed()&&this.graph.isEnabled()&&!this.graph.isForceMarqueeEvent(b.getEvent())){if(this.removeEnabled&&this.isRemovePointEvent(b.getEvent())){this.removePoint(this.state,c);
}else{if(c!=mxEvent.LABEL_HANDLE||this.graph.isLabelMovable(b.getCell())){this.start(b.getX(),b.getY(),c);
}}b.consume();
}};
mxEdgeHandler.prototype.start=function(b,e,c){this.startX=b;
this.startY=e;
this.isSource=(this.bends==null)?false:c==0;
this.isTarget=(this.bends==null)?false:c==this.bends.length-1;
this.isLabel=c==mxEvent.LABEL_HANDLE;
if(this.isSource||this.isTarget){var a=this.state.cell;
var d=this.graph.model.getTerminal(a,this.isSource);
if((d==null&&this.graph.isTerminalPointMovable(a,this.isSource))||(d!=null&&this.graph.isCellDisconnectable(a,d,this.isSource))){this.index=c;
}}else{this.index=c;
}};
mxEdgeHandler.prototype.clonePreviewState=function(a,b){return this.state.clone();
};
mxEdgeHandler.prototype.getSnapToTerminalTolerance=function(){return this.graph.gridSize*this.graph.view.scale/2;
};
mxEdgeHandler.prototype.getPointForEvent=function(h){var l=new mxPoint(h.getGraphX(),h.getGraphY());
var f=this.getSnapToTerminalTolerance();
var k=this.graph.getView();
var b=false;
var m=false;
if(this.snapToTerminals&&f>0){function c(n){if(n!=null){var i=n.x;
if(Math.abs(l.x-i)<f){l.x=i;
b=true;
}var o=n.y;
if(Math.abs(l.y-o)<f){l.y=o;
m=true;
}}}function a(i){if(i!=null){c.call(this,new mxPoint(k.getRoutingCenterX(i),k.getRoutingCenterY(i)));
}}a.call(this,this.state.getVisibleTerminalState(true));
a.call(this,this.state.getVisibleTerminalState(false));
if(this.abspoints!=null){for(var e=0;
e<this.abspoints;
e++){if(e!=this.index){c.call(this,this.abspoints[e]);
}}}}if(this.graph.isGridEnabledEvent(h.getEvent())){var d=k.scale;
var g=k.translate;
if(!b){l.x=(this.graph.snap(l.x/d-g.x)+g.x)*d;
}if(!m){l.y=(this.graph.snap(l.y/d-g.y)+g.y)*d;
}}return l;
};
mxEdgeHandler.prototype.getPreviewTerminalState=function(c){this.constraintHandler.update(c,this.isSource);
this.marker.process(c);
var b=this.marker.getValidState();
var a=null;
if(this.constraintHandler.currentFocus!=null&&this.constraintHandler.currentConstraint!=null){this.marker.reset();
}if(b!=null){a=b;
}else{if(this.constraintHandler.currentConstraint!=null&&this.constraintHandler.currentFocus!=null){a=this.constraintHandler.currentFocus;
}}return a;
};
mxEdgeHandler.prototype.getPreviewPoints=function(a){var c=this.graph.getCellGeometry(this.state.cell);
var b=(c.points!=null)?c.points.slice():null;
if(!this.isSource&&!this.isTarget){this.convertPoint(a,false);
if(b==null){b=[a];
}else{b[this.index-1]=a;
}}else{if(this.graph.resetEdgesOnConnect){b=null;
}}return b;
};
mxEdgeHandler.prototype.updatePreviewState=function(g,b,f){var d=(this.isSource)?f:this.state.getVisibleTerminalState(true);
var e=(this.isTarget)?f:this.state.getVisibleTerminalState(false);
var a=this.graph.getConnectionConstraint(g,d,true);
var c=this.graph.getConnectionConstraint(g,e,false);
var h=this.constraintHandler.currentConstraint;
if(h==null){h=new mxConnectionConstraint();
}if(this.isSource){a=h;
}else{if(this.isTarget){c=h;
}}if(!this.isSource||d!=null){g.view.updateFixedTerminalPoint(g,d,true,a);
}if(!this.isTarget||e!=null){g.view.updateFixedTerminalPoint(g,e,false,c);
}if((this.isSource||this.isTarget)&&f==null){g.setAbsoluteTerminalPoint(b,this.isSource);
if(this.marker.getMarkedState()==null){this.error=(this.graph.allowDanglingEdges)?null:"";
}}g.view.updatePoints(g,this.points,d,e);
g.view.updateFloatingTerminalPoints(g,d,e);
};
mxEdgeHandler.prototype.mouseMove=function(c,e){if(this.index!=null&&this.marker!=null){var a=this.getPointForEvent(e);
if(this.isLabel){this.label.x=a.x;
this.label.y=a.y;
}else{this.points=this.getPreviewPoints(a);
var d=(this.isSource||this.isTarget)?this.getPreviewTerminalState(e):null;
var f=this.clonePreviewState(a,(d!=null)?d.cell:null);
this.updatePreviewState(f,a,d);
var b=(this.error==null)?this.marker.validColor:this.marker.invalidColor;
this.setPreviewColor(b);
this.abspoints=f.absolutePoints;
this.active=true;
}this.drawPreview();
mxEvent.consume(e.getEvent());
e.consume();
}else{if(mxClient.IS_IE&&this.getHandleForEvent(e)!=null){e.consume(false);
}}};
mxEdgeHandler.prototype.mouseUp=function(b,d){if(this.index!=null&&this.marker!=null){var c=this.state.cell;
if(d.getX()!=this.startX||d.getY()!=this.startY){if(this.error!=null){if(this.error.length>0){this.graph.validationAlert(this.error);
}}else{if(this.isLabel){this.moveLabel(this.state,this.label.x,this.label.y);
}else{if(this.isSource||this.isTarget){var a=null;
if(this.constraintHandler.currentConstraint!=null&&this.constraintHandler.currentFocus!=null){a=this.constraintHandler.currentFocus.cell;
}if(a==null&&this.marker.hasValidState()){a=this.marker.validState.cell;
}if(a!=null){c=this.connect(c,a,this.isSource,this.graph.isCloneEvent(d.getEvent())&&this.cloneEnabled&&this.graph.isCellsCloneable(),d);
}else{if(this.graph.isAllowDanglingEdges()){var f=this.abspoints[(this.isSource)?0:this.abspoints.length-1];
f.x=f.x/this.graph.view.scale-this.graph.view.translate.x;
f.y=f.y/this.graph.view.scale-this.graph.view.translate.y;
var e=this.graph.getView().getState(this.graph.getModel().getParent(c));
if(e!=null){f.x-=e.origin.x;
f.y-=e.origin.y;
}f.x-=this.graph.panDx/this.graph.view.scale;
f.y-=this.graph.panDy/this.graph.view.scale;
this.changeTerminalPoint(c,f,this.isSource);
}}}else{if(this.active){this.changePoints(c,this.points);
}else{this.graph.getView().invalidate(this.state.cell);
this.graph.getView().revalidate(this.state.cell);
}}}}}if(this.marker!=null){this.reset();
if(c!=this.state.cell){this.graph.setSelectionCell(c);
}}d.consume();
}};
mxEdgeHandler.prototype.reset=function(){this.error=null;
this.index=null;
this.label=null;
this.points=null;
this.active=false;
this.isLabel=false;
this.isSource=false;
this.isTarget=false;
this.marker.reset();
this.constraintHandler.reset();
this.setPreviewColor(mxConstants.EDGE_SELECTION_COLOR);
this.redraw();
};
mxEdgeHandler.prototype.setPreviewColor=function(a){if(this.shape!=null&&this.shape.node!=null){if(this.shape.dialect==mxConstants.DIALECT_SVG){this.shape.innerNode.setAttribute("stroke",a);
}else{this.shape.node.strokecolor=a;
}}};
mxEdgeHandler.prototype.convertPoint=function(a,d){var e=this.graph.getView().getScale();
var c=this.graph.getView().getTranslate();
if(d){a.x=this.graph.snap(a.x);
a.y=this.graph.snap(a.y);
}a.x=Math.round(a.x/e-c.x);
a.y=Math.round(a.y/e-c.y);
var b=this.graph.getView().getState(this.graph.getModel().getParent(this.state.cell));
if(b!=null){a.x-=b.origin.x;
a.y-=b.origin.y;
}return a;
};
mxEdgeHandler.prototype.moveLabel=function(b,a,g){var c=this.graph.getModel();
var f=c.getGeometry(b.cell);
if(f!=null){f=f.clone();
var d=this.graph.getView().getRelativePoint(b,a,g);
f.x=d.x;
f.y=d.y;
var e=this.graph.getView().scale;
f.offset=new mxPoint(0,0);
var d=this.graph.view.getPoint(b,f);
f.offset=new mxPoint((a-d.x)/e,(g-d.y)/e);
c.setGeometry(b.cell,f);
}};
mxEdgeHandler.prototype.connect=function(b,d,g,f,i){var c=this.graph.getModel();
var k=c.getParent(b);
c.beginUpdate();
try{if(f){var h=b.clone();
c.add(k,h,c.getChildCount(k));
var e=c.getTerminal(b,!g);
this.graph.connectCell(h,e,!g);
b=h;
}var a=this.constraintHandler.currentConstraint;
if(a==null){a=new mxConnectionConstraint();
}this.graph.connectCell(b,d,g,a);
}finally{c.endUpdate();
}return b;
};
mxEdgeHandler.prototype.changeTerminalPoint=function(d,a,c){var b=this.graph.getModel();
var e=b.getGeometry(d);
if(e!=null){b.beginUpdate();
try{e=e.clone();
e.setTerminalPoint(a,c);
b.setGeometry(d,e);
this.graph.connectCell(d,null,c,new mxConnectionConstraint());
}finally{b.endUpdate();
}}};
mxEdgeHandler.prototype.changePoints=function(c,b){var a=this.graph.getModel();
var d=a.getGeometry(c);
if(d!=null){d=d.clone();
d.points=b;
a.setGeometry(c,d);
}};
mxEdgeHandler.prototype.addPoint=function(c,a){var f=this.graph.getCellGeometry(c.cell);
if(f!=null){f=f.clone();
var e=mxUtils.convertPoint(this.graph.container,mxEvent.getClientX(a),mxEvent.getClientY(a));
var b=mxUtils.findNearestSegment(c,e.x,e.y);
var d=this.graph.isGridEnabledEvent(a);
this.convertPoint(e,d);
if(f.points==null){f.points=[e];
}else{f.points.splice(b,0,e);
}this.graph.getModel().setGeometry(c.cell,f);
this.destroy();
this.init();
mxEvent.consume(a);
}};
mxEdgeHandler.prototype.removePoint=function(b,a){if(a>0&&a<this.abspoints.length-1){var c=this.graph.getCellGeometry(this.state.cell);
if(c!=null&&c.points!=null){c=c.clone();
c.points.splice(a-1,1);
this.graph.getModel().setGeometry(b.cell,c);
this.destroy();
this.init();
}}};
mxEdgeHandler.prototype.getHandleFillColor=function(c){var e=c==0;
var a=this.state.cell;
var d=this.graph.getModel().getTerminal(a,e);
var b=mxConstants.HANDLE_FILLCOLOR;
if((d!=null&&!this.graph.isCellDisconnectable(a,d,e))||(d==null&&!this.graph.isTerminalPointMovable(a,e))){b=mxConstants.LOCKED_HANDLE_FILLCOLOR;
}else{if(d!=null&&this.graph.isCellDisconnectable(a,d,e)){b=mxConstants.CONNECT_HANDLE_FILLCOLOR;
}}return b;
};
mxEdgeHandler.prototype.redraw=function(){this.abspoints=this.state.absolutePoints.slice();
var l=this.state.cell;
var o=mxConstants.LABEL_HANDLE_SIZE;
this.label=new mxPoint(this.state.absoluteOffset.x,this.state.absoluteOffset.y);
this.labelShape.bounds=new mxRectangle(this.label.x-o/2,this.label.y-o/2,o,o);
this.labelShape.redraw();
var g=this.graph.getLabel(l);
if(g!=null&&g.length>0&&this.graph.isLabelMovable(l)){this.labelShape.node.style.visibility="visible";
}else{this.labelShape.node.style.visibility="hidden";
}if(this.bends!=null&&this.bends.length>0){var e=this.abspoints.length-1;
var m=this.abspoints[0];
var d=this.abspoints[0].x;
var k=this.abspoints[0].y;
var i=this.bends[0].bounds;
this.bends[0].bounds=new mxRectangle(d-i.width/2,k-i.height/2,i.width,i.height);
this.bends[0].fill=this.getHandleFillColor(0);
this.bends[0].reconfigure();
this.bends[0].redraw();
var h=this.abspoints[e];
var f=this.abspoints[e].x;
var c=this.abspoints[e].y;
var a=this.bends.length-1;
i=this.bends[a].bounds;
this.bends[a].bounds=new mxRectangle(f-i.width/2,c-i.height/2,i.width,i.height);
this.bends[a].fill=this.getHandleFillColor(a);
this.bends[a].reconfigure();
this.bends[a].redraw();
this.redrawInnerBends(m,h);
}this.drawPreview();
};
mxEdgeHandler.prototype.redrawInnerBends=function(l,d){var f=this.graph.getModel().getGeometry(this.state.cell);
var h=f.points;
if(h!=null){if(this.points==null){this.points=[];
}for(var e=1;
e<this.bends.length-1;
e++){if(this.bends[e]!=null){if(this.abspoints[e]!=null){var c=this.abspoints[e].x;
var k=this.abspoints[e].y;
var a=this.bends[e].bounds;
this.bends[e].node.style.visibility="visible";
this.bends[e].bounds=new mxRectangle(c-a.width/2,k-a.height/2,a.width,a.height);
this.bends[e].redraw();
this.points[e-1]=h[e-1];
}else{this.bends[e].destroy();
this.bends[e]=null;
}}}}};
mxEdgeHandler.prototype.drawPreview=function(){if(this.isLabel){var a=mxConstants.LABEL_HANDLE_SIZE;
var b=new mxRectangle(this.label.x-a/2,this.label.y-a/2,a,a);
this.labelShape.bounds=b;
this.labelShape.redraw();
}else{this.shape.points=this.abspoints;
this.shape.redraw();
}mxUtils.repaintGraph(this.graph,this.shape.points[this.shape.points.length-1]);
};
mxEdgeHandler.prototype.destroy=function(){if(this.marker!=null){this.marker.destroy();
this.marker=null;
}if(this.shape!=null){this.shape.destroy();
this.shape=null;
}if(this.labelShape!=null){this.labelShape.destroy();
this.labelShape=null;
}if(this.constraintHandler!=null){this.constraintHandler.destroy();
this.constraintHandler=null;
}if(this.bends!=null){for(var a=0;
a<this.bends.length;
a++){if(this.bends[a]!=null){this.bends[a].destroy();
this.bends[a]=null;
}}}};
function mxElbowEdgeHandler(a){if(a!=null){this.state=a;
this.init();
}}mxElbowEdgeHandler.prototype=new mxEdgeHandler();
mxElbowEdgeHandler.prototype.constructor=mxElbowEdgeHandler;
mxElbowEdgeHandler.prototype.flipEnabled=true;
mxElbowEdgeHandler.prototype.doubleClickOrientationResource=(mxClient.language!="none")?"doubleClickOrientation":"";
mxElbowEdgeHandler.prototype.createBends=function(){var b=[];
var a=this.createHandleShape(0);
this.initBend(a);
a.node.style.cursor=mxConstants.CURSOR_BEND_HANDLE;
mxEvent.redirectMouseEvents(a.node,this.graph,this.state);
b.push(a);
if(mxClient.IS_TOUCH){a.node.setAttribute("pointer-events","none");
}b.push(this.createVirtualBend());
this.points.push(new mxPoint(0,0));
a=this.createHandleShape(2);
this.initBend(a);
a.node.style.cursor=mxConstants.CURSOR_BEND_HANDLE;
mxEvent.redirectMouseEvents(a.node,this.graph,this.state);
b.push(a);
if(mxClient.IS_TOUCH){a.node.setAttribute("pointer-events","none");
}return b;
};
mxElbowEdgeHandler.prototype.createVirtualBend=function(){var c=this.createHandleShape();
this.initBend(c);
var a=this.getCursorForBend();
c.node.style.cursor=a;
var b=mxUtils.bind(this,function(d){if(!mxEvent.isConsumed(d)&&this.flipEnabled){this.graph.flipEdge(this.state.cell,d);
mxEvent.consume(d);
}});
mxEvent.redirectMouseEvents(c.node,this.graph,this.state,null,null,null,b);
if(!this.graph.isCellBendable(this.state.cell)){c.node.style.visibility="hidden";
}return c;
};
mxElbowEdgeHandler.prototype.getCursorForBend=function(){return(this.state.style[mxConstants.STYLE_EDGE]==mxEdgeStyle.TopToBottom||this.state.style[mxConstants.STYLE_EDGE]==mxConstants.EDGESTYLE_TOPTOBOTTOM||((this.state.style[mxConstants.STYLE_EDGE]==mxEdgeStyle.ElbowConnector||this.state.style[mxConstants.STYLE_EDGE]==mxConstants.EDGESTYLE_ELBOW)&&this.state.style[mxConstants.STYLE_ELBOW]==mxConstants.ELBOW_VERTICAL))?"row-resize":"col-resize";
};
mxElbowEdgeHandler.prototype.getTooltipForNode=function(a){var b=null;
if(this.bends!=null&&this.bends[1]!=null&&(a==this.bends[1].node||a.parentNode==this.bends[1].node)){b=this.doubleClickOrientationResource;
b=mxResources.get(b)||b;
}return b;
};
mxElbowEdgeHandler.prototype.convertPoint=function(a,d){var e=this.graph.getView().getScale();
var c=this.graph.getView().getTranslate();
var b=this.state.origin;
if(d){a.x=this.graph.snap(a.x);
a.y=this.graph.snap(a.y);
}a.x=Math.round(a.x/e-c.x-b.x);
a.y=Math.round(a.y/e-c.y-b.y);
};
mxElbowEdgeHandler.prototype.redrawInnerBends=function(k,e){var d=this.graph.getModel().getGeometry(this.state.cell);
var l=d.points;
var m=(l!=null)?l[0]:null;
if(m==null){m=new mxPoint(k.x+(e.x-k.x)/2,k.y+(e.y-k.y)/2);
}else{m=new mxPoint(this.graph.getView().scale*(m.x+this.graph.getView().translate.x+this.state.origin.x),this.graph.getView().scale*(m.y+this.graph.getView().translate.y+this.state.origin.y));
}var f=this.bends[1].bounds;
var i=f.width;
var c=f.height;
if(this.handleImage==null){i=mxConstants.HANDLE_SIZE;
c=mxConstants.HANDLE_SIZE;
}var a=new mxRectangle(m.x-i/2,m.y-c/2,i,c);
if(this.handleImage==null&&this.labelShape.node.style.visibility!="hidden"&&mxUtils.intersects(a,this.labelShape.bounds)){i+=3;
c+=3;
a=new mxRectangle(m.x-i/2,m.y-c/2,i,c);
}this.bends[1].bounds=a;
this.bends[1].reconfigure();
this.bends[1].redraw();
};
function mxEdgeSegmentHandler(a){if(a!=null){this.state=a;
this.init();
}}mxEdgeSegmentHandler.prototype=new mxElbowEdgeHandler();
mxEdgeSegmentHandler.prototype.constructor=mxEdgeSegmentHandler;
mxEdgeSegmentHandler.prototype.getPreviewPoints=function(e){if(this.isSource||this.isTarget){return mxElbowEdgeHandler.prototype.getPreviewPoints.apply(this,arguments);
}else{this.convertPoint(e,false);
var k=this.state.absolutePoints;
var f=k[0].clone();
this.convertPoint(f,false);
var m=[];
for(var b=1;
b<k.length;
b++){var l=k[b].clone();
this.convertPoint(l,false);
if(b==this.index){if(f.x==l.x){f.x=e.x;
l.x=e.x;
}else{f.y=e.y;
l.y=e.y;
}}if(b<k.length-1){m.push(l);
}f=l;
}if(m.length==1){var d=this.state.view;
var a=this.state.getVisibleTerminalState(true);
var c=this.state.getVisibleTerminalState(false);
if(c!=null&a!=null){var h=this.state.origin.x;
var g=this.state.origin.y;
if(mxUtils.contains(c,m[0].x+h,m[0].y+g)){if(k[1].y==k[2].y){m[0].y=d.getRoutingCenterY(a)-g;
}else{m[0].x=d.getRoutingCenterX(a)-h;
}}else{if(mxUtils.contains(a,m[0].x+h,m[0].y+g)){if(k[1].y==k[0].y){m[0].y=d.getRoutingCenterY(c)-g;
}else{m[0].x=d.getRoutingCenterX(c)-h;
}}}}}else{if(m.length==0){m=[e];
}}return m;
}};
mxEdgeSegmentHandler.prototype.createBends=function(){var d=[];
var c=this.createHandleShape(0);
this.initBend(c);
c.node.style.cursor=mxConstants.CURSOR_BEND_HANDLE;
mxEvent.redirectMouseEvents(c.node,this.graph,this.state);
d.push(c);
if(mxClient.IS_TOUCH){c.node.setAttribute("pointer-events","none");
}var e=this.state.absolutePoints;
if(this.graph.isCellBendable(this.state.cell)){if(this.points==null){this.points=[];
}for(var b=0;
b<e.length-1;
b++){var c=this.createVirtualBend();
d.push(c);
var a=e[b].x-e[b+1].x==0;
c.node.style.cursor=(a)?"col-resize":"row-resize";
this.points.push(new mxPoint(0,0));
if(mxClient.IS_TOUCH){c.node.setAttribute("pointer-events","none");
}}}var c=this.createHandleShape(e.length);
this.initBend(c);
c.node.style.cursor=mxConstants.CURSOR_BEND_HANDLE;
mxEvent.redirectMouseEvents(c.node,this.graph,this.state);
d.push(c);
if(mxClient.IS_TOUCH){c.node.setAttribute("pointer-events","none");
}return d;
};
mxEdgeSegmentHandler.prototype.redraw=function(){this.refresh();
mxEdgeHandler.prototype.redraw.apply(this,arguments);
};
mxEdgeSegmentHandler.prototype.refresh=function(){if(this.bends!=null){for(var a=0;
a<this.bends.length;
a++){if(this.bends[a]!=null){this.bends[a].destroy();
this.bends[a]=null;
}}this.bends=this.createBends();
}};
mxEdgeSegmentHandler.prototype.redrawInnerBends=function(f,a){if(this.graph.isCellBendable(this.state.cell)){var c=mxConstants.HANDLE_SIZE;
var e=this.state.absolutePoints;
if(e!=null&&e.length>1){for(var b=0;
b<this.state.absolutePoints.length-1;
b++){if(this.bends[b+1]!=null){var f=e[b];
var a=e[b+1];
var d=new mxPoint(f.x+(a.x-f.x)/2,f.y+(a.y-f.y)/2);
this.bends[b+1].bounds=new mxRectangle(d.x-c/2,d.y-c/2,c,c);
this.bends[b+1].reconfigure();
this.bends[b+1].redraw();
}}}}};
mxEdgeSegmentHandler.prototype.changePoints=function(c,b){b=[];
var f=this.abspoints;
if(f.length>1){var g=f[0];
var e=f[1];
for(var a=2;
a<f.length;
a++){var d=f[a];
if((Math.round(g.x)!=Math.round(e.x)||Math.round(e.x)!=Math.round(d.x))&&(Math.round(g.y)!=Math.round(e.y)||Math.round(e.y)!=Math.round(d.y))){g=e;
e=e.clone();
this.convertPoint(e,false);
b.push(e);
}e=d;
}}mxElbowEdgeHandler.prototype.changePoints.apply(this,arguments);
};
function mxKeyHandler(a,b){if(a!=null){this.graph=a;
this.target=b||document.documentElement;
this.normalKeys=[];
this.shiftKeys=[];
this.controlKeys=[];
this.controlShiftKeys=[];
mxEvent.addListener(this.target,"keydown",mxUtils.bind(this,function(c){this.keyDown(c);
}));
if(mxClient.IS_IE){mxEvent.addListener(window,"unload",mxUtils.bind(this,function(){this.destroy();
}));
}}}mxKeyHandler.prototype.graph=null;
mxKeyHandler.prototype.target=null;
mxKeyHandler.prototype.normalKeys=null;
mxKeyHandler.prototype.shiftKeys=null;
mxKeyHandler.prototype.controlKeys=null;
mxKeyHandler.prototype.controlShiftKeys=null;
mxKeyHandler.prototype.enabled=true;
mxKeyHandler.prototype.isEnabled=function(){return this.enabled;
};
mxKeyHandler.prototype.setEnabled=function(a){this.enabled=a;
};
mxKeyHandler.prototype.bindKey=function(b,a){this.normalKeys[b]=a;
};
mxKeyHandler.prototype.bindShiftKey=function(b,a){this.shiftKeys[b]=a;
};
mxKeyHandler.prototype.bindControlKey=function(b,a){this.controlKeys[b]=a;
};
mxKeyHandler.prototype.bindControlShiftKey=function(b,a){this.controlShiftKeys[b]=a;
};
mxKeyHandler.prototype.isControlDown=function(a){return mxEvent.isControlDown(a);
};
mxKeyHandler.prototype.getFunction=function(a){if(a!=null){if(this.isControlDown(a)){if(mxEvent.isShiftDown(a)){return this.controlShiftKeys[a.keyCode];
}else{return this.controlKeys[a.keyCode];
}}else{if(mxEvent.isShiftDown(a)){return this.shiftKeys[a.keyCode];
}else{return this.normalKeys[a.keyCode];
}}}return null;
};
mxKeyHandler.prototype.isGraphEvent=function(a){var c=mxEvent.getSource(a);
if((c==this.target||c.parentNode==this.target)||(this.graph.cellEditor!=null&&c==this.graph.cellEditor.textarea)){return true;
}var b=c;
while(b!=null){if(b==this.graph.container){return true;
}b=b.parentNode;
}return false;
};
mxKeyHandler.prototype.keyDown=function(a){if(this.graph.isEnabled()&&!mxEvent.isConsumed(a)&&this.isGraphEvent(a)&&this.isEnabled()){if(a.keyCode==27){this.escape(a);
}else{if(!this.graph.isEditing()){var b=this.getFunction(a);
if(b!=null){b(a);
mxEvent.consume(a);
}}}}};
mxKeyHandler.prototype.escape=function(a){if(this.graph.isEscapeEnabled()){this.graph.escape(a);
}};
mxKeyHandler.prototype.destroy=function(){this.target=null;
};
function mxTooltipHandler(b,a){if(b!=null){this.graph=b;
this.delay=a||500;
this.graph.addMouseListener(this);
}}mxTooltipHandler.prototype.zIndex=10005;
mxTooltipHandler.prototype.graph=null;
mxTooltipHandler.prototype.delay=null;
mxTooltipHandler.prototype.hideOnHover=false;
mxTooltipHandler.prototype.enabled=true;
mxTooltipHandler.prototype.isEnabled=function(){return this.enabled;
};
mxTooltipHandler.prototype.setEnabled=function(a){this.enabled=a;
};
mxTooltipHandler.prototype.isHideOnHover=function(){return this.hideOnHover;
};
mxTooltipHandler.prototype.setHideOnHover=function(a){this.hideOnHover=a;
};
mxTooltipHandler.prototype.init=function(){if(document.body!=null){this.div=document.createElement("div");
this.div.className="mxTooltip";
this.div.style.visibility="hidden";
document.body.appendChild(this.div);
mxEvent.addListener(this.div,"mousedown",mxUtils.bind(this,function(a){this.hideTooltip();
}));
}};
mxTooltipHandler.prototype.mouseDown=function(a,b){this.reset(b,false);
this.hideTooltip();
};
mxTooltipHandler.prototype.mouseMove=function(a,b){if(b.getX()!=this.lastX||b.getY()!=this.lastY){this.reset(b,true);
if(this.isHideOnHover()||b.getState()!=this.state||(b.getSource()!=this.node&&(!this.stateSource||(b.getState()!=null&&this.stateSource==(b.isSource(b.getState().shape)||!b.isSource(b.getState().text)))))){this.hideTooltip();
}}this.lastX=b.getX();
this.lastY=b.getY();
};
mxTooltipHandler.prototype.mouseUp=function(a,b){this.reset(b,true);
this.hideTooltip();
};
mxTooltipHandler.prototype.resetTimer=function(){if(this.thread!=null){window.clearTimeout(this.thread);
this.thread=null;
}};
mxTooltipHandler.prototype.reset=function(d,b){this.resetTimer();
if(b&&this.isEnabled()&&d.getState()!=null&&(this.div==null||this.div.style.visibility=="hidden")){var e=d.getState();
var c=d.getSource();
var a=d.getX();
var g=d.getY();
var f=d.isSource(e.shape)||d.isSource(e.text);
this.thread=window.setTimeout(mxUtils.bind(this,function(){if(!this.graph.isEditing()&&!this.graph.panningHandler.isMenuShowing()){var h=this.graph.getTooltip(e,c,a,g);
this.show(h,a,g);
this.state=e;
this.node=c;
this.stateSource=f;
}}),this.delay);
}};
mxTooltipHandler.prototype.hide=function(){this.resetTimer();
this.hideTooltip();
};
mxTooltipHandler.prototype.hideTooltip=function(){if(this.div!=null){this.div.style.visibility="hidden";
}};
mxTooltipHandler.prototype.show=function(c,a,d){if(c!=null&&c.length>0){if(this.div==null){this.init();
}var b=mxUtils.getScrollOrigin();
this.div.style.zIndex=this.zIndex;
this.div.style.left=(a+b.x)+"px";
this.div.style.top=(d+mxConstants.TOOLTIP_VERTICAL_OFFSET+b.y)+"px";
if(!mxUtils.isNode(c)){this.div.innerHTML=c.replace(/\n/g,"<br>");
}else{this.div.innerHTML="";
this.div.appendChild(c);
}this.div.style.visibility="";
mxUtils.fit(this.div);
}};
mxTooltipHandler.prototype.destroy=function(){this.graph.removeMouseListener(this);
mxEvent.release(this.div);
if(this.div!=null&&this.div.parentNode!=null){this.div.parentNode.removeChild(this.div);
}this.div=null;
};
function mxCellTracker(c,b,a){mxCellMarker.call(this,c,b);
this.graph.addMouseListener(this);
if(a!=null){this.getCell=a;
}if(mxClient.IS_IE){mxEvent.addListener(window,"unload",mxUtils.bind(this,function(){this.destroy();
}));
}}mxCellTracker.prototype=new mxCellMarker();
mxCellTracker.prototype.constructor=mxCellTracker;
mxCellTracker.prototype.mouseDown=function(a,b){};
mxCellTracker.prototype.mouseMove=function(a,b){if(this.isEnabled()){this.process(b);
}};
mxCellTracker.prototype.mouseUp=function(a,b){this.reset();
};
mxCellTracker.prototype.destroy=function(){if(!this.destroyed){this.destroyed=true;
this.graph.removeMouseListener(this);
mxCellMarker.prototype.destroy.apply(this);
}};
function mxCellHighlight(a,c,b){if(a!=null){this.graph=a;
this.highlightColor=(c!=null)?c:mxConstants.DEFAULT_VALID_COLOR;
this.strokeWidth=(b!=null)?b:mxConstants.HIGHLIGHT_STROKEWIDTH;
this.repaintHandler=mxUtils.bind(this,function(){this.repaint();
});
this.graph.getView().addListener(mxEvent.SCALE,this.repaintHandler);
this.graph.getView().addListener(mxEvent.TRANSLATE,this.repaintHandler);
this.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE,this.repaintHandler);
this.graph.getModel().addListener(mxEvent.CHANGE,this.repaintHandler);
this.resetHandler=mxUtils.bind(this,function(){this.hide();
});
this.graph.getView().addListener(mxEvent.DOWN,this.resetHandler);
this.graph.getView().addListener(mxEvent.UP,this.resetHandler);
}}mxCellHighlight.prototype.keepOnTop=false;
mxCellHighlight.prototype.graph=true;
mxCellHighlight.prototype.state=null;
mxCellHighlight.prototype.spacing=2;
mxCellHighlight.prototype.resetHandler=null;
mxCellHighlight.prototype.setHighlightColor=function(a){this.highlightColor=a;
if(this.shape!=null){if(this.shape.dialect==mxConstants.DIALECT_SVG){this.shape.innerNode.setAttribute("stroke",a);
}else{if(this.shape.dialect==mxConstants.DIALECT_VML){this.shape.node.strokecolor=a;
}}}};
mxCellHighlight.prototype.drawHighlight=function(){this.shape=this.createShape();
this.repaint();
if(!this.keepOnTop&&this.shape.node.parentNode.firstChild!=this.shape.node){this.shape.node.parentNode.insertBefore(this.shape.node,this.shape.node.parentNode.firstChild);
}if(this.graph.model.isEdge(this.state.cell)){mxUtils.repaintGraph(this.graph,this.shape.points[0]);
}};
mxCellHighlight.prototype.createShape=function(){var a=null;
if(this.graph.model.isEdge(this.state.cell)){a=new mxPolyline(this.state.absolutePoints,this.highlightColor,this.strokeWidth);
}else{a=new mxRectangleShape(new mxRectangle(),null,this.highlightColor,this.strokeWidth);
}a.dialect=(this.graph.dialect!=mxConstants.DIALECT_SVG)?mxConstants.DIALECT_VML:mxConstants.DIALECT_SVG;
a.init(this.graph.getView().getOverlayPane());
mxEvent.redirectMouseEvents(a.node,this.graph,this.state);
return a;
};
mxCellHighlight.prototype.repaint=function(){if(this.state!=null&&this.shape!=null){if(this.graph.model.isEdge(this.state.cell)){this.shape.points=this.state.absolutePoints;
}else{this.shape.bounds=new mxRectangle(this.state.x-this.spacing,this.state.y-this.spacing,this.state.width+2*this.spacing,this.state.height+2*this.spacing);
}if(this.state.shape!=null){this.shape.setCursor(this.state.shape.getCursor());
}var c=(!this.graph.model.isEdge(this.state.cell))?Number(this.state.style[mxConstants.STYLE_ROTATION]||"0"):0;
if(this.shape.dialect==mxConstants.DIALECT_SVG){this.shape.node.setAttribute("style","pointer-events:none;");
if(c!=0){var a=this.state.getCenterX();
var d=this.state.getCenterY();
var b="rotate("+c+" "+a+" "+d+")";
this.shape.node.setAttribute("transform",b);
}}else{this.shape.node.style.background="";
if(c!=0){this.shape.node.rotation=c;
}}this.shape.redraw();
}};
mxCellHighlight.prototype.hide=function(){this.highlight(null);
};
mxCellHighlight.prototype.highlight=function(a){if(this.state!=a){if(this.shape!=null){this.shape.destroy();
this.shape=null;
}this.state=a;
if(this.state!=null){this.drawHighlight();
}}};
mxCellHighlight.prototype.destroy=function(){this.graph.getView().removeListener(this.repaintHandler);
this.graph.getModel().removeListener(this.repaintHandler);
this.graph.getView().removeListener(this.resetHandler);
this.graph.getModel().removeListener(this.resetHandler);
if(this.shape!=null){this.shape.destroy();
this.shape=null;
}};
function mxDefaultKeyHandler(b){if(b!=null){this.editor=b;
this.handler=new mxKeyHandler(b.graph);
var a=this.handler.escape;
this.handler.escape=function(c){a.apply(this,arguments);
b.hideProperties();
b.fireEvent(new mxEventObject(mxEvent.ESCAPE,"event",c));
};
}}mxDefaultKeyHandler.prototype.editor=null;
mxDefaultKeyHandler.prototype.handler=null;
mxDefaultKeyHandler.prototype.bindAction=function(a,b,d){var c=mxUtils.bind(this,function(){this.editor.execute(b);
});
if(d){this.handler.bindControlKey(a,c);
}else{this.handler.bindKey(a,c);
}};
mxDefaultKeyHandler.prototype.destroy=function(){this.handler.destroy();
this.handler=null;
};
function mxDefaultPopupMenu(a){this.config=a;
}mxDefaultPopupMenu.prototype.imageBasePath=null;
mxDefaultPopupMenu.prototype.config=null;
mxDefaultPopupMenu.prototype.createMenu=function(c,f,a,b){if(this.config!=null){var e=this.createConditions(c,a,b);
var d=this.config.firstChild;
this.addItems(c,f,a,b,e,d,null);
}};
mxDefaultPopupMenu.prototype.addItems=function(editor,menu,cell,evt,conditions,item,parent){var addSeparator=false;
while(item!=null){if(item.nodeName=="add"){var condition=item.getAttribute("if");
if(condition==null||conditions[condition]){var as=item.getAttribute("as");
as=mxResources.get(as)||as;
var funct=mxUtils.eval(mxUtils.getTextContent(item));
var action=item.getAttribute("action");
var icon=item.getAttribute("icon");
var iconCls=item.getAttribute("iconCls");
if(addSeparator){menu.addSeparator(parent);
addSeparator=false;
}if(icon!=null&&this.imageBasePath){icon=this.imageBasePath+icon;
}var row=this.addAction(menu,editor,as,icon,funct,action,cell,parent,iconCls);
this.addItems(editor,menu,cell,evt,conditions,item.firstChild,row);
}}else{if(item.nodeName=="separator"){addSeparator=true;
}}item=item.nextSibling;
}};
mxDefaultPopupMenu.prototype.addAction=function(b,e,d,g,a,c,i,h,k){var f=function(l){if(typeof(a)=="function"){a.call(e,e,i,l);
}if(c!=null){e.execute(c,i,l);
}};
return b.addItem(d,g,f,h,k);
};
mxDefaultPopupMenu.prototype.createConditions=function(editor,cell,evt){var model=editor.graph.getModel();
var childCount=model.getChildCount(cell);
var conditions=[];
conditions.nocell=cell==null;
conditions.ncells=editor.graph.getSelectionCount()>1;
conditions.notRoot=model.getRoot()!=model.getParent(editor.graph.getDefaultParent());
conditions.cell=cell!=null;
var isCell=cell!=null&&editor.graph.getSelectionCount()==1;
conditions.nonEmpty=isCell&&childCount>0;
conditions.expandable=isCell&&editor.graph.isCellFoldable(cell,false);
conditions.collapsable=isCell&&editor.graph.isCellFoldable(cell,true);
conditions.validRoot=isCell&&editor.graph.isValidRoot(cell);
conditions.emptyValidRoot=conditions.validRoot&&childCount==0;
conditions.swimlane=isCell&&editor.graph.isSwimlane(cell);
var condNodes=this.config.getElementsByTagName("condition");
for(var i=0;
i<condNodes.length;
i++){var funct=mxUtils.eval(mxUtils.getTextContent(condNodes[i]));
var name=condNodes[i].getAttribute("name");
if(name!=null&&typeof(funct)=="function"){conditions[name]=funct(editor,cell,evt);
}}return conditions;
};
function mxDefaultToolbar(a,b){this.editor=b;
if(a!=null&&b!=null){this.init(a);
}}mxDefaultToolbar.prototype.editor=null;
mxDefaultToolbar.prototype.toolbar=null;
mxDefaultToolbar.prototype.resetHandler=null;
mxDefaultToolbar.prototype.spacing=4;
mxDefaultToolbar.prototype.connectOnDrop=false;
mxDefaultToolbar.prototype.init=function(a){if(a!=null){this.toolbar=new mxToolbar(a);
this.toolbar.addListener(mxEvent.SELECT,mxUtils.bind(this,function(d,c){var b=c.getProperty("function");
if(b!=null){this.editor.insertFunction=mxUtils.bind(this,function(){b.apply(this,arguments);
this.toolbar.resetMode();
});
}else{this.editor.insertFunction=null;
}}));
this.resetHandler=mxUtils.bind(this,function(){if(this.toolbar!=null){this.toolbar.resetMode(true);
}});
this.editor.graph.addListener(mxEvent.DOUBLE_CLICK,this.resetHandler);
this.editor.addListener(mxEvent.ESCAPE,this.resetHandler);
}};
mxDefaultToolbar.prototype.addItem=function(d,a,c,b){var e=mxUtils.bind(this,function(){if(c!=null&&c.length>0){this.editor.execute(c);
}});
return this.toolbar.addItem(d,a,e,b);
};
mxDefaultToolbar.prototype.addSeparator=function(a){a=a||mxClient.imageBasePath+"/separator.gif";
this.toolbar.addSeparator(a);
};
mxDefaultToolbar.prototype.addCombo=function(){return this.toolbar.addCombo();
};
mxDefaultToolbar.prototype.addActionCombo=function(a){return this.toolbar.addActionCombo(a);
};
mxDefaultToolbar.prototype.addActionOption=function(b,c,a){var d=mxUtils.bind(this,function(){this.editor.execute(a);
});
this.addOption(b,c,d);
};
mxDefaultToolbar.prototype.addOption=function(b,c,a){return this.toolbar.addOption(b,c,a);
};
mxDefaultToolbar.prototype.addMode=function(e,b,d,c,a){var f=mxUtils.bind(this,function(){this.editor.setMode(d);
if(a!=null){a(this.editor);
}});
return this.toolbar.addSwitchMode(e,b,f,c);
};
mxDefaultToolbar.prototype.addPrototype=function(h,g,k,b,i,e){var d=function(){if(typeof(k)=="function"){return k();
}else{if(k!=null){return k.clone();
}}return null;
};
var f=mxUtils.bind(this,function(m,l){if(typeof(i)=="function"){i(this.editor,d(),m,l);
}else{this.drop(d(),m,l);
}this.toolbar.resetMode();
mxEvent.consume(m);
});
var c=this.toolbar.addMode(h,g,f,b,null,e);
var a=function(n,m,l){f(m,l);
};
this.installDropHandler(c,a);
return c;
};
mxDefaultToolbar.prototype.drop=function(d,a,e){var c=this.editor.graph;
var b=c.getModel();
if(e==null||b.isEdge(e)||!this.connectOnDrop||!c.isCellConnectable(e)){while(e!=null&&!c.isValidDropTarget(e,[d],a)){e=b.getParent(e);
}this.insert(d,a,e);
}else{this.connect(d,a,e);
}};
mxDefaultToolbar.prototype.insert=function(d,b,f){var c=this.editor.graph;
if(c.canImportCell(d)){var a=mxEvent.getClientX(b);
var g=mxEvent.getClientY(b);
var e=mxUtils.convertPoint(c.container,a,g);
if(c.isSplitEnabled()&&c.isSplitTarget(f,[d],b)){return c.splitEdge(f,[d],null,e.x,e.y);
}else{return this.editor.addVertex(f,d,e.x,e.y);
}}return null;
};
mxDefaultToolbar.prototype.connect=function(f,m,a){var n=this.editor.graph;
var e=n.getModel();
if(a!=null&&n.isCellConnectable(f)&&n.isEdgeValid(null,a,f)){var b=null;
e.beginUpdate();
try{var d=e.getGeometry(a);
var h=e.getGeometry(f).clone();
h.x=d.x+(d.width-h.width)/2;
h.y=d.y+(d.height-h.height)/2;
var c=this.spacing*n.gridSize;
var i=e.getDirectedEdgeCount(a,true)*20;
if(this.editor.horizontalFlow){h.x+=(h.width+d.width)/2+c+i;
}else{h.y+=(h.height+d.height)/2+c+i;
}f.setGeometry(h);
var l=e.getParent(a);
n.addCell(f,l);
n.constrainChild(f);
b=this.editor.createEdge(a,f);
if(e.getGeometry(b)==null){var k=new mxGeometry();
k.relative=true;
e.setGeometry(b,k);
}n.addEdge(b,l,a,f);
}finally{e.endUpdate();
}n.setSelectionCells([f,b]);
n.scrollCellToVisible(f);
}};
mxDefaultToolbar.prototype.installDropHandler=function(c,b){var d=document.createElement("img");
d.setAttribute("src",c.getAttribute("src"));
var a=mxUtils.bind(this,function(e){d.style.width=(2*c.offsetWidth)+"px";
d.style.height=(2*c.offsetHeight)+"px";
mxUtils.makeDraggable(c,this.editor.graph,b,d);
mxEvent.removeListener(d,"load",a);
});
if(mxClient.IS_IE){a();
}else{mxEvent.addListener(d,"load",a);
}};
mxDefaultToolbar.prototype.destroy=function(){if(this.resetHandler!=null){this.editor.graph.removeListener("dblclick",this.resetHandler);
this.editor.removeListener("escape",this.resetHandler);
this.resetHandler=null;
}if(this.toolbar!=null){this.toolbar.destroy();
this.toolbar=null;
}};
function mxEditor(a){this.actions=[];
this.addActions();
if(document.body!=null){this.cycleAttributeValues=[];
this.popupHandler=new mxDefaultPopupMenu();
this.undoManager=new mxUndoManager();
this.graph=this.createGraph();
this.toolbar=this.createToolbar();
this.keyHandler=new mxDefaultKeyHandler(this);
this.configure(a);
this.graph.swimlaneIndicatorColorAttribute=this.cycleAttributeName;
if(!mxClient.IS_LOCAL&&this.urlInit!=null){this.session=this.createSession();
}if(this.onInit!=null){this.onInit();
}if(mxClient.IS_IE){mxEvent.addListener(window,"unload",mxUtils.bind(this,function(){this.destroy();
}));
}}}if(mxLoadResources){mxResources.add(mxClient.basePath+"/resources/editor");
}mxEditor.prototype=new mxEventSource();
mxEditor.prototype.constructor=mxEditor;
mxEditor.prototype.askZoomResource=(mxClient.language!="none")?"askZoom":"";
mxEditor.prototype.lastSavedResource=(mxClient.language!="none")?"lastSaved":"";
mxEditor.prototype.currentFileResource=(mxClient.language!="none")?"currentFile":"";
mxEditor.prototype.propertiesResource=(mxClient.language!="none")?"properties":"";
mxEditor.prototype.tasksResource=(mxClient.language!="none")?"tasks":"";
mxEditor.prototype.helpResource=(mxClient.language!="none")?"help":"";
mxEditor.prototype.outlineResource=(mxClient.language!="none")?"outline":"";
mxEditor.prototype.outline=null;
mxEditor.prototype.graph=null;
mxEditor.prototype.graphRenderHint=null;
mxEditor.prototype.toolbar=null;
mxEditor.prototype.session=null;
mxEditor.prototype.status=null;
mxEditor.prototype.popupHandler=null;
mxEditor.prototype.undoManager=null;
mxEditor.prototype.keyHandler=null;
mxEditor.prototype.actions=null;
mxEditor.prototype.dblClickAction="edit";
mxEditor.prototype.swimlaneRequired=false;
mxEditor.prototype.disableContextMenu=true;
mxEditor.prototype.insertFunction=null;
mxEditor.prototype.forcedInserting=false;
mxEditor.prototype.templates=null;
mxEditor.prototype.defaultEdge=null;
mxEditor.prototype.defaultEdgeStyle=null;
mxEditor.prototype.defaultGroup=null;
mxEditor.prototype.groupBorderSize=null;
mxEditor.prototype.filename=null;
mxEditor.prototype.linefeed="&#xa;";
mxEditor.prototype.postParameterName="xml";
mxEditor.prototype.escapePostData=true;
mxEditor.prototype.urlPost=null;
mxEditor.prototype.urlImage=null;
mxEditor.prototype.urlInit=null;
mxEditor.prototype.urlNotify=null;
mxEditor.prototype.urlPoll=null;
mxEditor.prototype.horizontalFlow=false;
mxEditor.prototype.layoutDiagram=false;
mxEditor.prototype.swimlaneSpacing=0;
mxEditor.prototype.maintainSwimlanes=false;
mxEditor.prototype.layoutSwimlanes=false;
mxEditor.prototype.cycleAttributeValues=null;
mxEditor.prototype.cycleAttributeIndex=0;
mxEditor.prototype.cycleAttributeName="fillColor";
mxEditor.prototype.tasks=null;
mxEditor.prototype.tasksWindowImage=null;
mxEditor.prototype.tasksTop=20;
mxEditor.prototype.help=null;
mxEditor.prototype.helpWindowImage=null;
mxEditor.prototype.urlHelp=null;
mxEditor.prototype.helpWidth=300;
mxEditor.prototype.helpHeight=260;
mxEditor.prototype.propertiesWidth=240;
mxEditor.prototype.propertiesHeight=null;
mxEditor.prototype.movePropertiesDialog=false;
mxEditor.prototype.validating=false;
mxEditor.prototype.modified=false;
mxEditor.prototype.isModified=function(){return this.modified;
};
mxEditor.prototype.setModified=function(a){this.modified=a;
};
mxEditor.prototype.addActions=function(){this.addAction("save",function(a){a.save();
});
this.addAction("print",function(a){var b=new mxPrintPreview(a.graph,1);
b.open();
});
this.addAction("show",function(a){mxUtils.show(a.graph,null,10,10);
});
this.addAction("exportImage",function(c){var b=c.getUrlImage();
if(b==null||mxClient.IS_LOCAL){c.execute("show");
}else{var d=mxUtils.getViewXml(c.graph,1);
var a=mxUtils.getXml(d,"\n");
mxUtils.submit(b,c.postParameterName+"="+encodeURIComponent(a),document,"_blank");
}});
this.addAction("refresh",function(a){a.graph.refresh();
});
this.addAction("cut",function(a){if(a.graph.isEnabled()){mxClipboard.cut(a.graph);
}});
this.addAction("copy",function(a){if(a.graph.isEnabled()){mxClipboard.copy(a.graph);
}});
this.addAction("paste",function(a){if(a.graph.isEnabled()){mxClipboard.paste(a.graph);
}});
this.addAction("delete",function(a){if(a.graph.isEnabled()){a.graph.removeCells();
}});
this.addAction("group",function(a){if(a.graph.isEnabled()){a.graph.setSelectionCell(a.groupCells());
}});
this.addAction("ungroup",function(a){if(a.graph.isEnabled()){a.graph.setSelectionCells(a.graph.ungroupCells());
}});
this.addAction("removeFromParent",function(a){if(a.graph.isEnabled()){a.graph.removeCellsFromParent();
}});
this.addAction("undo",function(a){if(a.graph.isEnabled()){a.undo();
}});
this.addAction("redo",function(a){if(a.graph.isEnabled()){a.redo();
}});
this.addAction("zoomIn",function(a){a.graph.zoomIn();
});
this.addAction("zoomOut",function(a){a.graph.zoomOut();
});
this.addAction("actualSize",function(a){a.graph.zoomActual();
});
this.addAction("fit",function(a){a.graph.fit();
});
this.addAction("showProperties",function(b,a){b.showProperties(a);
});
this.addAction("selectAll",function(a){if(a.graph.isEnabled()){a.graph.selectAll();
}});
this.addAction("selectNone",function(a){if(a.graph.isEnabled()){a.graph.clearSelection();
}});
this.addAction("selectVertices",function(a){if(a.graph.isEnabled()){a.graph.selectVertices();
}});
this.addAction("selectEdges",function(a){if(a.graph.isEnabled()){a.graph.selectEdges();
}});
this.addAction("edit",function(b,a){if(b.graph.isEnabled()&&b.graph.isCellEditable(a)){b.graph.startEditingAtCell(a);
}});
this.addAction("toBack",function(b,a){if(b.graph.isEnabled()){b.graph.orderCells(true);
}});
this.addAction("toFront",function(b,a){if(b.graph.isEnabled()){b.graph.orderCells(false);
}});
this.addAction("enterGroup",function(b,a){b.graph.enterGroup(a);
});
this.addAction("exitGroup",function(a){a.graph.exitGroup();
});
this.addAction("home",function(a){a.graph.home();
});
this.addAction("selectPrevious",function(a){if(a.graph.isEnabled()){a.graph.selectPreviousCell();
}});
this.addAction("selectNext",function(a){if(a.graph.isEnabled()){a.graph.selectNextCell();
}});
this.addAction("selectParent",function(a){if(a.graph.isEnabled()){a.graph.selectParentCell();
}});
this.addAction("selectChild",function(a){if(a.graph.isEnabled()){a.graph.selectChildCell();
}});
this.addAction("collapse",function(a){if(a.graph.isEnabled()){a.graph.foldCells(true);
}});
this.addAction("collapseAll",function(b){if(b.graph.isEnabled()){var a=b.graph.getChildVertices();
b.graph.foldCells(true,false,a);
}});
this.addAction("expand",function(a){if(a.graph.isEnabled()){a.graph.foldCells(false);
}});
this.addAction("expandAll",function(b){if(b.graph.isEnabled()){var a=b.graph.getChildVertices();
b.graph.foldCells(false,false,a);
}});
this.addAction("bold",function(a){if(a.graph.isEnabled()){a.graph.toggleCellStyleFlags(mxConstants.STYLE_FONTSTYLE,mxConstants.FONT_BOLD);
}});
this.addAction("italic",function(a){if(a.graph.isEnabled()){a.graph.toggleCellStyleFlags(mxConstants.STYLE_FONTSTYLE,mxConstants.FONT_ITALIC);
}});
this.addAction("underline",function(a){if(a.graph.isEnabled()){a.graph.toggleCellStyleFlags(mxConstants.STYLE_FONTSTYLE,mxConstants.FONT_UNDERLINE);
}});
this.addAction("shadow",function(a){if(a.graph.isEnabled()){a.graph.toggleCellStyleFlags(mxConstants.STYLE_FONTSTYLE,mxConstants.FONT_SHADOW);
}});
this.addAction("alignCellsLeft",function(a){if(a.graph.isEnabled()){a.graph.alignCells(mxConstants.ALIGN_LEFT);
}});
this.addAction("alignCellsCenter",function(a){if(a.graph.isEnabled()){a.graph.alignCells(mxConstants.ALIGN_CENTER);
}});
this.addAction("alignCellsRight",function(a){if(a.graph.isEnabled()){a.graph.alignCells(mxConstants.ALIGN_RIGHT);
}});
this.addAction("alignCellsTop",function(a){if(a.graph.isEnabled()){a.graph.alignCells(mxConstants.ALIGN_TOP);
}});
this.addAction("alignCellsMiddle",function(a){if(a.graph.isEnabled()){a.graph.alignCells(mxConstants.ALIGN_MIDDLE);
}});
this.addAction("alignCellsBottom",function(a){if(a.graph.isEnabled()){a.graph.alignCells(mxConstants.ALIGN_BOTTOM);
}});
this.addAction("alignFontLeft",function(a){a.graph.setCellStyles(mxConstants.STYLE_ALIGN,mxConstants.ALIGN_LEFT);
});
this.addAction("alignFontCenter",function(a){if(a.graph.isEnabled()){a.graph.setCellStyles(mxConstants.STYLE_ALIGN,mxConstants.ALIGN_CENTER);
}});
this.addAction("alignFontRight",function(a){if(a.graph.isEnabled()){a.graph.setCellStyles(mxConstants.STYLE_ALIGN,mxConstants.ALIGN_RIGHT);
}});
this.addAction("alignFontTop",function(a){if(a.graph.isEnabled()){a.graph.setCellStyles(mxConstants.STYLE_VERTICAL_ALIGN,mxConstants.ALIGN_TOP);
}});
this.addAction("alignFontMiddle",function(a){if(a.graph.isEnabled()){a.graph.setCellStyles(mxConstants.STYLE_VERTICAL_ALIGN,mxConstants.ALIGN_MIDDLE);
}});
this.addAction("alignFontBottom",function(a){if(a.graph.isEnabled()){a.graph.setCellStyles(mxConstants.STYLE_VERTICAL_ALIGN,mxConstants.ALIGN_BOTTOM);
}});
this.addAction("zoom",function(a){var b=a.graph.getView().scale*100;
var c=parseFloat(mxUtils.prompt(mxResources.get(a.askZoomResource)||a.askZoomResource,b))/100;
if(!isNaN(c)){a.graph.getView().setScale(c);
}});
this.addAction("toggleTasks",function(a){if(a.tasks!=null){a.tasks.setVisible(!a.tasks.isVisible());
}else{a.showTasks();
}});
this.addAction("toggleHelp",function(a){if(a.help!=null){a.help.setVisible(!a.help.isVisible());
}else{a.showHelp();
}});
this.addAction("toggleOutline",function(a){if(a.outline==null){a.showOutline();
}else{a.outline.setVisible(!a.outline.isVisible());
}});
this.addAction("toggleConsole",function(a){mxLog.setVisible(!mxLog.isVisible());
});
};
mxEditor.prototype.createSession=function(){var a=mxUtils.bind(this,function(b){this.fireEvent(new mxEventObject(mxEvent.SESSION,"session",b));
});
return this.connect(this.urlInit,this.urlPoll,this.urlNotify,a);
};
mxEditor.prototype.configure=function(a){if(a!=null){var b=new mxCodec(a.ownerDocument);
b.decode(a,this);
this.resetHistory();
}};
mxEditor.prototype.resetFirstTime=function(){document.cookie="mxgraph=seen; expires=Fri, 27 Jul 2001 02:47:11 UTC; path=/";
};
mxEditor.prototype.resetHistory=function(){this.lastSnapshot=new Date().getTime();
this.undoManager.clear();
this.ignoredChanges=0;
this.setModified(false);
};
mxEditor.prototype.addAction=function(b,a){this.actions[b]=a;
};
mxEditor.prototype.execute=function(d,a,b){var f=this.actions[d];
if(f!=null){try{var c=arguments;
c[0]=this;
f.apply(this,c);
}catch(g){mxUtils.error("Cannot execute "+d+": "+g.message,280,true);
throw g;
}}else{mxUtils.error("Cannot find action "+d,280,true);
}};
mxEditor.prototype.addTemplate=function(a,b){this.templates[a]=b;
};
mxEditor.prototype.getTemplate=function(a){return this.templates[a];
};
mxEditor.prototype.createGraph=function(){var a=new mxGraph(null,null,this.graphRenderHint);
a.setTooltips(true);
a.setPanning(true);
this.installDblClickHandler(a);
this.installUndoHandler(a);
this.installDrillHandler(a);
this.installChangeHandler(a);
this.installInsertHandler(a);
a.panningHandler.factoryMethod=mxUtils.bind(this,function(d,b,c){return this.createPopupMenu(d,b,c);
});
a.connectionHandler.factoryMethod=mxUtils.bind(this,function(b,c){return this.createEdge(b,c);
});
this.createSwimlaneManager(a);
this.createLayoutManager(a);
return a;
};
mxEditor.prototype.createSwimlaneManager=function(b){var a=new mxSwimlaneManager(b,false);
a.isHorizontal=mxUtils.bind(this,function(){return this.horizontalFlow;
});
a.isEnabled=mxUtils.bind(this,function(){return this.maintainSwimlanes;
});
return a;
};
mxEditor.prototype.createLayoutManager=function(c){var b=new mxLayoutManager(c);
var a=this;
b.getLayout=function(d){var f=null;
var e=a.graph.getModel();
if(e.getParent(d)!=null){if(a.layoutSwimlanes&&c.isSwimlane(d)){if(a.swimlaneLayout==null){a.swimlaneLayout=a.createSwimlaneLayout();
}f=a.swimlaneLayout;
}else{if(a.layoutDiagram&&(c.isValidRoot(d)||e.getParent(e.getParent(d))==null)){if(a.diagramLayout==null){a.diagramLayout=a.createDiagramLayout();
}f=a.diagramLayout;
}}}return f;
};
return b;
};
mxEditor.prototype.setGraphContainer=function(a){if(this.graph.container==null){this.graph.init(a);
this.rubberband=new mxRubberband(this.graph);
if(this.disableContextMenu){mxEvent.disableContextMenu(a);
}if(mxClient.IS_QUIRKS){new mxDivResizer(a);
}}};
mxEditor.prototype.installDblClickHandler=function(a){a.addListener(mxEvent.DOUBLE_CLICK,mxUtils.bind(this,function(d,c){var b=c.getProperty("cell");
if(b!=null&&a.isEnabled()&&this.dblClickAction!=null){this.execute(this.dblClickAction,b);
c.consume();
}}));
};
mxEditor.prototype.installUndoHandler=function(b){var a=mxUtils.bind(this,function(e,d){var f=d.getProperty("edit");
this.undoManager.undoableEditHappened(f);
});
b.getModel().addListener(mxEvent.UNDO,a);
b.getView().addListener(mxEvent.UNDO,a);
var c=function(e,d){var f=d.getProperty("edit").changes;
b.setSelectionCells(b.getSelectionCellsForChanges(f));
};
this.undoManager.addListener(mxEvent.UNDO,c);
this.undoManager.addListener(mxEvent.REDO,c);
};
mxEditor.prototype.installDrillHandler=function(b){var a=mxUtils.bind(this,function(c){this.fireEvent(new mxEventObject(mxEvent.ROOT));
});
b.getView().addListener(mxEvent.DOWN,a);
b.getView().addListener(mxEvent.UP,a);
};
mxEditor.prototype.installChangeHandler=function(b){var a=mxUtils.bind(this,function(e,c){this.setModified(true);
if(this.validating==true){b.validateGraph();
}var f=c.getProperty("edit").changes;
for(var d=0;
d<f.length;
d++){var g=f[d];
if(g instanceof mxRootChange||(g instanceof mxValueChange&&g.cell==this.graph.model.root)||(g instanceof mxCellAttributeChange&&g.cell==this.graph.model.root)){this.fireEvent(new mxEventObject(mxEvent.ROOT));
break;
}}});
b.getModel().addListener(mxEvent.CHANGE,a);
};
mxEditor.prototype.installInsertHandler=function(b){var a=this;
var c={mouseDown:function(d,e){if(a.insertFunction!=null&&!e.isPopupTrigger()&&(a.forcedInserting||e.getState()==null)){a.graph.clearSelection();
a.insertFunction(e.getEvent(),e.getCell());
this.isActive=true;
e.consume();
}},mouseMove:function(d,e){if(this.isActive){e.consume();
}},mouseUp:function(d,e){if(this.isActive){this.isActive=false;
e.consume();
}}};
b.addMouseListener(c);
};
mxEditor.prototype.createDiagramLayout=function(){var a=this.graph.gridSize;
var b=new mxStackLayout(this.graph,!this.horizontalFlow,this.swimlaneSpacing,2*a,2*a);
b.isVertexIgnored=function(c){return !b.graph.isSwimlane(c);
};
return b;
};
mxEditor.prototype.createSwimlaneLayout=function(){return new mxCompactTreeLayout(this.graph,this.horizontalFlow);
};
mxEditor.prototype.createToolbar=function(){return new mxDefaultToolbar(null,this);
};
mxEditor.prototype.setToolbarContainer=function(a){this.toolbar.init(a);
if(mxClient.IS_QUIRKS){new mxDivResizer(a);
}};
mxEditor.prototype.setStatusContainer=function(a){if(this.status==null){this.status=a;
this.addListener(mxEvent.SAVE,mxUtils.bind(this,function(){var b=new Date().toLocaleString();
this.setStatus((mxResources.get(this.lastSavedResource)||this.lastSavedResource)+": "+b);
}));
this.addListener(mxEvent.OPEN,mxUtils.bind(this,function(){this.setStatus((mxResources.get(this.currentFileResource)||this.currentFileResource)+": "+this.filename);
}));
if(mxClient.IS_QUIRKS){new mxDivResizer(a);
}}};
mxEditor.prototype.setStatus=function(a){if(this.status!=null&&a!=null){this.status.innerHTML=a;
}};
mxEditor.prototype.setTitleContainer=function(a){this.addListener(mxEvent.ROOT,mxUtils.bind(this,function(b){a.innerHTML=this.getTitle();
}));
if(mxClient.IS_QUIRKS){new mxDivResizer(a);
}};
mxEditor.prototype.treeLayout=function(a,b){if(a!=null){var c=new mxCompactTreeLayout(this.graph,b);
c.execute(a);
}};
mxEditor.prototype.getTitle=function(){var d="";
var c=this.graph;
var a=c.getCurrentRoot();
while(a!=null&&c.getModel().getParent(c.getModel().getParent(a))!=null){if(c.isValidRoot(a)){d=" > "+c.convertValueToString(a)+d;
}a=c.getModel().getParent(a);
}var b=this.getRootTitle();
return b+d;
};
mxEditor.prototype.getRootTitle=function(){var a=this.graph.getModel().getRoot();
return this.graph.convertValueToString(a);
};
mxEditor.prototype.undo=function(){this.undoManager.undo();
};
mxEditor.prototype.redo=function(){this.undoManager.redo();
};
mxEditor.prototype.groupCells=function(){var a=(this.groupBorderSize!=null)?this.groupBorderSize:this.graph.gridSize;
return this.graph.groupCells(this.createGroup(),a);
};
mxEditor.prototype.createGroup=function(){var a=this.graph.getModel();
return a.cloneCell(this.defaultGroup);
};
mxEditor.prototype.open=function(a){if(a!=null){var b=mxUtils.load(a).getXml();
this.readGraphModel(b.documentElement);
this.filename=a;
this.fireEvent(new mxEventObject(mxEvent.OPEN,"filename",a));
}};
mxEditor.prototype.readGraphModel=function(a){var b=new mxCodec(a.ownerDocument);
b.decode(a,this.graph.getModel());
this.resetHistory();
};
mxEditor.prototype.save=function(b,a){b=b||this.getUrlPost();
if(b!=null&&b.length>0){var c=this.writeGraphModel(a);
this.postDiagram(b,c);
this.setModified(false);
}this.fireEvent(new mxEventObject(mxEvent.SAVE,"url",b));
};
mxEditor.prototype.postDiagram=function(a,b){if(this.escapePostData){b=encodeURIComponent(b);
}mxUtils.post(a,this.postParameterName+"="+b,mxUtils.bind(this,function(c){this.fireEvent(new mxEventObject(mxEvent.POST,"request",c,"url",a,"data",b));
}));
};
mxEditor.prototype.writeGraphModel=function(b){b=(b!=null)?b:this.linefeed;
var a=new mxCodec();
var c=a.encode(this.graph.getModel());
return mxUtils.getXml(c,b);
};
mxEditor.prototype.getUrlPost=function(){return this.urlPost;
};
mxEditor.prototype.getUrlImage=function(){return this.urlImage;
};
mxEditor.prototype.connect=function(c,b,e,a){var d=null;
if(!mxClient.IS_LOCAL){d=new mxSession(this.graph.getModel(),c,b,e);
d.addListener(mxEvent.RECEIVE,mxUtils.bind(this,function(g,f){var h=f.getProperty("node");
if(h.getAttribute("namespace")!=null){this.resetHistory();
}}));
d.addListener(mxEvent.DISCONNECT,a);
d.addListener(mxEvent.CONNECT,a);
d.addListener(mxEvent.NOTIFY,a);
d.addListener(mxEvent.GET,a);
d.start();
}return d;
};
mxEditor.prototype.swapStyles=function(c,a){var b=this.graph.getStylesheet().styles[a];
this.graph.getView().getStylesheet().putCellStyle(a,this.graph.getStylesheet().styles[c]);
this.graph.getStylesheet().putCellStyle(c,b);
this.graph.refresh();
};
mxEditor.prototype.showProperties=function(b){b=b||this.graph.getSelectionCell();
if(b==null){b=this.graph.getCurrentRoot();
if(b==null){b=this.graph.getModel().getRoot();
}}if(b!=null){this.graph.stopEditing(true);
var e=mxUtils.getOffset(this.graph.container);
var a=e.x+10;
var f=e.y;
if(this.properties!=null&&!this.movePropertiesDialog){a=this.properties.getX();
f=this.properties.getY();
}else{var d=this.graph.getCellBounds(b);
if(d!=null){a+=d.x+Math.min(200,d.width);
f+=d.y;
}}this.hideProperties();
var c=this.createProperties(b);
if(c!=null){this.properties=new mxWindow(mxResources.get(this.propertiesResource)||this.propertiesResource,c,a,f,this.propertiesWidth,this.propertiesHeight,false);
this.properties.setVisible(true);
}}};
mxEditor.prototype.isPropertiesVisible=function(){return this.properties!=null;
};
mxEditor.prototype.createProperties=function(b){var g=this.graph.getModel();
var n=g.getValue(b);
if(mxUtils.isNode(n)){var c=new mxForm("properties");
var k=c.addText("ID",b.getId());
k.setAttribute("readonly","true");
var s=null;
var h=null;
var d=null;
var f=null;
var e=null;
if(g.isVertex(b)){s=g.getGeometry(b);
if(s!=null){h=c.addText("top",s.y);
d=c.addText("left",s.x);
f=c.addText("width",s.width);
e=c.addText("height",s.height);
}}var q=g.getStyle(b);
var p=c.addText("Style",q||"");
var l=n.attributes;
var a=[];
for(var o=0;
o<l.length;
o++){var t=l[o].nodeValue;
a[o]=c.addTextarea(l[o].nodeName,t,(l[o].nodeName=="label")?4:2);
}var m=mxUtils.bind(this,function(){this.hideProperties();
g.beginUpdate();
try{if(s!=null){s=s.clone();
s.x=parseFloat(d.value);
s.y=parseFloat(h.value);
s.width=parseFloat(f.value);
s.height=parseFloat(e.value);
g.setGeometry(b,s);
}if(p.value.length>0){g.setStyle(b,p.value);
}else{g.setStyle(b,null);
}for(var u=0;
u<l.length;
u++){var v=new mxCellAttributeChange(b,l[u].nodeName,a[u].value);
g.execute(v);
}if(this.graph.isAutoSizeCell(b)){this.graph.updateCellSize(b);
}}finally{g.endUpdate();
}});
var r=mxUtils.bind(this,function(){this.hideProperties();
});
c.addButtons(m,r);
return c.table;
}return null;
};
mxEditor.prototype.hideProperties=function(){if(this.properties!=null){this.properties.destroy();
this.properties=null;
}};
mxEditor.prototype.showTasks=function(){if(this.tasks==null){var d=document.createElement("div");
d.style.padding="4px";
d.style.paddingLeft="20px";
var b=document.body.clientWidth;
var c=new mxWindow(mxResources.get(this.tasksResource)||this.tasksResource,d,b-220,this.tasksTop,200);
c.setClosable(true);
c.destroyOnClose=false;
var a=mxUtils.bind(this,function(e){mxEvent.release(d);
d.innerHTML="";
this.createTasks(d);
});
this.graph.getModel().addListener(mxEvent.CHANGE,a);
this.graph.getSelectionModel().addListener(mxEvent.CHANGE,a);
this.graph.addListener(mxEvent.ROOT,a);
if(this.tasksWindowImage!=null){c.setImage(this.tasksWindowImage);
}this.tasks=c;
this.createTasks(d);
}this.tasks.setVisible(true);
};
mxEditor.prototype.refreshTasks=function(a){if(this.tasks!=null){var a=this.tasks.content;
mxEvent.release(a);
a.innerHTML="";
this.createTasks(a);
}};
mxEditor.prototype.createTasks=function(a){};
mxEditor.prototype.showHelp=function(f){if(this.help==null){var e=document.createElement("iframe");
e.setAttribute("src",mxResources.get("urlHelp")||this.urlHelp);
e.setAttribute("height","100%");
e.setAttribute("width","100%");
e.setAttribute("frameBorder","0");
e.style.backgroundColor="white";
var a=document.body.clientWidth;
var c=(document.body.clientHeight||document.documentElement.clientHeight);
var d=new mxWindow(mxResources.get(this.helpResource)||this.helpResource,e,(a-this.helpWidth)/2,(c-this.helpHeight)/3,this.helpWidth,this.helpHeight);
d.setMaximizable(true);
d.setClosable(true);
d.destroyOnClose=false;
d.setResizable(true);
if(this.helpWindowImage!=null){d.setImage(this.helpWindowImage);
}if(mxClient.IS_NS){var b=function(g){var i=d.div.offsetHeight;
e.setAttribute("height",(i-26)+"px");
};
d.addListener(mxEvent.RESIZE_END,b);
d.addListener(mxEvent.MAXIMIZE,b);
d.addListener(mxEvent.NORMALIZE,b);
d.addListener(mxEvent.SHOW,b);
}this.help=d;
}this.help.setVisible(true);
};
mxEditor.prototype.showOutline=function(){var a=this.outline==null;
if(a){var d=document.createElement("div");
d.style.overflow="hidden";
d.style.width="100%";
d.style.height="100%";
d.style.background="white";
d.style.cursor="move";
var c=new mxWindow(mxResources.get(this.outlineResource)||this.outlineResource,d,600,480,200,200,false);
var b=new mxOutline(this.graph,d);
c.setClosable(true);
c.setResizable(true);
c.destroyOnClose=false;
c.addListener(mxEvent.RESIZE_END,function(){b.update();
});
this.outline=c;
this.outline.outline=b;
}this.outline.setVisible(true);
this.outline.outline.update(true);
};
mxEditor.prototype.setMode=function(a){if(a=="select"){this.graph.panningHandler.useLeftButtonForPanning=false;
this.graph.setConnectable(false);
}else{if(a=="connect"){this.graph.panningHandler.useLeftButtonForPanning=false;
this.graph.setConnectable(true);
}else{if(a=="pan"){this.graph.panningHandler.useLeftButtonForPanning=true;
this.graph.setConnectable(false);
}}}};
mxEditor.prototype.createPopupMenu=function(c,a,b){this.popupHandler.createMenu(this,c,a,b);
};
mxEditor.prototype.createEdge=function(c,g){var f=null;
if(this.defaultEdge!=null){var a=this.graph.getModel();
f=a.cloneCell(this.defaultEdge);
}else{f=new mxCell("");
f.setEdge(true);
var d=new mxGeometry();
d.relative=true;
f.setGeometry(d);
}var b=this.getEdgeStyle();
if(b!=null){f.setStyle(b);
}return f;
};
mxEditor.prototype.getEdgeStyle=function(){return this.defaultEdgeStyle;
};
mxEditor.prototype.consumeCycleAttribute=function(a){return(this.cycleAttributeValues!=null&&this.cycleAttributeValues.length>0&&this.graph.isSwimlane(a))?this.cycleAttributeValues[this.cycleAttributeIndex++%this.cycleAttributeValues.length]:null;
};
mxEditor.prototype.cycleAttribute=function(a){if(this.cycleAttributeName!=null){var b=this.consumeCycleAttribute(a);
if(b!=null){a.setStyle(a.getStyle()+";"+this.cycleAttributeName+"="+b);
}}};
mxEditor.prototype.addVertex=function(l,h,k,i){var g=this.graph.getModel();
while(l!=null&&!this.graph.isValidDropTarget(l)){l=g.getParent(l);
}l=(l!=null)?l:this.graph.getSwimlaneAt(k,i);
var d=this.graph.getView().scale;
var f=g.getGeometry(h);
var c=g.getGeometry(l);
if(this.graph.isSwimlane(h)&&!this.graph.swimlaneNesting){l=null;
}else{if(l==null&&this.swimlaneRequired){return null;
}else{if(l!=null&&c!=null){var a=this.graph.getView().getState(l);
if(a!=null){k-=a.origin.x*d;
i-=a.origin.y*d;
if(this.graph.isConstrainedMoving){var b=f.width;
var m=f.height;
var e=a.x+a.width;
if(k+b>e){k-=k+b-e;
}e=a.y+a.height;
if(i+m>e){i-=i+m-e;
}}}else{if(c!=null){k-=c.x*d;
i-=c.y*d;
}}}}}f=f.clone();
f.x=this.graph.snap(k/d-this.graph.getView().translate.x-this.graph.gridSize/2);
f.y=this.graph.snap(i/d-this.graph.getView().translate.y-this.graph.gridSize/2);
h.setGeometry(f);
if(l==null){l=this.graph.getDefaultParent();
}this.cycleAttribute(h);
this.fireEvent(new mxEventObject(mxEvent.BEFORE_ADD_VERTEX,"vertex",h,"parent",l));
g.beginUpdate();
try{h=this.graph.addCell(h,l);
if(h!=null){this.graph.constrainChild(h);
this.fireEvent(new mxEventObject(mxEvent.ADD_VERTEX,"vertex",h));
}}finally{g.endUpdate();
}if(h!=null){this.graph.setSelectionCell(h);
this.graph.scrollCellToVisible(h);
this.fireEvent(new mxEventObject(mxEvent.AFTER_ADD_VERTEX,"vertex",h));
}return h;
};
mxEditor.prototype.destroy=function(){if(!this.destroyed){this.destroyed=true;
if(this.tasks!=null){this.tasks.destroy();
}if(this.outline!=null){this.outline.destroy();
}if(this.properties!=null){this.properties.destroy();
}if(this.keyHandler!=null){this.keyHandler.destroy();
}if(this.rubberband!=null){this.rubberband.destroy();
}if(this.toolbar!=null){this.toolbar.destroy();
}if(this.graph!=null){this.graph.destroy();
}this.status=null;
this.templates=null;
}};
var mxCodecRegistry={codecs:[],aliases:[],register:function(b){if(b!=null){var a=b.getName();
mxCodecRegistry.codecs[a]=b;
var c=mxUtils.getFunctionName(b.template.constructor);
if(c!=a){mxCodecRegistry.addAlias(c,a);
}}return b;
},addAlias:function(b,a){mxCodecRegistry.aliases[b]=a;
},getCodec:function(c){var d=null;
if(c!=null){var a=mxUtils.getFunctionName(c);
var b=mxCodecRegistry.aliases[a];
if(b!=null){a=b;
}d=mxCodecRegistry.codecs[a];
if(d==null){try{d=new mxObjectCodec(new c());
mxCodecRegistry.register(d);
}catch(f){}}}return d;
}};
function mxCodec(a){this.document=a||mxUtils.createXmlDocument();
this.objects=[];
}mxCodec.prototype.document=null;
mxCodec.prototype.objects=null;
mxCodec.prototype.encodeDefaults=false;
mxCodec.prototype.putObject=function(b,a){this.objects[b]=a;
return a;
};
mxCodec.prototype.getObject=function(c){var b=null;
if(c!=null){b=this.objects[c];
if(b==null){b=this.lookup(c);
if(b==null){var a=this.getElementById(c);
if(a!=null){b=this.decode(a);
}}}}return b;
};
mxCodec.prototype.lookup=function(a){return null;
};
mxCodec.prototype.getElementById=function(b,a){a=(a!=null)?a:"id";
return mxUtils.findNodeByAttribute(this.document.documentElement,a,b);
};
mxCodec.prototype.getId=function(a){var b=null;
if(a!=null){b=this.reference(a);
if(b==null&&a instanceof mxCell){b=a.getId();
if(b==null){b=mxCellPath.create(a);
if(b.length==0){b="root";
}}}}return b;
};
mxCodec.prototype.reference=function(a){return null;
};
mxCodec.prototype.encode=function(c){var b=null;
if(c!=null&&c.constructor!=null){var a=mxCodecRegistry.getCodec(c.constructor);
if(a!=null){b=a.encode(this,c);
}else{if(mxUtils.isNode(c)){b=(mxClient.IS_IE)?c.cloneNode(true):this.document.importNode(c,true);
}else{mxLog.warn("mxCodec.encode: No codec for "+mxUtils.getFunctionName(c.constructor));
}}}return b;
};
mxCodec.prototype.decode=function(node,into){var obj=null;
if(node!=null&&node.nodeType==mxConstants.NODETYPE_ELEMENT){var ctor=null;
try{ctor=eval(node.nodeName);
}catch(err){}try{var dec=mxCodecRegistry.getCodec(ctor);
if(dec!=null){obj=dec.decode(this,node,into);
}else{obj=node.cloneNode(true);
obj.removeAttribute("as");
}}catch(err){mxLog.debug("Cannot decode "+node.nodeName+": "+err.message);
}}return obj;
};
mxCodec.prototype.encodeCell=function(b,e,a){e.appendChild(this.encode(b));
if(a==null||a){var c=b.getChildCount();
for(var d=0;
d<c;
d++){this.encodeCell(b.getChildAt(d),e);
}}};
mxCodec.prototype.isCellCodec=function(a){if(a!=null&&typeof(a.isCellCodec)=="function"){return a.isCellCodec();
}return false;
};
mxCodec.prototype.decodeCell=function(c,b){b=(b!=null)?b:true;
var a=null;
if(c!=null&&c.nodeType==mxConstants.NODETYPE_ELEMENT){var e=mxCodecRegistry.getCodec(c.nodeName);
if(!this.isCellCodec(e)){var d=c.firstChild;
while(d!=null&&!this.isCellCodec(e)){e=mxCodecRegistry.getCodec(d.nodeName);
d=d.nextSibling;
}}if(!this.isCellCodec(e)){e=mxCodecRegistry.getCodec(mxCell);
}a=e.decode(this,c);
if(b){this.insertIntoGraph(a);
}}return a;
};
mxCodec.prototype.insertIntoGraph=function(a){var b=a.parent;
var c=a.getTerminal(true);
var d=a.getTerminal(false);
a.setTerminal(null,false);
a.setTerminal(null,true);
a.parent=null;
if(b!=null){b.insert(a);
}if(c!=null){c.insertEdge(a,true);
}if(d!=null){d.insertEdge(a,false);
}};
mxCodec.prototype.setAttribute=function(b,a,c){if(a!=null&&c!=null){b.setAttribute(a,c);
}};
function mxObjectCodec(e,a,d,b){this.template=e;
this.exclude=(a!=null)?a:[];
this.idrefs=(d!=null)?d:[];
this.mapping=(b!=null)?b:[];
this.reverse=new Object();
for(var c in this.mapping){this.reverse[this.mapping[c]]=c;
}}mxObjectCodec.prototype.template=null;
mxObjectCodec.prototype.exclude=null;
mxObjectCodec.prototype.idrefs=null;
mxObjectCodec.prototype.mapping=null;
mxObjectCodec.prototype.reverse=null;
mxObjectCodec.prototype.getName=function(){return mxUtils.getFunctionName(this.template.constructor);
};
mxObjectCodec.prototype.cloneTemplate=function(){return new this.template.constructor();
};
mxObjectCodec.prototype.getFieldName=function(b){if(b!=null){var a=this.reverse[b];
if(a!=null){b=a;
}}return b;
};
mxObjectCodec.prototype.getAttributeName=function(b){if(b!=null){var a=this.mapping[b];
if(a!=null){b=a;
}}return b;
};
mxObjectCodec.prototype.isExcluded=function(d,a,c,b){return a==mxObjectIdentity.FIELD_NAME||mxUtils.indexOf(this.exclude,a)>=0;
};
mxObjectCodec.prototype.isReference=function(d,a,c,b){return mxUtils.indexOf(this.idrefs,a)>=0;
};
mxObjectCodec.prototype.encode=function(a,c){var b=a.document.createElement(this.getName());
c=this.beforeEncode(a,c,b);
this.encodeObject(a,c,b);
return this.afterEncode(a,c,b);
};
mxObjectCodec.prototype.encodeObject=function(a,f,d){a.setAttribute(d,"id",a.getId(f));
for(var c in f){var b=c;
var e=f[b];
if(e!=null&&!this.isExcluded(f,b,e,true)){if(mxUtils.isNumeric(b)){b=null;
}this.encodeValue(a,f,b,e,d);
}}};
mxObjectCodec.prototype.encodeValue=function(b,g,c,f,e){if(f!=null){if(this.isReference(g,c,f,true)){var d=b.getId(f);
if(d==null){mxLog.warn("mxObjectCodec.encode: No ID for "+this.getName()+"."+c+"="+f);
return;
}f=d;
}var a=this.template[c];
if(c==null||b.encodeDefaults||a!=f){c=this.getAttributeName(c);
this.writeAttribute(b,g,c,f,e);
}}};
mxObjectCodec.prototype.writeAttribute=function(b,e,a,d,c){if(typeof(d)!="object"){this.writePrimitiveAttribute(b,e,a,d,c);
}else{this.writeComplexAttribute(b,e,a,d,c);
}};
mxObjectCodec.prototype.writePrimitiveAttribute=function(b,e,a,d,c){d=this.convertValueToXml(d);
if(a==null){var f=b.document.createElement("add");
if(typeof(d)=="function"){f.appendChild(b.document.createTextNode(d));
}else{b.setAttribute(f,"value",d);
}c.appendChild(f);
}else{if(typeof(d)!="function"){b.setAttribute(c,a,d);
}}};
mxObjectCodec.prototype.writeComplexAttribute=function(b,e,a,d,c){var f=b.encode(d);
if(f!=null){if(a!=null){f.setAttribute("as",a);
}c.appendChild(f);
}else{mxLog.warn("mxObjectCodec.encode: No node for "+this.getName()+"."+a+": "+d);
}};
mxObjectCodec.prototype.convertValueToXml=function(a){if(typeof(a.length)=="undefined"&&(a==true||a==false)){a=(a==true)?"1":"0";
}return a;
};
mxObjectCodec.prototype.convertValueFromXml=function(a){if(mxUtils.isNumeric(a)){a=parseFloat(a);
}return a;
};
mxObjectCodec.prototype.beforeEncode=function(a,c,b){return c;
};
mxObjectCodec.prototype.afterEncode=function(a,c,b){return b;
};
mxObjectCodec.prototype.decode=function(e,b,a){var d=b.getAttribute("id");
var c=e.objects[d];
if(c==null){c=a||this.cloneTemplate();
if(d!=null){e.putObject(d,c);
}}b=this.beforeDecode(e,b,c);
this.decodeNode(e,b,c);
return this.afterDecode(e,b,c);
};
mxObjectCodec.prototype.decodeNode=function(c,a,b){if(a!=null){this.decodeAttributes(c,a,b);
this.decodeChildren(c,a,b);
}};
mxObjectCodec.prototype.decodeAttributes=function(e,c,d){var a=c.attributes;
if(a!=null){for(var b=0;
b<a.length;
b++){this.decodeAttribute(e,a[b],d);
}}};
mxObjectCodec.prototype.decodeAttribute=function(g,a,f){var c=a.nodeName;
if(c!="as"&&c!="id"){var e=this.convertValueFromXml(a.value);
var b=this.getFieldName(c);
if(this.isReference(f,b,e,false)){var d=g.getObject(e);
if(d==null){mxLog.warn("mxObjectCodec.decode: No object for "+this.getName()+"."+c+"="+e);
return;
}e=d;
}if(!this.isExcluded(f,c,e,false)){f[c]=e;
}}};
mxObjectCodec.prototype.decodeChildren=function(e,b,c){var d=b.firstChild;
while(d!=null){var a=d.nextSibling;
if(d.nodeType==mxConstants.NODETYPE_ELEMENT&&!this.processInclude(e,d,c)){this.decodeChild(e,d,c);
}d=a;
}};
mxObjectCodec.prototype.decodeChild=function(dec,child,obj){var fieldname=this.getFieldName(child.getAttribute("as"));
if(fieldname==null||!this.isExcluded(obj,fieldname,child,false)){var template=this.getFieldTemplate(obj,fieldname,child);
var value=null;
if(child.nodeName=="add"){value=child.getAttribute("value");
if(value==null){value=mxUtils.eval(mxUtils.getTextContent(child));
}}else{value=dec.decode(child,template);
}this.addObjectValue(obj,fieldname,value,template);
}};
mxObjectCodec.prototype.getFieldTemplate=function(c,a,d){var b=c[a];
if(b instanceof Array&&b.length>0){b=null;
}return b;
};
mxObjectCodec.prototype.addObjectValue=function(d,a,c,b){if(c!=null&&c!=b){if(a!=null&&a.length>0){d[a]=c;
}else{d.push(c);
}}};
mxObjectCodec.prototype.processInclude=function(g,d,c){if(d.nodeName=="include"){var b=d.getAttribute("name");
if(b!=null){try{var a=mxUtils.load(b).getDocumentElement();
if(a!=null){g.decode(a,c);
}}catch(f){}}return true;
}return false;
};
mxObjectCodec.prototype.beforeDecode=function(c,a,b){return a;
};
mxObjectCodec.prototype.afterDecode=function(c,a,b){return b;
};
mxCodecRegistry.register(function(){var a=new mxObjectCodec(new mxCell(),["children","edges","overlays","mxTransient"],["parent","source","target"]);
a.isCellCodec=function(){return true;
};
a.isExcluded=function(e,b,d,c){return mxObjectCodec.prototype.isExcluded.apply(this,arguments)||(c&&b=="value"&&d.nodeType==mxConstants.NODETYPE_ELEMENT);
};
a.afterEncode=function(b,e,d){if(e.value!=null&&e.value.nodeType==mxConstants.NODETYPE_ELEMENT){var c=d;
d=(mxClient.IS_IE)?e.value.cloneNode(true):b.document.importNode(e.value,true);
d.appendChild(c);
var f=c.getAttribute("id");
d.setAttribute("id",f);
c.removeAttribute("id");
}return d;
};
a.beforeDecode=function(f,e,l){var p=e;
var g=this.getName();
if(e.nodeName!=g){var m=e.getElementsByTagName(g)[0];
if(m!=null&&m.parentNode==e){mxUtils.removeWhitespace(m,true);
mxUtils.removeWhitespace(m,false);
m.parentNode.removeChild(m);
p=m;
}else{p=null;
}l.value=e.cloneNode(true);
var b=l.value.getAttribute("id");
if(b!=null){l.setId(b);
l.value.removeAttribute("id");
}}else{l.setId(e.getAttribute("id"));
}if(p!=null){for(var n=0;
n<this.idrefs.length;
n++){var o=this.idrefs[n];
var c=p.getAttribute(o);
if(c!=null){p.removeAttribute(o);
var h=f.objects[c]||f.lookup(c);
if(h==null){var k=f.getElementById(c);
if(k!=null){var d=mxCodecRegistry.codecs[k.nodeName]||this;
h=d.decode(f,k);
}}l[o]=h;
}}}return p;
};
return a;
}());
mxCodecRegistry.register(function(){var a=new mxObjectCodec(new mxGraphModel());
a.encodeObject=function(c,e,d){var b=c.document.createElement("root");
c.encodeCell(e.getRoot(),b);
d.appendChild(b);
};
a.decodeChild=function(d,c,b){if(c.nodeName=="root"){this.decodeRoot(d,c,b);
}else{mxObjectCodec.prototype.decodeChild.apply(this,arguments);
}};
a.decodeRoot=function(g,c,d){var f=null;
var e=c.firstChild;
while(e!=null){var b=g.decodeCell(e);
if(b!=null&&b.getParent()==null){f=b;
}e=e.nextSibling;
}if(f!=null){d.setRoot(f);
}};
return a;
}());
mxCodecRegistry.register(function(){var a=new mxObjectCodec(new mxRootChange(),["model","previous","root"]);
a.afterEncode=function(b,d,c){b.encodeCell(d.root,c);
return c;
};
a.beforeDecode=function(f,d,e){if(d.firstChild!=null&&d.firstChild.nodeType==mxConstants.NODETYPE_ELEMENT){d=d.cloneNode(true);
var b=d.firstChild;
e.root=f.decodeCell(b,false);
var c=b.nextSibling;
b.parentNode.removeChild(b);
b=c;
while(b!=null){c=b.nextSibling;
f.decodeCell(b);
b.parentNode.removeChild(b);
b=c;
}}return d;
};
a.afterDecode=function(d,b,c){c.previous=c.root;
return c;
};
return a;
}());
mxCodecRegistry.register(function(){var a=new mxObjectCodec(new mxChildChange(),["model","child","previousIndex"],["parent","previous"]);
a.isReference=function(e,b,d,c){if(b=="child"&&(e.previous!=null||!c)){return true;
}return mxUtils.indexOf(this.idrefs,b)>=0;
};
a.afterEncode=function(b,d,c){if(this.isReference(d,"child",d.child,true)){c.setAttribute("child",b.getId(d.child));
}else{b.encodeCell(d.child,c);
}return c;
};
a.beforeDecode=function(h,d,f){if(d.firstChild!=null&&d.firstChild.nodeType==mxConstants.NODETYPE_ELEMENT){d=d.cloneNode(true);
var b=d.firstChild;
f.child=h.decodeCell(b,false);
var c=b.nextSibling;
b.parentNode.removeChild(b);
b=c;
while(b!=null){c=b.nextSibling;
if(b.nodeType==mxConstants.NODETYPE_ELEMENT){var g=b.getAttribute("id");
if(h.lookup(g)==null){h.decodeCell(b);
}}b.parentNode.removeChild(b);
b=c;
}}else{var e=d.getAttribute("child");
f.child=h.getObject(e);
}return d;
};
a.afterDecode=function(d,b,c){c.child.parent=c.previous;
c.previous=c.parent;
c.previousIndex=c.index;
return c;
};
return a;
}());
mxCodecRegistry.register(function(){var a=new mxObjectCodec(new mxTerminalChange(),["model","previous"],["cell","terminal"]);
a.afterDecode=function(d,b,c){c.previous=c.terminal;
return c;
};
return a;
}());
var mxGenericChangeCodec=function(c,a){var b=new mxObjectCodec(c,["model","previous"],["cell"]);
b.afterDecode=function(f,d,e){if(mxUtils.isNode(e.cell)){e.cell=f.decodeCell(e.cell,false);
}e.previous=e[a];
return e;
};
return b;
};
mxCodecRegistry.register(mxGenericChangeCodec(new mxValueChange(),"value"));
mxCodecRegistry.register(mxGenericChangeCodec(new mxStyleChange(),"style"));
mxCodecRegistry.register(mxGenericChangeCodec(new mxGeometryChange(),"geometry"));
mxCodecRegistry.register(mxGenericChangeCodec(new mxCollapseChange(),"collapsed"));
mxCodecRegistry.register(mxGenericChangeCodec(new mxVisibleChange(),"visible"));
mxCodecRegistry.register(mxGenericChangeCodec(new mxCellAttributeChange(),"value"));
mxCodecRegistry.register(function(){return new mxObjectCodec(new mxGraph(),["graphListeners","eventListeners","view","container","cellRenderer","editor","selection"]);
}());
mxCodecRegistry.register(function(){var a=new mxObjectCodec(new mxGraphView());
a.encode=function(c,b){return this.encodeCell(c,b,b.graph.getModel().getRoot());
};
a.encodeCell=function(e,l,b){var d=l.graph.getModel();
var f=l.getState(b);
var k=d.getParent(b);
if(k==null||f!=null){var r=d.getChildCount(b);
var t=l.graph.getCellGeometry(b);
var u=null;
if(k==d.getRoot()){u="layer";
}else{if(k==null){u="graph";
}else{if(d.isEdge(b)){u="edge";
}else{if(r>0&&t!=null){u="group";
}else{if(d.isVertex(b)){u="vertex";
}}}}}if(u!=null){var p=e.document.createElement(u);
var o=l.graph.getLabel(b);
if(o!=null){p.setAttribute("label",l.graph.getLabel(b));
if(l.graph.isHtmlLabel(b)){p.setAttribute("html",true);
}}if(k==null){var h=l.getGraphBounds();
if(h!=null){p.setAttribute("x",Math.round(h.x));
p.setAttribute("y",Math.round(h.y));
p.setAttribute("width",Math.round(h.width));
p.setAttribute("height",Math.round(h.height));
}p.setAttribute("scale",l.scale);
}else{if(f!=null&&t!=null){for(var q in f.style){var n=f.style[q];
if(typeof(n)=="function"&&typeof(n)=="object"){n=mxStyleRegistry.getName(n);
}if(n!=null&&typeof(n)!="function"&&typeof(n)!="object"){p.setAttribute(q,n);
}}var m=f.absolutePoints;
if(m!=null&&m.length>0){var s=Math.round(m[0].x)+","+Math.round(m[0].y);
for(var q=1;
q<m.length;
q++){s+=" "+Math.round(m[q].x)+","+Math.round(m[q].y);
}p.setAttribute("points",s);
}else{p.setAttribute("x",Math.round(f.x));
p.setAttribute("y",Math.round(f.y));
p.setAttribute("width",Math.round(f.width));
p.setAttribute("height",Math.round(f.height));
}var g=f.absoluteOffset;
if(g!=null){if(g.x!=0){p.setAttribute("dx",Math.round(g.x));
}if(g.y!=0){p.setAttribute("dy",Math.round(g.y));
}}}}for(var q=0;
q<r;
q++){var c=this.encodeCell(e,l,d.getChildAt(b,q));
if(c!=null){p.appendChild(c);
}}}}return p;
};
return a;
}());
mxCodecRegistry.register(function(){var codec=new mxObjectCodec(new mxStylesheet());
codec.encode=function(enc,obj){var node=enc.document.createElement(this.getName());
for(var i in obj.styles){var style=obj.styles[i];
var styleNode=enc.document.createElement("add");
if(i!=null){styleNode.setAttribute("as",i);
for(var j in style){var value=this.getStringValue(j,style[j]);
if(value!=null){var entry=enc.document.createElement("add");
entry.setAttribute("value",value);
entry.setAttribute("as",j);
styleNode.appendChild(entry);
}}if(styleNode.childNodes.length>0){node.appendChild(styleNode);
}}}return node;
};
codec.getStringValue=function(key,value){var type=typeof(value);
if(type=="function"){value=mxStyleRegistry.getName(style[j]);
}else{if(type=="object"){value=null;
}}return value;
};
codec.decode=function(dec,node,into){var obj=into||new this.template.constructor();
var id=node.getAttribute("id");
if(id!=null){dec.objects[id]=obj;
}node=node.firstChild;
while(node!=null){if(!this.processInclude(dec,node,obj)&&node.nodeName=="add"){var as=node.getAttribute("as");
if(as!=null){var extend=node.getAttribute("extend");
var style=(extend!=null)?mxUtils.clone(obj.styles[extend]):null;
if(style==null){if(extend!=null){mxLog.warn("mxStylesheetCodec.decode: stylesheet "+extend+" not found to extend");
}style=new Object();
}var entry=node.firstChild;
while(entry!=null){if(entry.nodeType==mxConstants.NODETYPE_ELEMENT){var key=entry.getAttribute("as");
if(entry.nodeName=="add"){var text=mxUtils.getTextContent(entry);
var value=null;
if(text!=null&&text.length>0){value=mxUtils.eval(text);
}else{value=entry.getAttribute("value");
if(mxUtils.isNumeric(value)){value=parseFloat(value);
}}if(value!=null){style[key]=value;
}}else{if(entry.nodeName=="remove"){delete style[key];
}}}entry=entry.nextSibling;
}obj.putCellStyle(as,style);
}}node=node.nextSibling;
}return obj;
};
return codec;
}());
mxCodecRegistry.register(function(){var a=new mxObjectCodec(new mxDefaultKeyHandler());
a.encode=function(b,c){return null;
};
a.decode=function(h,e,c){if(c!=null){var d=c.editor;
e=e.firstChild;
while(e!=null){if(!this.processInclude(h,e,c)&&e.nodeName=="add"){var b=e.getAttribute("as");
var f=e.getAttribute("action");
var g=e.getAttribute("control");
c.bindAction(b,f,g);
}e=e.nextSibling;
}}return c;
};
return a;
}());
mxCodecRegistry.register(function(){var codec=new mxObjectCodec(new mxDefaultToolbar());
codec.encode=function(enc,obj){return null;
};
codec.decode=function(dec,node,into){if(into!=null){var editor=into.editor;
node=node.firstChild;
while(node!=null){if(node.nodeType==mxConstants.NODETYPE_ELEMENT){if(!this.processInclude(dec,node,into)){if(node.nodeName=="separator"){into.addSeparator();
}else{if(node.nodeName=="br"){into.toolbar.addBreak();
}else{if(node.nodeName=="hr"){into.toolbar.addLine();
}else{if(node.nodeName=="add"){var as=node.getAttribute("as");
as=mxResources.get(as)||as;
var icon=node.getAttribute("icon");
var pressedIcon=node.getAttribute("pressedIcon");
var action=node.getAttribute("action");
var mode=node.getAttribute("mode");
var template=node.getAttribute("template");
var toggle=node.getAttribute("toggle")!="0";
var text=mxUtils.getTextContent(node);
var elt=null;
if(action!=null){elt=into.addItem(as,icon,action,pressedIcon);
}else{if(mode!=null){var funct=mxUtils.eval(text);
elt=into.addMode(as,icon,mode,pressedIcon,funct);
}else{if(template!=null||(text!=null&&text.length>0)){var cell=editor.templates[template];
var style=node.getAttribute("style");
if(cell!=null&&style!=null){cell=cell.clone();
cell.setStyle(style);
}var insertFunction=null;
if(text!=null&&text.length>0){insertFunction=mxUtils.eval(text);
}elt=into.addPrototype(as,icon,cell,pressedIcon,insertFunction,toggle);
}else{var children=mxUtils.getChildNodes(node);
if(children.length>0){if(icon==null){var combo=into.addActionCombo(as);
for(var i=0;
i<children.length;
i++){var child=children[i];
if(child.nodeName=="separator"){into.addOption(combo,"---");
}else{if(child.nodeName=="add"){var lab=child.getAttribute("as");
var act=child.getAttribute("action");
into.addActionOption(combo,lab,act);
}}}}else{var select=null;
var create=function(){var template=editor.templates[select.value];
if(template!=null){var clone=template.clone();
var style=select.options[select.selectedIndex].cellStyle;
if(style!=null){clone.setStyle(style);
}return clone;
}else{mxLog.warn("Template "+template+" not found");
}return null;
};
var img=into.addPrototype(as,icon,create,null,null,toggle);
select=into.addCombo();
mxEvent.addListener(select,"change",function(){into.toolbar.selectMode(img,function(evt){var pt=mxUtils.convertPoint(editor.graph.container,mxEvent.getClientX(evt),mxEvent.getClientY(evt));
return editor.addVertex(null,funct(),pt.x,pt.y);
});
into.toolbar.noReset=false;
});
for(var i=0;
i<children.length;
i++){var child=children[i];
if(child.nodeName=="separator"){into.addOption(select,"---");
}else{if(child.nodeName=="add"){var lab=child.getAttribute("as");
var tmp=child.getAttribute("template");
var option=into.addOption(select,lab,tmp||template);
option.cellStyle=child.getAttribute("style");
}}}}}}}}if(elt!=null){var id=node.getAttribute("id");
if(id!=null&&id.length>0){elt.setAttribute("id",id);
}}}}}}}}node=node.nextSibling;
}}return into;
};
return codec;
}());
mxCodecRegistry.register(function(){var a=new mxObjectCodec(new mxDefaultPopupMenu());
a.encode=function(b,c){return null;
};
a.decode=function(e,c,b){var d=c.getElementsByTagName("include")[0];
if(d!=null){this.processInclude(e,d,b);
}else{if(b!=null){b.config=c;
}}return b;
};
return a;
}());
mxCodecRegistry.register(function(){var a=new mxObjectCodec(new mxEditor(),["modified","lastSnapshot","ignoredChanges","undoManager","graphContainer","toolbarContainer"]);
a.afterDecode=function(f,d,e){var b=d.getAttribute("defaultEdge");
if(b!=null){d.removeAttribute("defaultEdge");
e.defaultEdge=e.templates[b];
}var c=d.getAttribute("defaultGroup");
if(c!=null){d.removeAttribute("defaultGroup");
e.defaultGroup=e.templates[c];
}return e;
};
a.decodeChild=function(e,d,b){if(d.nodeName=="Array"){var c=d.getAttribute("as");
if(c=="templates"){this.decodeTemplates(e,d,b);
return;
}}else{if(d.nodeName=="ui"){this.decodeUi(e,d,b);
return;
}}mxObjectCodec.prototype.decodeChild.apply(this,arguments);
};
a.decodeUi=function(g,e,l){var i=e.firstChild;
while(i!=null){if(i.nodeName=="add"){var f=i.getAttribute("as");
var h=i.getAttribute("element");
var b=i.getAttribute("style");
var k=null;
if(h!=null){k=document.getElementById(h);
if(k!=null&&b!=null){k.style.cssText+=";"+b;
}}else{var n=parseInt(i.getAttribute("x"));
var m=parseInt(i.getAttribute("y"));
var c=i.getAttribute("width");
var o=i.getAttribute("height");
k=document.createElement("div");
k.style.cssText=b;
var d=new mxWindow(mxResources.get(f)||f,k,n,m,c,o,false,true);
d.setVisible(true);
}if(f=="graph"){l.setGraphContainer(k);
}else{if(f=="toolbar"){l.setToolbarContainer(k);
}else{if(f=="title"){l.setTitleContainer(k);
}else{if(f=="status"){l.setStatusContainer(k);
}else{if(f=="map"){l.setMapContainer(k);
}}}}}}else{if(i.nodeName=="resource"){mxResources.add(i.getAttribute("basename"));
}else{if(i.nodeName=="stylesheet"){mxClient.link("stylesheet",i.getAttribute("name"));
}}}i=i.nextSibling;
}};
a.decodeTemplates=function(h,f,e){if(e.templates==null){e.templates=[];
}var d=mxUtils.getChildNodes(f);
for(var c=0;
c<d.length;
c++){var b=d[c].getAttribute("as");
var g=d[c].firstChild;
while(g!=null&&g.nodeType!=1){g=g.nextSibling;
}if(g!=null){e.templates[b]=h.decodeCell(g);
}}};
return a;
}());
(function(){function o(){}o.prototype=new mxCylinder();
o.prototype.constructor=o;
o.prototype.size=20;
o.prototype.redrawPath=function(F,A,G,B,E,C){var D=Math.min(B,Math.min(E,mxUtils.getValue(this.style,"size",this.size)*this.scale));
if(C){F.moveTo(D,E);
F.lineTo(D,D);
F.lineTo(0,0);
F.moveTo(D,D);
F.lineTo(B,D);
F.end();
}else{F.moveTo(0,0);
F.lineTo(B-D,0);
F.lineTo(B,D);
F.lineTo(B,E);
F.lineTo(D,E);
F.lineTo(0,E-D);
F.lineTo(0,0);
F.close();
F.end();
}};
mxCellRenderer.prototype.defaultShapes.cube=o;
function r(){}r.prototype=new mxCylinder();
r.prototype.constructor=r;
r.prototype.size=30;
r.prototype.redrawPath=function(F,A,G,B,E,C){var D=Math.min(B,Math.min(E,mxUtils.getValue(this.style,"size",this.size)*this.scale));
if(C){F.moveTo(B-D,0);
F.lineTo(B-D,D);
F.lineTo(B,D);
F.end();
}else{F.moveTo(0,0);
F.lineTo(B-D,0);
F.lineTo(B,D);
F.lineTo(B,E);
F.lineTo(0,E);
F.lineTo(0,0);
F.close();
F.end();
}};
mxCellRenderer.prototype.defaultShapes.note=r;
function m(){}m.prototype=new mxCylinder();
m.prototype.constructor=m;
m.prototype.tabWidth=60;
m.prototype.tabHeight=20;
m.prototype.tabPosition="right";
m.prototype.redrawPath=function(K,G,E,H,C,B){var D=mxUtils.getValue(this.style,"tabWidth",this.tabWidth);
var A=mxUtils.getValue(this.style,"tabHeight",this.tabHeight);
var F=mxUtils.getValue(this.style,"tabPosition",this.tabPosition);
var J=Math.min(H,D*this.scale);
var I=Math.min(C,A*this.scale);
if(B){if(F=="left"){K.moveTo(0,I);
K.lineTo(J,I);
}else{K.moveTo(H-J,I);
K.lineTo(H,I);
}K.end();
}else{if(F=="left"){K.moveTo(0,0);
K.lineTo(J,0);
K.lineTo(J,I);
K.lineTo(H,I);
}else{K.moveTo(0,I);
K.lineTo(H-J,I);
K.lineTo(H-J,0);
K.lineTo(H,0);
}K.lineTo(H,C);
K.lineTo(0,C);
K.lineTo(0,I);
K.close();
K.end();
}};
mxCellRenderer.prototype.defaultShapes.folder=m;
function j(){}j.prototype=new mxCylinder();
j.prototype.constructor=j;
j.prototype.size=30;
j.prototype.redrawPath=function(F,A,G,B,E,C){var D=Math.min(B,Math.min(E,mxUtils.getValue(this.style,"size",this.size)*this.scale));
if(!C){F.moveTo(D,0);
F.lineTo(B,0);
F.lineTo(B,E);
F.lineTo(0,E);
F.lineTo(0,D);
F.lineTo(D,0);
F.close();
F.end();
}};
mxCellRenderer.prototype.defaultShapes.card=j;
function t(){}t.prototype=new mxCylinder();
t.prototype.constructor=t;
t.prototype.size=0.4;
t.prototype.redrawPath=function(H,E,D,F,C,B){var I=mxUtils.getValue(this.style,"size",this.size);
var G=C*I;
var A=1.4;
if(!B){H.moveTo(0,G/2);
H.quadTo(F/4,G*A,F/2,G/2);
H.quadTo(F*3/4,G*(1-A),F,G/2);
H.lineTo(F,C-G/2);
H.quadTo(F*3/4,C-G*A,F/2,C-G/2);
H.quadTo(F/4,C-G*(1-A),0,C-G/2);
H.lineTo(0,G/2);
H.close();
H.end();
}};
mxCellRenderer.prototype.defaultShapes.tape=t;
function y(){}y.prototype=new mxCylinder();
y.prototype.constructor=y;
y.prototype.size=0.2;
y.prototype.redrawPath=function(F,A,G,B,E,C){var D=B*mxUtils.getValue(this.style,"size",this.size);
if(!C){F.moveTo(0,0);
F.lineTo(B-D,0);
F.lineTo(B,E/2);
F.lineTo(B-D,E);
F.lineTo(0,E);
F.lineTo(D,E/2);
F.close();
F.end();
}};
mxCellRenderer.prototype.defaultShapes.step=y;
function u(){}u.prototype=new mxCylinder();
u.prototype.constructor=u;
u.prototype.redrawPath=function(F,A,G,B,E,D){var C=Math.min(B/5,E/5)+1;
if(D){F.moveTo(B/2,C);
F.lineTo(B/2,E-C);
F.moveTo(C,E/2);
F.lineTo(B-C,E/2);
F.end();
}else{F.moveTo(0,0);
F.lineTo(B,0);
F.lineTo(B,E);
F.lineTo(0,E);
F.close();
}};
mxCellRenderer.prototype.defaultShapes.plus=u;
function q(){}q.prototype=new mxCylinder();
q.prototype.constructor=q;
q.prototype.redrawPath=function(E,A,F,B,D,C){if(C){E.moveTo(0,0);
E.lineTo(B/2,D/2);
E.lineTo(B,0);
E.end();
}else{E.moveTo(0,0);
E.lineTo(B,0);
E.lineTo(B,D);
E.lineTo(0,D);
E.close();
}};
mxCellRenderer.prototype.defaultShapes.message=q;
function h(){}h.prototype=new mxCylinder();
h.prototype.constructor=h;
h.prototype.addPipe=true;
h.prototype.redrawPath=function(G,B,H,C,F,D){var E=C/3;
var A=F/4;
if(!D){G.moveTo(C/2,A);
G.curveTo(C/2-E,A,C/2-E,0,C/2,0);
G.curveTo(C/2+E,0,C/2+E,A,C/2,A);
G.close();
G.moveTo(C/2,A);
G.lineTo(C/2,2*F/3);
G.moveTo(C/2,F/3);
G.lineTo(0,F/3);
G.moveTo(C/2,F/3);
G.lineTo(C,F/3);
G.moveTo(C/2,2*F/3);
G.lineTo(0,F);
G.moveTo(C/2,2*F/3);
G.lineTo(C,F);
G.end();
}};
mxCellRenderer.prototype.defaultShapes.umlActor=h;
function v(){}v.prototype=new mxCylinder();
v.prototype.constructor=v;
v.prototype.size=10;
v.prototype.addPipe=true;
v.prototype.redrawPath=function(H,E,D,F,C,B){var I=this.scale*mxUtils.getValue(this.style,"size",this.size);
var A=I*2/3;
var G=I;
if(!B){H.moveTo(F/2,G);
H.curveTo(F/2-A,G,F/2-A,0,F/2,0);
H.curveTo(F/2+A,0,F/2+A,G,F/2,G);
H.close();
H.moveTo(F/2,G);
H.lineTo(F/2,C);
H.end();
}};
mxCellRenderer.prototype.defaultShapes.lollipop=v;
function c(){}c.prototype=new mxCylinder();
c.prototype.constructor=c;
c.prototype.jettyWidth=32;
c.prototype.jettyHeight=12;
c.prototype.redrawPath=function(N,H,F,J,D,C){var L=mxUtils.getValue(this.style,"jettyWidth",this.jettyWidth);
var E=mxUtils.getValue(this.style,"jettyHeight",this.jettyHeight);
var M=L*this.scale;
var K=E*this.scale;
var B=M/2;
var A=B+M/2;
var I=0.3*D-K/2;
var G=0.7*D-K/2;
if(C){N.moveTo(B,I);
N.lineTo(A,I);
N.lineTo(A,I+K);
N.lineTo(B,I+K);
N.moveTo(B,G);
N.lineTo(A,G);
N.lineTo(A,G+K);
N.lineTo(B,G+K);
N.end();
}else{N.moveTo(B,0);
N.lineTo(J,0);
N.lineTo(J,D);
N.lineTo(B,D);
N.lineTo(B,G+K);
N.lineTo(0,G+K);
N.lineTo(0,G);
N.lineTo(B,G);
N.lineTo(B,I+K);
N.lineTo(0,I+K);
N.lineTo(0,I);
N.lineTo(B,I);
N.close();
N.end();
}};
mxCellRenderer.prototype.defaultShapes.component=c;
function l(){}l.prototype=new mxDoubleEllipse();
l.prototype.constructor=l;
l.prototype.outerStroke=true;
l.prototype.createSvg=function(){var A=mxDoubleEllipse.prototype.createSvg.apply(this,arguments);
this.foreground.setAttribute("fill",this.innerNode.getAttribute("fill"));
this.foreground.setAttribute("stroke",this.stroke);
this.innerNode.setAttribute("fill","none");
this.innerNode.setAttribute("stroke",(this.outerStroke)?this.stroke:"none");
return A;
};
l.prototype.redrawSvg=function(){mxDoubleEllipse.prototype.redrawSvg.apply(this,arguments);
this.innerNode.setAttribute("fill","none");
if(this.shadowNode!=null){this.shadowNode.setAttribute("cx",this.foreground.getAttribute("cx"));
this.shadowNode.setAttribute("cy",this.foreground.getAttribute("cy"));
this.shadowNode.setAttribute("rx",this.foreground.getAttribute("rx"));
this.shadowNode.setAttribute("ry",this.foreground.getAttribute("ry"));
}};
l.prototype.createVml=function(){var A=mxDoubleEllipse.prototype.createVml.apply(this,arguments);
if(this.fillNode!=null){this.foreground.appendChild(this.fillNode);
this.foreground.filled="true";
}this.background.filled="false";
this.background.stroked=(this.outerStroke)?"true":"false";
if(this.shadowNode!=null){this.foreground.appendChild(this.shadowNode);
}return A;
};
l.prototype.reconfigure=function(){mxShape.prototype.reconfigure.apply(this,arguments);
if(this.dialect==mxConstants.DIALECT_SVG){this.innerNode.setAttribute("fill","none");
}else{if(mxUtils.isVml(this.node)){this.background.filled="false";
}}};
mxCellRenderer.prototype.defaultShapes.endState=l;
function k(){}k.prototype=new l();
k.prototype.constructor=k;
k.prototype.outerStroke=false;
mxCellRenderer.prototype.defaultShapes.startState=k;
var s=mxImageExport.prototype.initShapes;
mxImageExport.prototype.initShapes=function(){s.apply(this,arguments);
function A(B){return{drawShape:function(F,D,C,E){var I=C.x;
var H=C.y;
var J=C.width;
var G=C.height;
if(E){var K=Math.min(4,Math.min(J/5,G/5));
I+=K;
H+=K;
J-=2*K;
G-=2*K;
if(J>0&&G>0){F.ellipse(I,H,J,G);
}return true;
}else{F.fillAndStroke();
if(B){F.ellipse(I,H,J,G);
F.stroke();
}}}};
}this.shapes.endState=A(true);
this.shapes.startState=A(false);
};
function f(){}f.prototype=new mxArrow();
f.prototype.constructor=f;
f.prototype.enableFill=false;
f.prototype.addPipe=true;
f.prototype.augmentBoundingBox=function(A){A.grow(10*this.scale);
mxShape.prototype.augmentBoundingBox.apply(this,arguments);
};
f.prototype.redrawPath=function(R,N,L,P,Y){R.translate.x-=N;
R.translate.y-=L;
var T=10*this.scale;
var C=this.points[0];
var ab=this.points[this.points.length-1];
var Q=ab.x-C.x;
var O=ab.y-C.y;
var S=Math.sqrt(Q*Q+O*O);
var D=S;
var aa=Q/S;
var Z=O/S;
var H=D*aa;
var G=D*Z;
var F=T*Z/3;
var E=-T*aa/3;
var W=C.x-F/2;
var U=C.y-E/2;
var B=W+F;
var A=U+E;
var K=B+H;
var I=A+G;
var X=K+F;
var V=I+E;
var M=X-3*F;
var J=V-3*E;
R.moveTo(B,A);
R.lineTo(K,I);
R.moveTo(M+F,J+E);
R.lineTo(W,U);
R.end();
};
mxCellRenderer.prototype.defaultShapes.link=f;
mxMarker.markers.dash=function(A,F,E,D,C,H,I,B,G){D=D*(I+H);
C=C*(I+H);
if(G){A.setAttribute("path","m"+Math.floor(E.x-D/2-C/2)+" "+Math.floor(E.y-C/2+D/2)+" l "+Math.floor(E.x+C/2-3*D/2)+" "+Math.floor(E.y-3*C/2-D/2)+" e");
}else{A.setAttribute("d","M "+(E.x-D/2-C/2)+" "+(E.y-C/2+D/2)+" L "+(E.x+C/2-3*D/2)+" "+(E.y-3*C/2-D/2)+" z");
}return new mxPoint(0,0);
};
var i=mxImageExport.prototype.initMarkers;
mxImageExport.prototype.initMarkers=function(){i.apply(this,arguments);
this.markers.dash=function(C,B,E,D,G,F,I,A,H){nx=G*(I+H);
ny=F*(I+H);
C.begin();
C.moveTo(D.x-nx/2-ny/2,D.y-ny/2+nx/2);
C.lineTo(D.x+ny/2-3*nx/2,D.y-3*ny/2-nx/2);
C.stroke();
return new mxPoint(0,0);
};
};
mxShape.prototype.crisp=true;
mxShape.prototype.roundedCrispSvg=false;
mxActor.prototype.crisp=false;
mxCylinder.prototype.crisp=false;
mxEllipse.prototype.crisp=false;
mxDoubleEllipse.prototype.crisp=false;
mxConnector.prototype.crisp=false;
m.prototype.crisp=true;
c.prototype.crisp=true;
var n=-99;
if(typeof(mxVertexHandler)!="undefined"){function g(A){mxVertexHandler.call(this,A);
}mxUtils.extend(g,mxVertexHandler);
g.prototype.useGridForSpecialHandle=false;
g.prototype.init=function(){this.horizontal=mxUtils.getValue(this.state.style,mxConstants.STYLE_HORIZONTAL,true);
var C=this.state.view.graph;
if(this.handleImage!=null){var B=new mxRectangle(0,0,this.handleImage.width,this.handleImage.height);
this.specialHandle=new mxImageShape(B,this.handleImage.src);
}else{var A=10;
var B=new mxRectangle(0,0,A,A);
this.specialHandle=new mxRhombus(B,mxConstants.HANDLE_FILLCOLOR,mxConstants.HANDLE_STROKECOLOR);
this.specialHandle.crisp=this.crisp;
}this.specialHandle.dialect=(C.dialect!=mxConstants.DIALECT_SVG)?mxConstants.DIALECT_VML:mxConstants.DIALECT_SVG;
this.specialHandle.init(C.getView().getOverlayPane());
this.specialHandle.node.style.cursor=this.getSpecialHandleCursor();
mxEvent.redirectMouseEvents(this.specialHandle.node,C,this.state);
mxVertexHandler.prototype.init.apply(this,arguments);
};
g.prototype.getSpecialHandleCursor=function(){return(this.horizontal)?"n-resize":"w-resize";
};
g.prototype.redraw=function(){mxVertexHandler.prototype.redraw.apply(this,arguments);
var A=this.specialHandle.bounds.width;
this.specialHandle.bounds=this.getSpecialHandleBounds(A);
this.specialHandle.redraw();
};
g.prototype.getSpecialHandleBounds=function(A){var B=this.graph.getView().scale;
var C=this.state.view.graph.getStartSize(this.state.cell);
if(this.horizontal){return new mxRectangle(this.state.x+(this.state.width-A)/2,this.state.y+C.height*B-A/2,A,A);
}else{return new mxRectangle(this.state.x+C.width*B-A/2,this.state.y+(this.state.height-A)/2,A,A);
}};
g.prototype.destroy=function(){mxVertexHandler.prototype.destroy.apply(this,arguments);
if(this.specialHandle!=null){this.specialHandle.destroy();
this.specialHandle=null;
}};
g.prototype.getHandleForEvent=function(A){if(A.isSource(this.specialHandle)){return n;
}return mxVertexHandler.prototype.getHandleForEvent.apply(this,arguments);
};
g.prototype.constrainPoint=function(A){A.x=Math.max(this.state.x,Math.min(this.state.x+this.state.width,A.x));
A.y=Math.max(this.state.y,Math.min(this.state.y+this.state.height,A.y));
};
g.prototype.mouseMove=function(B,C){if(!C.isConsumed()&&this.index==n){var A=new mxPoint(C.getGraphX(),C.getGraphY());
this.constrainPoint(A);
var D=this.graph.isGridEnabledEvent(C.getEvent());
var E=this.graph.getView().scale;
if(D&&this.useGridForSpecialHandle){A.x=this.graph.snap(A.x/E)*E;
A.y=this.graph.snap(A.y/E)*E;
}this.updateStyle(A);
this.moveSizerTo(this.specialHandle,A.x,A.y);
this.state.view.graph.cellRenderer.redraw(this.state,true);
C.consume();
}else{mxVertexHandler.prototype.mouseMove.apply(this,arguments);
}};
g.prototype.updateStyle=function(A){var B=0;
if(this.horizontal){A.x=this.state.x+this.state.width/2;
B=A.y-this.state.y;
}else{A.y=this.state.y+this.state.height/2;
B=A.x-this.state.x;
}var C=this.graph.getView().scale;
this.state.style.startSize=Math.round(Math.max(1,B)/C);
};
g.prototype.mouseUp=function(A,B){if(!B.isConsumed()&&this.index==n){this.applyStyle();
this.reset();
B.consume();
}else{mxVertexHandler.prototype.mouseUp.apply(this,arguments);
}};
g.prototype.applyStyle=function(){this.state.view.graph.setCellStyles("startSize",this.state.style.startSize,[this.state.cell]);
};
function w(A){g.call(this,A);
}mxUtils.extend(w,g);
w.prototype.getSpecialHandleCursor=function(){return"default";
};
w.prototype.getSpecialHandleBounds=function(I){var G=Number(this.state.style[mxConstants.STYLE_ROTATION]||"0");
var E=mxUtils.getValue(this.state.style,"direction","east");
if(E!=null){if(E=="north"){G+=270;
}else{if(E=="west"){G+=180;
}else{if(E=="south"){G+=90;
}}}}var B=mxUtils.toRadians(G);
var F=Math.cos(B);
var D=Math.sin(B);
var A=new mxRectangle(this.state.x,this.state.y,this.state.width,this.state.height);
if(E=="south"||E=="north"){A.x+=(A.width-A.height)/2;
A.y+=(A.height-A.width)/2;
var C=A.width;
A.width=A.height;
A.height=C;
}var H=this.getSpecialHandlePoint(A);
H=mxUtils.getRotatedPoint(H,F,D,new mxPoint(this.state.getCenterX(),this.state.getCenterY()));
return new mxRectangle(H.x-I/2,H.y-I/2,I,I);
};
w.prototype.getSpecialHandlePoint=function(D){var F=this.graph.getView().scale;
var B=Math.min(D.width,mxUtils.getValue(this.state.style,"tabWidth",60)*F);
var C=Math.min(D.height,mxUtils.getValue(this.state.style,"tabHeight",20)*F);
var E=mxUtils.getValue(this.state.style,"tabPosition","right");
var A=(E=="left")?D.x+B:D.x+D.width-B;
return new mxPoint(A,D.y+C);
};
w.prototype.updateStyle=function(F){var E=mxUtils.getValue(this.state.style,"direction","east");
var H=Number(this.state.style[mxConstants.STYLE_ROTATION]||"0");
if(E!=null){if(E=="north"){H+=270;
}else{if(E=="west"){H+=180;
}else{if(E=="south"){H+=90;
}}}}var B=mxUtils.toRadians(H);
var G=Math.cos(-B);
var D=Math.sin(-B);
var A=new mxRectangle(this.state.x,this.state.y,this.state.width,this.state.height);
if(E=="south"||E=="north"){A.x+=(A.width-A.height)/2;
A.y+=(A.height-A.width)/2;
var C=A.width;
A.width=A.height;
A.height=C;
}var J=new mxPoint(F.x,F.y);
J=mxUtils.getRotatedPoint(J,G,D,new mxPoint(this.state.getCenterX(),this.state.getCenterY()));
var I=this.updateStyleUnrotated(J,A);
if(I!=null){G=Math.cos(B);
D=Math.sin(B);
I=mxUtils.getRotatedPoint(I,G,D,new mxPoint(this.state.getCenterX(),this.state.getCenterY()));
F.x=I.x;
F.y=I.y;
}};
w.prototype.updateStyleUnrotated=function(D,C){var F=mxUtils.getValue(this.state.style,"tabPosition","right");
var A=(F=="left")?D.x-C.x:C.x+C.width-D.x;
var B=D.y-C.y;
var E=this.graph.getView().scale;
this.state.style.tabWidth=Math.round(Math.max(1,A)/E);
this.state.style.tabHeight=Math.round(Math.max(1,B)/E);
};
w.prototype.applyStyle=function(){var A=this.graph.getModel();
A.beginUpdate();
try{this.state.view.graph.setCellStyles("tabWidth",this.state.style.tabWidth,[this.state.cell]);
this.state.view.graph.setCellStyles("tabHeight",this.state.style.tabHeight,[this.state.cell]);
}finally{A.endUpdate();
}};
function b(A){w.call(this,A);
}mxUtils.extend(b,w);
b.prototype.defaultValue=20;
b.prototype.scaleFactor=1;
b.prototype.getSpecialHandlePoint=function(A){var C=this.graph.getView().scale;
var B=Math.min(A.width,Math.min(A.height,mxUtils.getValue(this.state.style,"size",this.defaultValue)*C/this.scaleFactor));
return new mxPoint(A.x+B,A.y+B);
};
b.prototype.updateStyleUnrotated=function(C,B){var A=Math.min(Math.min(B.width/this.scaleFactor,C.x-B.x),Math.min(B.height/this.scaleFactor,C.y-B.y));
var D=this.graph.getView().scale;
this.state.style.size=Math.round(Math.max(1,A)/D)*this.scaleFactor;
return new mxPoint(B.x+A,B.y+A);
};
b.prototype.applyStyle=function(){this.state.view.graph.setCellStyles("size",this.state.style.size,[this.state.cell]);
};
function d(A){b.call(this,A);
}mxUtils.extend(d,b);
d.prototype.defaultValue=30;
d.prototype.scaleFactor=2;
function z(A){b.call(this,A);
}mxUtils.extend(z,b);
z.prototype.defaultValue=30;
z.prototype.scaleFactor=1;
z.prototype.getSpecialHandlePoint=function(A){var C=this.graph.getView().scale;
var B=Math.min(A.width,Math.min(A.height,mxUtils.getValue(this.state.style,"size",this.defaultValue)*C/this.scaleFactor));
return new mxPoint(A.x+A.width-B,A.y+B);
};
z.prototype.updateStyleUnrotated=function(C,B){var A=Math.min(Math.min(B.width/this.scaleFactor,C.x-B.x+B.width),Math.min(B.height/this.scaleFactor,C.y-B.y));
var D=this.graph.getView().scale;
this.state.style.size=Math.round(Math.max(1,A)/D)*this.scaleFactor;
return new mxPoint(B.x+B.width-A,B.y+A);
};
function a(A){b.call(this,A);
}mxUtils.extend(a,b);
a.prototype.defaultValue=0.2;
a.prototype.scaleFactor=1;
a.prototype.getSpecialHandlePoint=function(A){var B=mxUtils.getValue(this.state.style,"size",this.defaultValue);
return new mxPoint(A.x+A.width*B,A.y+A.height/2);
};
a.prototype.updateStyleUnrotated=function(C,B){var A=Math.min(1,(C.x-B.x)/B.width);
this.state.style.size=A;
return new mxPoint(B.x+A*B.width,B.y+B.height/2);
};
function x(A){b.call(this,A);
}mxUtils.extend(x,b);
x.prototype.defaultValue=0.4;
x.prototype.scaleFactor=1;
x.prototype.getSpecialHandlePoint=function(A){var B=mxUtils.getValue(this.state.style,"size",this.defaultValue);
return new mxPoint(A.x+A.width/2,A.y+B*A.height/2);
};
x.prototype.updateStyleUnrotated=function(C,B){var A=Math.min(1,((C.y-B.y)/B.height)*2);
this.state.style.size=A;
return new mxPoint(B.x+B.width/2,B.y+A*B.height/2);
};
var p={swimlane:g,folder:w,cube:b,card:d,note:z,step:a,tape:x};
var e=mxGraph.prototype.createHandler;
mxGraph.prototype.createHandler=function(B){if(B!=null){var A=p[B.style.shape];
if(A!=null){return new A(B);
}}return e.apply(this,arguments);
};
}mxGraph.prototype.getAllConnectionConstraints=function(A,B){if(A!=null&&A.shape!=null){if(A.shape instanceof mxStencilShape){if(A.shape.stencil!=null){return A.shape.stencil.constraints;
}}else{if(A.shape.constraints!=null){return A.shape.constraints;
}}}return null;
};
mxRectangleShape.prototype.constraints=[new mxConnectionConstraint(new mxPoint(0.25,0),true),new mxConnectionConstraint(new mxPoint(0.5,0),true),new mxConnectionConstraint(new mxPoint(0.75,0),true),new mxConnectionConstraint(new mxPoint(0,0.25),true),new mxConnectionConstraint(new mxPoint(0,0.5),true),new mxConnectionConstraint(new mxPoint(0,0.75),true),new mxConnectionConstraint(new mxPoint(1,0.25),true),new mxConnectionConstraint(new mxPoint(1,0.5),true),new mxConnectionConstraint(new mxPoint(1,0.75),true),new mxConnectionConstraint(new mxPoint(0.25,1),true),new mxConnectionConstraint(new mxPoint(0.5,1),true),new mxConnectionConstraint(new mxPoint(0.75,1),true)];
mxLabel.prototype.constraints=mxRectangleShape.prototype.constraints;
mxImageShape.prototype.constraints=mxRectangleShape.prototype.constraints;
mxSwimlane.prototype.constraints=mxRectangleShape.prototype.constraints;
u.prototype.constraints=mxRectangleShape.prototype.constraints;
r.prototype.constraints=mxRectangleShape.prototype.constraints;
j.prototype.constraints=mxRectangleShape.prototype.constraints;
o.prototype.constraints=mxRectangleShape.prototype.constraints;
m.prototype.constraints=mxRectangleShape.prototype.constraints;
mxCylinder.prototype.constraints=[new mxConnectionConstraint(new mxPoint(0.15,0.05),false),new mxConnectionConstraint(new mxPoint(0.5,0),true),new mxConnectionConstraint(new mxPoint(0.85,0.05),false),new mxConnectionConstraint(new mxPoint(0,0.3),true),new mxConnectionConstraint(new mxPoint(0,0.5),true),new mxConnectionConstraint(new mxPoint(0,0.7),true),new mxConnectionConstraint(new mxPoint(1,0.3),true),new mxConnectionConstraint(new mxPoint(1,0.5),true),new mxConnectionConstraint(new mxPoint(1,0.7),true),new mxConnectionConstraint(new mxPoint(0.15,0.95),false),new mxConnectionConstraint(new mxPoint(0.5,1),true),new mxConnectionConstraint(new mxPoint(0.85,0.95),false)];
h.prototype.constraints=[new mxConnectionConstraint(new mxPoint(0.25,0),true),new mxConnectionConstraint(new mxPoint(0.5,0),true),new mxConnectionConstraint(new mxPoint(0.75,0),true),new mxConnectionConstraint(new mxPoint(0,0.25),true),new mxConnectionConstraint(new mxPoint(0,0.5),true),new mxConnectionConstraint(new mxPoint(0,0.75),true),new mxConnectionConstraint(new mxPoint(1,0.25),true),new mxConnectionConstraint(new mxPoint(1,0.5),true),new mxConnectionConstraint(new mxPoint(1,0.75),true),new mxConnectionConstraint(new mxPoint(0.25,1),true),new mxConnectionConstraint(new mxPoint(0.5,1),true),new mxConnectionConstraint(new mxPoint(0.75,1),true)];
c.prototype.constraints=[new mxConnectionConstraint(new mxPoint(0.25,0),true),new mxConnectionConstraint(new mxPoint(0.5,0),true),new mxConnectionConstraint(new mxPoint(0.75,0),true),new mxConnectionConstraint(new mxPoint(0,0.3),true),new mxConnectionConstraint(new mxPoint(0,0.7),true),new mxConnectionConstraint(new mxPoint(1,0.25),true),new mxConnectionConstraint(new mxPoint(1,0.5),true),new mxConnectionConstraint(new mxPoint(1,0.75),true),new mxConnectionConstraint(new mxPoint(0.25,1),true),new mxConnectionConstraint(new mxPoint(0.5,1),true),new mxConnectionConstraint(new mxPoint(0.75,1),true)];
mxActor.prototype.constraints=[new mxConnectionConstraint(new mxPoint(0.5,0),true),new mxConnectionConstraint(new mxPoint(0.25,0.2),false),new mxConnectionConstraint(new mxPoint(0.1,0.5),false),new mxConnectionConstraint(new mxPoint(0,0.75),true),new mxConnectionConstraint(new mxPoint(0.75,0.25),false),new mxConnectionConstraint(new mxPoint(0.9,0.5),false),new mxConnectionConstraint(new mxPoint(1,0.75),true),new mxConnectionConstraint(new mxPoint(0.25,1),true),new mxConnectionConstraint(new mxPoint(0.5,1),true),new mxConnectionConstraint(new mxPoint(0.75,1),true)];
t.prototype.constraints=[new mxConnectionConstraint(new mxPoint(0,0.35),false),new mxConnectionConstraint(new mxPoint(0,0.5),false),new mxConnectionConstraint(new mxPoint(0,0.65),false),new mxConnectionConstraint(new mxPoint(1,0.35),false),new mxConnectionConstraint(new mxPoint(1,0.5),false),new mxConnectionConstraint(new mxPoint(1,0.65),false),new mxConnectionConstraint(new mxPoint(0.25,1),false),new mxConnectionConstraint(new mxPoint(0.75,0),false)];
y.prototype.constraints=[new mxConnectionConstraint(new mxPoint(0.25,0),true),new mxConnectionConstraint(new mxPoint(0.5,0),true),new mxConnectionConstraint(new mxPoint(0.75,0),true),new mxConnectionConstraint(new mxPoint(0.25,1),true),new mxConnectionConstraint(new mxPoint(0.5,1),true),new mxConnectionConstraint(new mxPoint(0.75,1),true),new mxConnectionConstraint(new mxPoint(0.1,0.25),false),new mxConnectionConstraint(new mxPoint(0.2,0.5),false),new mxConnectionConstraint(new mxPoint(0.1,0.75),false),new mxConnectionConstraint(new mxPoint(0.9,0.25),false),new mxConnectionConstraint(new mxPoint(1,0.5),false),new mxConnectionConstraint(new mxPoint(0.9,0.75),false)];
mxLine.prototype.constraints=[new mxConnectionConstraint(new mxPoint(0,0.5),false),new mxConnectionConstraint(new mxPoint(0.25,0.5),false),new mxConnectionConstraint(new mxPoint(0.75,0.5),false),new mxConnectionConstraint(new mxPoint(1,0.5),false)];
v.prototype.constraints=[new mxConnectionConstraint(new mxPoint(0.5,0),false),new mxConnectionConstraint(new mxPoint(0.5,1),false)];
mxEllipse.prototype.constraints=[new mxConnectionConstraint(new mxPoint(0,0),true),new mxConnectionConstraint(new mxPoint(1,0),true),new mxConnectionConstraint(new mxPoint(0,1),true),new mxConnectionConstraint(new mxPoint(1,1),true),new mxConnectionConstraint(new mxPoint(0.5,0),true),new mxConnectionConstraint(new mxPoint(0.5,1),true),new mxConnectionConstraint(new mxPoint(0,0.5),true),new mxConnectionConstraint(new mxPoint(1,0.5))];
mxDoubleEllipse.prototype.constraints=mxEllipse.prototype.constraints;
mxRhombus.prototype.constraints=mxEllipse.prototype.constraints;
mxTriangle.prototype.constraints=[new mxConnectionConstraint(new mxPoint(0,0.25),true),new mxConnectionConstraint(new mxPoint(0,0.5),true),new mxConnectionConstraint(new mxPoint(0,0.75),true),new mxConnectionConstraint(new mxPoint(0.5,0),true),new mxConnectionConstraint(new mxPoint(0.5,1),true),new mxConnectionConstraint(new mxPoint(1,0.5),true)];
mxHexagon.prototype.constraints=[new mxConnectionConstraint(new mxPoint(0.375,0),true),new mxConnectionConstraint(new mxPoint(0.5,0),true),new mxConnectionConstraint(new mxPoint(0.625,0),true),new mxConnectionConstraint(new mxPoint(0.125,0.25),false),new mxConnectionConstraint(new mxPoint(0,0.5),true),new mxConnectionConstraint(new mxPoint(0.125,0.75),false),new mxConnectionConstraint(new mxPoint(0.875,0.25),false),new mxConnectionConstraint(new mxPoint(0,0.5),true),new mxConnectionConstraint(new mxPoint(1,0.5),true),new mxConnectionConstraint(new mxPoint(0.875,0.75),false),new mxConnectionConstraint(new mxPoint(0.375,1),true),new mxConnectionConstraint(new mxPoint(0.5,1),true),new mxConnectionConstraint(new mxPoint(0.625,1),true)];
mxCloud.prototype.constraints=[new mxConnectionConstraint(new mxPoint(0.25,0.25),false),new mxConnectionConstraint(new mxPoint(0.4,0.1),false),new mxConnectionConstraint(new mxPoint(0.16,0.55),false),new mxConnectionConstraint(new mxPoint(0.07,0.4),false),new mxConnectionConstraint(new mxPoint(0.31,0.8),false),new mxConnectionConstraint(new mxPoint(0.13,0.77),false),new mxConnectionConstraint(new mxPoint(0.8,0.8),false),new mxConnectionConstraint(new mxPoint(0.55,0.95),false),new mxConnectionConstraint(new mxPoint(0.875,0.5),false),new mxConnectionConstraint(new mxPoint(0.96,0.7),false),new mxConnectionConstraint(new mxPoint(0.625,0.2),false),new mxConnectionConstraint(new mxPoint(0.88,0.25),false)];
mxArrow.prototype.constraints=null;
})();
function mxModeler(f,a){var e=mxUtils.load(a);
var c=e.getDocumentElement();
var b=new mxEditor(c);
this.editor=b;
var d=b.graph;
this.initGraph(d,f);
this.keyHandler(d);
this.addGraphListeners(d,this.showProperties);
this.overrideGraph(d,b);
this.graph=d;
this.templates=a;
}mxModeler.prototype.setConnectImagePath=function(a){mxConnectionHandler.prototype.connectImage=new mxImage(a,16,16);
this.connectImagePath=a;
};
mxModeler.prototype.getEditor=function(){return this.editor?this.editor:null;
};
mxModeler.prototype.getGraph=function(){return this.graph?this.graph:null;
};
mxModeler.prototype.initGraph=function(a,b){mxCellEditor.prototype.modified=false;
mxGraph.prototype.cellsResizable=false;
mxRectangleShape.prototype.crisp=true;
mxGraphHandler.prototype.guidesEnabled=true;
a.panningHandler.autoExpand=true;
a.constrainChildren=false;
a.extendParents=false;
a.extendParentsOnAdd=true;
mxEvent.disableContextMenu(document.body);
a.init(b);
if(mxClient.IS_GC||mxClient.IS_SF){a.container.style.background="-webkit-gradient(linear, 0% 0%, 100% 0%, from(#FFFFFF), to(#FFFFEE))";
}else{if(mxClient.IS_NS){a.container.style.background="-moz-linear-gradient(left, #FFFFFF, #FFFFEE)";
}else{if(mxClient.IS_IE){a.container.style.filter="progid:DXImageTransform.Microsoft.Gradient(StartColorStr='#FFFFFF', EndColorStr='#FFFFEE', GradientType=1)";
}}}a.setConnectable(true);
a.setDropEnabled(true);
a.setPanning(true);
a.setTooltips(false);
a.setMultigraph(false);
a.setCellsResizable(true);
a.connectionHandler.setCreateTarget(false);
a.container.style.cursor="default";
};
mxModeler.prototype.keyHandler=function(b){var c=new mxKeyHandler(b),a=this.editor;
c.bindKey(90,function(d){a.execute("undo");
});
c.bindKey(89,function(d){a.execute("redo");
});
c.bindKey(46,function(d){a.execute("delete");
});
c.bindKey(67,function(d){a.execute("copy");
});
c.bindKey(86,function(d){a.execute("paste");
});
c.bindKey(88,function(d){a.execute("cut");
});
};
mxModeler.prototype.addMenu=function(b,a){b.panningHandler.factoryMethod=function(f,c,d){var e=!b.isSelectionEmpty();
f.addItem("撤销",null,function(){a.execute("undo");
},null,"undo");
f.addSeparator();
f.addItem("剪切",null,function(){a.execute("cut");
},null,"cut",e);
f.addItem("复制",null,function(){a.execute("copy");
},null,"copy",e);
f.addItem("粘贴",null,function(){a.execute("paste");
},null,"paste");
f.addSeparator();
f.addItem("删除",null,function(){a.execute("delete");
},null,"delete",e);
f.addSeparator();
f.addItem("编辑",null,function(){b.startEditing();
},null,"edit",e);
};
};
mxModeler.prototype.makeDraggable=function(a,c,g){var e=this;
var c=[c];
c[0].vertex=true;
var b=function(v,t,n,p,o){c=v.getImportableCells(c);
if(c.length>0){var q=null,u=c[0],s=u.value;
var j=(s.getAttribute("type")=="boundaryEvent");
var l=n&&(n.value.getAttribute("type")=="subProcess"||n.value.getAttribute("type")=="task");
if(n==null&&j){return;
}if(n&&j&&(n.value.getAttribute("type")=="edge")){return;
}if(n&&j&&(n.value.getAttribute("type")=="task"||n.value.getAttribute("type")=="subProcess")){var h=n.geometry.x-c[0].geometry.width/2;
var k=n.geometry.x+n.geometry.width-c[0].geometry.width/2;
p=Math.max(p,h);
p=Math.min(p,k);
var r=n.geometry.y+n.geometry.height-c[0].geometry.height/2;
var i=r;
o=i;
q=v.importCells(c,p,o,n);
if(q&&q.length>0){q[0].setParent(n);
v.scrollCellToVisible(q[0]);
v.setSelectionCells(q);
}return;
}var m=(n!=null)?v.isValidDropTarget(n,c,t):false;
if(n!=null&&!m&&v.getModel().getChildCount(n)==0&&v.getModel().isVertex(n)==c[0].vertex){q=null;
}else{if(n!=null&&!m){n=null;
}if(v.isSplitEnabled()&&v.isSplitTarget(n,c,t)){v.splitEdge(n,c,null,p,o);
q=c;
}else{c=v.getImportableCells(c);
if(c.length>0){q=v.importCells(c,p,o,n);
}}}if(q!=null&&q.length>0){v.scrollCellToVisible(q[0]);
v.setSelectionCells(q);
}}};
if(mxClient.IS_IE){mxEvent.addListener(a,"dragstart",function(h){h.returnValue=false;
});
}var d=function(j,h){var i=document.createElement("div");
i.style.border="1px double black";
i.style.width=j+"px";
i.style.height=h+"px";
return i;
};
var f=mxUtils.makeDraggable(a,e.graph,b,d(c[0].geometry.width,c[0].geometry.height),null,null,e.graph.autoscroll,true);
f.isGuidesEnabled=function(){return e.graph.graphHandler.guidesEnabled;
};
f.createDragElement=mxDragSource.prototype.createDragElement;
};
mxModeler.prototype.reloadGraph=function(b){var c=mxUtils.parseXml(b);
var a=new mxCodec(c);
a.decode(c.documentElement,this.editor.graph.model);
};
mxModeler.prototype.showProperties=function(a){};
mxModeler.prototype.addGraphListeners=function(b,a){b.getSelectionModel().addListener(mxEvent.CHANGE,function(e,d){b.container.focus();
var c=b.getSelectionCell();
if(c&&c.isEdge()){var g=c.source;
var h=c.target;
if(g&&h&&(g.value.getAttribute("type")=="startEvent")){var f=h.getParent();
if(!mxUtils.isNode(f.value)){h.value.setAttribute("tasktype","Starter");
}}}if(a){a(c);
}});
};
mxModeler.prototype.overrideGraph=function(g,e){mxGuide.prototype.isEnabledForEvent=function(j){return !mxEvent.isAltDown(j);
};
var f=mxConnectionHandler.prototype.createEdge;
mxConnectionHandler.prototype.createEdge=function(n,m,o,k){var j=e.templates.SequenceFlow;
n=j.value;
var l=f.apply(this,arguments);
l.setValue(n);
return l;
};
var c=mxConnectionHandler.prototype.insertEdge;
mxConnectionHandler.prototype.insertEdge=function(k,o,m,l,n,j){if(!n){return l;
}return c.apply(this,arguments);
};
var b=mxConnectionHandler.prototype.validateConnection;
mxConnectionHandler.prototype.validateConnection=function(m,o){if(parent&&!parent.value&&m&&(m.value.getAttribute("type")=="startEvent")&&(m.edges!=null)&&m.edges.length>0){Ext.Msg.alert("验证","主流程开始节点后只能存在一个任务节点。");
return m;
}if(parent&&!parent.value&&m&&(m.value.getAttribute("type")=="startEvent")&&(o&&o.value.getAttribute("tasktype")=="Countersign")){Ext.Msg.alert("验证","主流程第一个任务点不能设置为会签任务。");
return m;
}if(parent&&!parent.value&&m&&(m.value.getAttribute("type")=="startEvent")&&(o&&o.value.getAttribute("usertaskassignment"))){o.value.setAttribute("usertaskassignment","");
}if(m&&o&&o.edges){var j=m.id;
for(var k=0;
k<o.edges.length;
k++){var l=o.edges[k].target;
if(!l||j==l.id){return m;
}}}if(m&&m.edges&&o){var n=o.id;
for(var k=0;
k<m.edges.length;
k++){var l=m.edges[k].target;
if(!l||n==l.id){return m;
}}}if(!o){return m;
}return(m&&o&&(mxUtils.isNode(m.value)&&mxUtils.isNode(o.value))&&(m.value.getAttribute("type")=="startEvent")&&(o.value.getAttribute("type")=="startEvent"))?m:b.apply(this,arguments);
};
g.convertValueToString=function(j){return mxUtils.isNode(j.value)?j.getAttribute("name",""):"";
};
g.getLabel=function(j){return j?(mxUtils.isNode(j.value)?j.getAttribute("name",""):(j.isEdge()?j.value:"")):"";
};
var h=g.getTooltipForCell;
g.getTooltipForCell=function(j){if(g.getModel().isEdge(j)){var l=this.getLabel(this.getModel().getTerminal(j,true));
var k=this.getLabel(this.getModel().getTerminal(j,false));
return l+" "+j.value.nodeName+" "+k;
}return h.apply(this,arguments);
};
var a=g.cellLabelChanged;
g.cellLabelChanged=function(k,n,j){if(mxUtils.isNode(k.value)){var o=n.indexOf(" ");
var m=(o>0)?n.substring(0,o):n;
var l=k.value.cloneNode(true);
l.setAttribute("name",m);
n=l;
j=false;
}a.apply(this,arguments);
};
g.getEditingValue=function(j){return mxUtils.isNode(j.value)?j.getAttribute("name",""):"";
};
g.flipEdge=function(l){if(l!=null){var n=this.view.getState(l);
var k=(n!=null)?n.style:this.getCellStyle(l);
if(k!=null){var j=mxUtils.getValue(k,mxConstants.STYLE_ELBOW,mxConstants.ELBOW_HORIZONTAL);
var m=(j==mxConstants.ELBOW_HORIZONTAL)?mxConstants.ELBOW_VERTICAL:mxConstants.ELBOW_HORIZONTAL;
this.setCellStyles(mxConstants.STYLE_ELBOW,m,[l]);
}}};
var i=mxGraph.prototype.moveCells;
mxGraph.prototype.moveCells=function(o,n,m,q,l,k){if(o&&o.length>0){var j=o[0];
if(j&&j.value&&mxUtils.isNode(j.value)&&j.value.getAttribute("type")=="boundaryEvent"){var p=j.getParent();
if(p&&p.value&&mxUtils.isNode(p.value)){o=[j];
return o;
}}}return i.apply(this,arguments);
};
var d=g.isCellResizable;
g.isCellResizable=function(j){if(j&&j.value&&mxUtils.isNode(j.value)&&j.value.getAttribute("type")=="boundaryEvent"){return false;
}return d.apply(this,arguments);
};
};
if(top!=self){top.location=self.location;
}var countDown=30;
function ajaxPostRequest(b,c,d){var a=new Ext.LoadMask(Ext.getBody(),{msg:"请等候..."});
a.show();
Ext.Ajax.request({url:b||"",params:c||{},method:"POST",success:function(f,g){if(a!=undefined){a.destroy();
}var e=Ext.decode(f.responseText,true);
if(d){d(e);
}},failure:function(e,f){if(a!=undefined){a.hide();
}Ext.MessageBox.alert("失败","请求超时或网络故障,错误编号："+e.status);
}});
}Ext.Ajax.on("requestcomplete",checkUserSessionStatus,this);
function checkUserSessionStatus(c,a,b){try{if(a&&a.getAllResponseHeaders().sessionstatus){setTimeout(function(){Ext.MessageBox.alert(globalRes.title.fail,globalRes.msg.logoutTimeout,function(){location.href=location.href;
});
},500);
}}catch(d){}}function setCookie(b,d,a,f,c,e){document.cookie=b+"="+escape(d)+((a)?"; expires="+a.toGMTString():"")+((f)?"; path="+f:"")+((c)?"; domain="+c:"")+((e)?"; secure":"");
}function getCookie(b){var d=b+"=";
var e=document.cookie.indexOf(d);
if(e==-1){return null;
}var a=document.cookie.indexOf(";",e+d.length);
if(a==-1){a=document.cookie.length;
}var c=document.cookie.substring(e+d.length,a);
return unescape(c);
}var timeoutTask=new Ext.util.DelayedTask(function(){var c=new Array();
var b=function(d){return function(){if(d==countDown){Ext.MessageBox.hide();
window.location.href=globalRes.logoutUrl;
}else{Ext.MessageBox.updateProgress(d/countDown,Oz.Utils.getTplMsg(globalRes.timeoutTpl,{seconds:(countDown-d)}));
}};
};
for(var a=1;
a<=countDown;
a++){c[a-1]=setTimeout(b(a),1000*a);
}Ext.MessageBox.show({title:globalRes.timeoutTitle,msg:globalRes.timeoutMessage,progressText:Oz.Utils.getTplMsg(globalRes.timeoutTpl,{seconds:countDown}),width:300,progress:true,closable:false,buttons:Ext.MessageBox.YESNO,fn:function(e){if(e=="yes"){for(var d=0;
d<countDown;
d++){if(c[d]){clearTimeout(c[d]);
}}}else{window.location.href=globalRes.logoutUrl;
}},icon:Ext.MessageBox.WARNING});
});
Ext.applyIf(Array.prototype,{indexOf:function(b,c){var a=this.length;
c=c||0;
c+=(c<0)?a:0;
for(;
c<a;
++c){if(this[c]===b){return c;
}}return -1;
},remove:function(b){var a=this.indexOf(b);
if(a!=-1){this.splice(a,1);
}return this;
}});
Ext.define("FlexCenter.Constants",{statics:{USER_OA_MENU:[{id:"1",text:"下属工作日志",iconCls:"down-diary-icon",leaf:true},{id:"2",text:"我的消息",iconCls:"icon-message",leaf:true},{id:"3",text:"我的日志",iconCls:"diary-icon",leaf:true},{id:"4",text:"个人文档",iconCls:"icon-document",leaf:true},{id:"5",text:"工作计划",iconCls:"plan-icon",leaf:true},{id:"6",text:"我的附件",leaf:true,iconCls:"icon-fileAttach"},{id:"7",text:"我的邮箱",iconCls:"email-icon",leaf:true},{id:"8",text:"我的通讯录",iconCls:"contact-icon",leaf:true},{id:"9",text:"新闻查看",iconCls:"menu-news",widget:"newsClientView",widgetItemId:"newsClientView",leaf:true},{id:"10",text:"公告查看",iconCls:"icon-announcement",leaf:true},{id:"11",text:"报表查看",iconCls:"icon-report",leaf:true},{id:"12",text:"规章制度",iconCls:"icon-regulation",leaf:true},{id:"13",text:"公司信息",iconCls:"icon-company",leaf:true}],USER_WORKFLOW_MENU:[{id:"1",text:"新建流程",widget:"processDefinitionView",iconCls:"btn-newFlow",widgetItemId:"processDefinitionView",config:{closable:true},leaf:true},{id:"2",text:"待办事项",iconCls:"icon-flowWait",widget:"taskView",widgetItemId:"taskView",leaf:true},{id:"3",text:"我的申请流程",widget:"applyProcessView",widgetItemId:"applyProcessView",leaf:true},{id:"4",text:"任务追回",widget:"clawBackTaskView",widgetItemId:"clawBackTaskView",leaf:true},{id:"5",text:"草稿箱",widget:"processDefInstanceDraftView",widgetItemId:"processDefInstanceDraftView",leaf:true}],GLOBAL_TYPE_KEY:[{id:"1",key:"Workflow",text:"流程分类",leaf:true}],DICTIONARY_TYPE_KEY:[{id:"1",key:"Degree",text:"学历",leaf:true},{id:"2",key:"Major",text:"专业",leaf:true},{id:"3",key:"MaritalStatus",text:"婚姻状况",leaf:true},{id:"4",key:"Country",text:"国家",leaf:true},{id:"5",key:"Province",text:"省份",leaf:true},{id:"6",key:"City",text:"城市",leaf:true},{id:"7",key:"District",text:"区/县",leaf:true},{id:"8",key:"Organization",text:"组织分类",leaf:true},{id:"9",key:"Political",text:"政治面貌",leaf:true},{id:"10",key:"Nationality",text:"民族",leaf:true},{id:"11",key:"Religion",text:"宗教",leaf:true},{id:"12",key:"archStoragePeriod",text:"案卷保管期限",leaf:true},{id:"13",key:"archRollOpenType",text:"案卷开放形式",leaf:true},{id:"14",key:"fileStoragePeriod",text:"文件保管期限",leaf:true},{id:"15",key:"fileOpenType",text:"文件开放形式",leaf:true},{id:"16",key:"fileSecretLevel",text:"文件密级",leaf:true},{id:"17",key:"archFondOpenType",text:"全宗开放形式",leaf:true}],ARCH_OA_MENU:[{id:"1",text:"全宗管理",iconCls:"btn-archFond",leaf:true},{id:"2",text:"案卷管理",iconCls:"btn-archRoll",leaf:true},{id:"3",text:"卷內文件管理",iconCls:"btn-rollFile",leaf:true},{id:"4",text:"归档文件管理",iconCls:"btn-tidyFile",leaf:true},{id:"5",text:"档案统计",iconCls:"btn-archSat",leaf:false,widget:"",widgetItemId:"",expanded:true,children:[{id:"6",text:"年度统计",iconCls:"btn-archYearReport",leaf:true},{id:"7",text:"案卷统计",iconCls:"btn-archRollReport",leaf:true},{id:"8",text:"文件统计",iconCls:"btn-archFileReport",leaf:true}]}]}});
Ext.define("FlexCenter.model.LabelValue",{extend:"Ext.data.Model",requires:[],fields:[{name:"label",type:"string"},{name:"value",type:"string"}]});
Ext.define("FlexCenter.model.WallpaperModel",{extend:"Ext.data.Model",fields:[{name:"text"},{name:"img"}]});
Ext.define("FlexCenter.store.Base",{extend:"Ext.data.Store",alias:"store.base",constructor:function(a){var c=this;
Ext.apply(this,a);
this.callParent();
if(this.baseParams&&c.proxy){var b=function(e){for(var d in e){if(typeof(e[d])!="function"){c.proxy.extraParams[d]=e[d];
}}};
if(Ext.isArray(this.baseParams)){Ext.each(this.baseParams,b);
}else{b(this.baseParams);
}}},setBaseParams:function(b,a){if(this.proxy){this.proxy.extraParams[b]=a;
}},getBaseParamValue:function(a){if(this.proxy){return this.proxy.extraParams[a];
}},reload:function(a){var b=this.proxy.extraParams;
if(b&&b!=null){this.proxy.extraParams=b;
if(a&&a!=null){this.load(a);
}else{this.load();
}}}});
